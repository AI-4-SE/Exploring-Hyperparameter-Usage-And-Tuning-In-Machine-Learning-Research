{
    "draw.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, img_size)",
                    "possible_values": []
                }
            },
            "LSTMCell_45": {
                "variable": {
                    "value": "lstm_enc",
                    "possible_values": []
                },
                "units": {
                    "value": "enc_size",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LSTMCell_46": {
                "variable": {
                    "value": "lstm_dec",
                    "possible_values": []
                },
                "units": {
                    "value": "dec_size",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "h_dec_prev",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, dec_size)",
                    "possible_values": []
                }
            },
            "sigmoid_180": {
                "variable": {
                    "value": "x_recons",
                    "possible_values": []
                },
                "x": {
                    "value": "cs[-1]",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "variable": {
                    "value": "Lx",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binary_crossentropy(x, x_recons)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "Lx",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Lx",
                    "possible_values": [
                        [
                            "tf.reduce_sum(binary_crossentropy(x, x_recons), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Lx)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_192": {
                "variable": {
                    "value": "KL",
                    "possible_values": []
                },
                "inputs": {
                    "value": "kl_terms",
                    "possible_values": [
                        [
                            "[0] * T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_193": {
                "variable": {
                    "value": "Lz",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "KL",
                    "possible_values": [
                        [
                            "tf.add_n(kl_terms)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_199": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "InteractiveSession_218": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_220": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], output_dim]",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "grid_i",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.range(N), tf.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.range(A), tf.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.range(B), tf.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "mu_x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_x",
                    "possible_values": [
                        [
                            "gx + (grid_i - N / 2 - 0.5) * delta",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mu_x, [-1, N, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, N, 1]",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "mu_y",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_y",
                    "possible_values": [
                        [
                            "gy + (grid_i - N / 2 - 0.5) * delta",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mu_y, [-1, N, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, N, 1]",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "sigma2",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "tf.square(sigmas[t])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma2, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.exp(log_sigma2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "Fx",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(a - mu_x) / (2 * sigma2)",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "Fy",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(b - mu_y) / (2 * sigma2)",
                    "possible_values": []
                }
            },
            "split_77": {
                "variable": {
                    "value": "(gx_, gy_, log_sigma2, log_delta, log_gamma)",
                    "possible_values": []
                },
                "value": {
                    "value": "params",
                    "possible_values": [
                        [
                            "linear(h_dec, 5)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "5",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_80": {
                "variable": {
                    "value": "sigma2",
                    "possible_values": []
                },
                "x": {
                    "value": "log_sigma2",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], output_dim])",
                            "Call"
                        ],
                        [
                            "linear(h_dec, write_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [batch_size, N, N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, N, N]",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "Fyt",
                    "possible_values": []
                },
                "a": {
                    "value": "Fy",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(b - mu_y) / (2 * sigma2))",
                            "Call"
                        ],
                        [
                            "Fy / tf.maximum(tf.reduce_sum(Fy, 2, keep_dims=True), eps)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], output_dim])",
                            "Call"
                        ],
                        [
                            "linear(h_dec, write_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [batch_size, N, N])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Fx",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(a - mu_x) / (2 * sigma2))",
                            "Call"
                        ],
                        [
                            "Fx / tf.maximum(tf.reduce_sum(Fx, 2, keep_dims=True), eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "wr",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wr",
                    "possible_values": [
                        [
                            "tf.matmul(Fyt, tf.matmul(w, Fx))",
                            "Call"
                        ],
                        [
                            "tf.reshape(wr, [batch_size, B * A])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, B * A]",
                    "possible_values": []
                }
            },
            "square_188": {
                "variable": {
                    "value": "mu2",
                    "possible_values": []
                },
                "x": {
                    "value": "mus[t]",
                    "possible_values": []
                }
            },
            "square_189": {
                "variable": {
                    "value": "sigma2",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmas[t]",
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_221": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_86": {
                "values": {
                    "value": "[x, x_hat]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "Fxt",
                    "possible_values": []
                },
                "a": {
                    "value": "Fx",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(a - mu_x) / (2 * sigma2))",
                            "Call"
                        ],
                        [
                            "Fx / tf.maximum(tf.reduce_sum(Fx, 2, keep_dims=True), eps)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.reshape(img, [-1, B, A])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, A]",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "a": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.reshape(img, [-1, B, A])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Fxt",
                    "possible_values": [
                        [
                            "tf.transpose(Fx, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "glimpse",
                    "possible_values": []
                },
                "tensor": {
                    "value": "glimpse",
                    "possible_values": [
                        [
                            "tf.matmul(Fy, tf.matmul(img, Fxt))",
                            "Call"
                        ],
                        [
                            "tf.reshape(glimpse, [-1, N * N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, N * N]",
                    "possible_values": []
                }
            },
            "concat_98": {
                "values": {
                    "value": "[x, x_hat]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_124": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "x": {
                    "value": "logsigma",
                    "possible_values": [
                        [
                            "logsigmas[t]",
                            "Subscript"
                        ],
                        [
                            "linear(h_enc, z_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_55": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, img_size))",
                            "Call"
                        ],
                        [
                            "filter_img(x, Fx, Fy, gamma, read_n)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], output_dim])",
                            "Call"
                        ],
                        [
                            "linear(h_dec, write_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [batch_size, N, N])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_58": {
                "x": {
                    "value": "tf.range(N)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "tf.range(A)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_62": {
                "x": {
                    "value": "tf.range(B)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "maximum_69": {
                "x": {
                    "value": "tf.reduce_sum(Fx, 2, keep_dims=True)",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            },
            "maximum_70": {
                "x": {
                    "value": "tf.reduce_sum(Fy, 2, keep_dims=True)",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_81": {
                "x": {
                    "value": "log_delta",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "mu",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "sigma",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "write",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "writeW",
                    "possible_values": []
                },
                "reuse": {
                    "value": "DO_SHARE",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_147": {
                "tensor": {
                    "value": "1.0 / gamma",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "shape": {
                    "value": "(batch_size, img_size)",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "x": {
                    "value": "c_prev",
                    "possible_values": [
                        [
                            "tf.zeros((batch_size, img_size)) if t == 0 else cs[t - 1]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_167": {
                "values": {
                    "value": "[r, h_dec_prev]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "constant_initializer_54": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "Fx",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(a - mu_x) / (2 * sigma2))",
                            "Call"
                        ],
                        [
                            "Fx / tf.maximum(tf.reduce_sum(Fx, 2, keep_dims=True), eps)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "Fy",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(b - mu_y) / (2 * sigma2))",
                            "Call"
                        ],
                        [
                            "Fy / tf.maximum(tf.reduce_sum(Fy, 2, keep_dims=True), eps)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_82": {
                "x": {
                    "value": "log_gamma",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "gamma",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "mu2 + sigma2 - 2 * logsigma",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_by_norm_203": {
                "t": {
                    "value": "g",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "square_66": {
                "x": {
                    "value": "a - mu_x",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "b - mu_y",
                    "possible_values": []
                }
            },
            "log_177": {
                "x": {
                    "value": "1.0 - o + eps",
                    "possible_values": []
                }
            }
        }
    }
}