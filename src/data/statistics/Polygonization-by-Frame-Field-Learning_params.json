{
    "backbone.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "backbone.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(backbone.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "backbone.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(backbone.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Identity_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "backbone_params['features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "backbone.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(backbone.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "backbone_params['features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "backbone.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(backbone.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "backbone_params['features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "backbone_params['features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "child_processes.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset_folds.py": {
        "torch": {
            "manual_seed_78": {
                "seed": {
                    "value": "config['dataset_params']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_117": {
                "seed": {
                    "value": "config['dataset_params']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_187": {
                "seed": {
                    "value": "config['dataset_params']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/data_transforms.py": {
        "torch": {
            "ones_76": {
                "variable": {
                    "value": "batch[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['image'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch[tensor_key] for tensor_key in tensor_keys]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_104": {
                "variable": {
                    "value": "combined[:, bilinear_slice, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "combined[:, bilinear_slice, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_lydorn.kornia.geometry.transform.get_affine_grid(combined, angle, offset, downscale_factor)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_111": {
                "variable": {
                    "value": "combined[:, nearest_slice, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "combined[:, nearest_slice, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_lydorn.kornia.geometry.transform.get_affine_grid(combined, angle, offset, downscale_factor)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_94": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['image'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_97": {
                "*size": {
                    "value": "(batch_size, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['image'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_100": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['image'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_147": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['image'].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "frame_field_learning/evaluate.py": {
        "torch": {
            "DistributedSampler_44": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(eval_ds, rng_samples.sample(range(len(eval_ds)), config['samples']))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(eval_ds, batch_size=config['optim_params']['eval_batch_size'], pin_memory=True, sampler=eval_sampler, num_workers=config['num_workers'])",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "config['world_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['nr'] * config['gpus'] + gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "eval_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(eval_ds, rng_samples.sample(range(len(eval_ds)), config['samples']))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(eval_ds, batch_size=config['optim_params']['eval_batch_size'], pin_memory=True, sampler=eval_sampler, num_workers=config['num_workers'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['optim_params']['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(eval_ds, num_replicas=config['world_size'], rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_58": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FrameFieldModel(config, backbone=backbone, eval_transform=eval_online_cuda_transform)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_34": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_41": {
                "variable": {
                    "value": "eval_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(eval_ds, rng_samples.sample(range(len(eval_ds)), config['samples']))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(eval_ds, batch_size=config['optim_params']['eval_batch_size'], pin_memory=True, sampler=eval_sampler, num_workers=config['num_workers'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rng_samples.sample(range(len(eval_ds)), config['samples'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/evaluator.py": {
        "torch": {
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ],
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "accumulated_tile_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_tile_data[key] for _tile_data in tile_data_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/frame_field_utils.py": {
        "torch": {
            "chunk_44": {
                "variable": {
                    "value": "(c0, c2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c0c2",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "uv_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u_squared, v_squared]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "uv_dot_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv * directions[:, None, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_64": {
                "variable": {
                    "value": "abs_uv_dot_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_dot_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(uv * directions[:, None, :], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_66": {
                "variable": {
                    "value": "closest_in_uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_uv_dot_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(uv_dot_dir)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "penalty_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filter.to(tensor.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "penalty_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(tensor, self.filter.to(tensor.device), padding=1, groups=self.channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[[0.5, 1.0, 0.5], [1.0, -6.0, 1.0], [0.5, 1.0, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/ictnet.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "get_preact_conv(in_channels, out_channels, kernel_size=1, padding=0, dropout_2d=dropout_2d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x2, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, c, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "sum_333": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result['out']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_42": {
                "variable": {
                    "value": "concated_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "features[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(features, 1)",
                            "Call"
                        ],
                        [
                            "self.se_layer(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_149": {
                "variable": {
                    "value": "self.conv_transpose_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate * n_layers_per_block[n_pool + i]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.first_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_first_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.down_dense_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.transition_downs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.transition_ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.up_dense_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "up_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layers_per_block[n_pool] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "growth_rate * n_layers_per_block[n_pool + i + 1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_35": {
                "p": {
                    "value": "dropout_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout2d_65": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.checkpoint.checkpoint(dense_layer_function, *prev_features)",
                            "Call"
                        ],
                        [
                            "dense_layer_function(*prev_features)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(new_features, p=self.dropout_2d, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(*features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_127": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_73": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels // ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "in_channels // ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/inference.py": {
        "torch": {
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_162": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ],
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "patch_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "patch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((config['eval_params']['patch_size'] + 2, config['eval_params']['patch_size'] + 2), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "scipy.ndimage.distance_transform_edt(patch_weights)",
                            "Call"
                        ],
                        [
                            "patch_weights[1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(patch_weights, device=config['device']).float()",
                            "Call"
                        ],
                        [
                            "patch_weights[None, None, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "tile_data[seg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, seg_channels, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "tile_data[crossfield]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 4, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/inference_from_filepath.py": {
        "torch": {
            "from_numpy_46": {
                "ndarray": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(image_float.reshape(-1, image_float.shape[-1]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(image_float.reshape(-1, image_float.shape[-1]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "frame_field_learning/losses.py": {
        "torch": {
            "cat_230": {
                "variable": {
                    "value": "gt_field",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(gt_crossfield_angle), torch.sin(gt_crossfield_angle)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.loss_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "loss_funcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_333": {
                "variable": {
                    "value": "mean_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "measures.dice_loss(pred_seg, gt_seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_334": {
                "variable": {
                    "value": "mean_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_batch['seg']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_batch['gt_polygons_image'][:, self.gt_channel_selector, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gt_batch['seg_loss_weights'][:, self.gt_channel_selector, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_359": {
                "variable": {
                    "value": "avg_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_loss * gt_edges",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "z_90deg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-z[:, 1:2, ...], z[:, 0:1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_382": {
                "variable": {
                    "value": "avg_align90_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align90_loss * gt_edges_minus_vertices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_396": {
                "variable": {
                    "value": "avg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalty * gt_edges_inv[:, None, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_415": {
                "variable": {
                    "value": "avg_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_loss * seg_slice_grad_norm.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_435": {
                "variable": {
                    "value": "raw_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_edge - seg_interior_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_439": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outside_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cos(np.pi * seg_interior) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_440": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "gt_batch['class_freq']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_190": {
                "input": {
                    "value": "-distance_weights ** 2 / sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_230": {
                "input": {
                    "value": "gt_crossfield_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_batch['gt_crossfield_angle']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_231": {
                "input": {
                    "value": "gt_crossfield_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_batch['gt_crossfield_angle']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_437": {
                "input": {
                    "value": "np.pi * seg_interior",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_438": {
                "input": {
                    "value": "np.pi * seg_interior_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/measures.py": {
        "torch": {
            "sum_8": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_pred * mask_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_9": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_pred + mask_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/model.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "self.seg_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(backbone_out_features, backbone_out_features, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.crossfield_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(backbone_out_features + seg_channels, backbone_out_features, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "backbone_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[backbone_features, seg_to_cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "seg_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.config['seg_params']['compute_vertex'] + self.config['seg_params']['compute_edge'] + self.config['seg_params']['compute_interior']",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "backbone_out_features + seg_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "backbone_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_out_channels(self.backbone)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "crossfield_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/plot_utils.py": {
        "torch": {
            "clamp_45": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(seg, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "variable": {
                    "value": "seg_display",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((2, 3, 512, 512)) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "crossfield",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 4, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "image_plot_crossfield",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_plot_crossfield_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[get_image_plot_crossfield(_crossfield, crossfield_stride=10) for _crossfield in np_crossfield]",
                            "ListComp"
                        ],
                        [
                            "[torchvision.transforms.functional.to_tensor(image_plot_crossfield).float() / 255 for image_plot_crossfield in image_plot_crossfield_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg * 0.9",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((2, 2, 512, 512))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "(2, 3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/polygonize_acm.py": {
        "torch": {
            "ones_92": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "edges.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "midpoints_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "midpoints_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "midpoints_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "midpoints_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[3] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_104": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "polygon[1:] - polygon[:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "total_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_field_utils.framefield_align_error(midpoints_c0, midpoints_c2, z, complex_dim=1)",
                            "Call"
                        ],
                        [
                            "align_loss * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_125": {
                "variable": {
                    "value": "level_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pos_indicator_value - self.level, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(norms * edge_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_171": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[tensorpoly.pos]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['poly_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'indicator_add_edge': False, 'steps': 500, 'data_level': 0.5, 'data_coef': 0.1, 'length_coef': 0.4, 'crossfield_coef': 0.5, 'poly_lr': 0.01, 'warmup_iters': 100, 'warmup_factor': 0.1, 'device': 'cuda', 'tolerance': 0.5, 'seg_threshold': 0.5, 'min_area': 1, 'inner_polylines_params': {'enable': False, 'max_traces': 1000, 'seed_threshold': 0.5, 'low_threshold': 0.1, 'min_width': 2, 'max_width': 8, 'step_size': 1}}",
                            "Dict"
                        ]
                    ]
                }
            },
            "LambdaLR_180": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_warmup_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_351": {
                "variable": {
                    "value": "dist_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_dist_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(np_indicator_batch.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_424": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filapth_format.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_473": {
                "variable": {
                    "value": "seg_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_474": {
                "variable": {
                    "value": "crossfield_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crossfield_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "dist_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pos_dist_value, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_468": {
                "variable": {
                    "value": "raw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "raw_pred_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.raw_pred",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_125": {
                "input": {
                    "value": "pos_indicator_value - self.level",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_134": {
                "input": {
                    "value": "norms * edge_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_131": {
                "input": {
                    "value": "pos_dist_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_interpolate(self.dist[:, None, ...], tensorpoly.pos, batch=tensorpoly.batch)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_510": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_584": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_545": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/polygonize_asm.py": {
        "torch": {
            "empty_92": {
                "variable": {
                    "value": "junction_edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2 * tensorskeleton.num_paths, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensorskeleton.path_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_101": {
                "variable": {
                    "value": "group_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_edge_index[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_106": {
                "variable": {
                    "value": "junction_angle_to_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_tangent[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "junction_tangent[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_consecutive_108": {
                "variable": {
                    "value": "unique",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "grouped_junction_edge_index[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_110": {
                "variable": {
                    "value": "junction_end_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorskeleton.degrees[unique]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_112": {
                "variable": {
                    "value": "junction_corner_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(grouped_junction_edge_index.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensorskeleton.path_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_116": {
                "variable": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slice_angle_to_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "junction_angle_to_axis[slice_start:slice_end]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "self.junction_angle_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_params['junction_angle_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_176": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tangents.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tangents.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_183": {
                "variable": {
                    "value": "midpoints_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "midpoints_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_184": {
                "variable": {
                    "value": "midpoints_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "midpoints_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[3] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_188": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tangents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_pos[1:] - path_pos[:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "total_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_field_utils.framefield_align_error(midpoints_c0, midpoints_c2, normed_tangents, complex_dim=1)",
                            "Call"
                        ],
                        [
                            "align_loss * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_208": {
                "variable": {
                    "value": "level_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pos_value - self.level, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_216": {
                "variable": {
                    "value": "prev_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_tangent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "middle_pos - prev_pos",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_217": {
                "variable": {
                    "value": "next_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tangent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_pos - middle_pos",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_220": {
                "variable": {
                    "value": "prev_length_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(prev_tangent, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_221": {
                "variable": {
                    "value": "next_length_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(next_tangent, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_227": {
                "variable": {
                    "value": "total_length_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_length_loss + next_length_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_293": {
                "variable": {
                    "value": "curvature_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertex_angles - expanded_sub_path_mean_vertex_angles",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_296": {
                "variable": {
                    "value": "total_curvature_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curvature_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(vertex_angles - expanded_sub_path_mean_vertex_angles, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_299": {
                "variable": {
                    "value": "corner_abs_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner_angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertex_angles[is_corner_index - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_301": {
                "variable": {
                    "value": "corner_snap_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner_abs_angles[:, None] - self.corner_angles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_304": {
                "variable": {
                    "value": "corner_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner_snap_dist_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corner_snap_dist[corner_snap_dist_optim_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "total_corner_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(corner_snap_dist_optim, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_315": {
                "variable": {
                    "value": "junction_abs_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "junction_prev_dir[:, 0] * junction_next_dir[:, 0] + junction_prev_dir[:, 1] * junction_next_dir[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_318": {
                "variable": {
                    "value": "junction_snap_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_abs_angles[:, None] - self.junction_angles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_322": {
                "variable": {
                    "value": "junction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_snap_dist_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "junction_snap_dist[junction_snap_dist_optim_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_323": {
                "variable": {
                    "value": "total_junction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "junction_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(junction_snap_dist_optim)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_370": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[tensorskeleton.pos]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'init_method': 'skeleton', 'data_level': 0.5, 'loss_params': {'coefs': {'step_thresholds': [0, 100, 200, 300], 'data': [1.0, 0.1, 0.0, 0], 'crossfield': [0.0, 0.05, 0.0, 0], 'length': [0.1, 0.01, 0.0, 0], 'curvature': [0.0, 0.0, 1.0, 1e-06], 'corner': [0.0, 0.0, 0.5, 1e-06], 'junction': [0.0, 0.0, 0.5, 1e-06]}, 'curvature_dissimilarity_threshold': 2, 'corner_angles': [45, 90, 135], 'corner_angle_threshold': 22.5, 'junction_angles': [0, 45, 90, 135], 'junction_angle_weights': [1, 0.01, 0.1, 0.01], 'junction_angle_threshold': 22.5}, 'lr': 0.1, 'gamma': 0.995, 'device': 'cuda', 'tolerance': 1.0, 'seg_threshold': 0.5, 'min_area': 10}",
                            "Dict"
                        ],
                        [
                            "{'init_method': 'marching_squares', 'data_level': 0.5, 'loss_params': {'coefs': {'step_thresholds': [0, 100, 200, 300], 'data': [1.0, 0.1, 0.0, 0.0], 'crossfield': [0.0, 0.05, 0.0, 0.0], 'length': [0.1, 0.01, 0.0, 0.0], 'curvature': [0.0, 0.0, 0.0, 0.0], 'corner': [0.0, 0.0, 0.0, 0.0], 'junction': [0.0, 0.0, 0.0, 0.0]}, 'curvature_dissimilarity_threshold': 2, 'corner_angles': [45, 90, 135], 'corner_angle_threshold': 22.5, 'junction_angles': [0, 45, 90, 135], 'junction_angle_weights': [1, 0.01, 0.1, 0.01], 'junction_angle_threshold': 22.5}, 'lr': 0.01, 'gamma': 0.995, 'device': 'cuda', 'tolerance': 0.5, 'seg_threshold': 0.5, 'min_area': 10}",
                            "Dict"
                        ],
                        [
                            "{'init_method': 'skeleton', 'data_level': 0.5, 'loss_params': {'coefs': {'step_thresholds': [0, 100, 200], 'data': [1.0, 0.1, 0.0], 'crossfield': [0.0, 0.05, 0.0], 'length': [0.1, 0.01, 0.0], 'curvature': [0.0, 0.0, 0.0], 'corner': [0.0, 0.0, 0.0], 'junction': [0.0, 0.0, 0.0]}, 'curvature_dissimilarity_threshold': 2, 'corner_angles': [45, 90, 135], 'corner_angle_threshold': 22.5, 'junction_angles': [0, 45, 90, 135], 'junction_angle_weights': [1, 0.01, 0.1, 0.01], 'junction_angle_threshold': 22.5}, 'lr': 0.1, 'gamma': 0.995, 'device': 'cuda', 'tolerance': 1.0, 'seg_threshold': 0.5, 'min_area': 10}",
                            "Dict"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_371": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_386": {
                "variable": {
                    "value": "pos_gard_is_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensorskeleton.pos.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_386": {
                "variable": {
                    "value": "pos_gard_is_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_871": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filapth_format.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_922": {
                "variable": {
                    "value": "seg_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_923": {
                "variable": {
                    "value": "crossfield_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crossfield_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_232": {
                "variable": {
                    "value": "middle_pos_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "middle_pos_int[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_233": {
                "variable": {
                    "value": "middle_pos_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "middle_pos_int[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.c0c2.shape[3] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_244": {
                "variable": {
                    "value": "(sub_path_delim, sub_path_sort_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([self.tensorskeleton.path_delim, is_corner_index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "relative_path_pos_projected_lengh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_path_pos * expanded_sub_path_normal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_264": {
                "variable": {
                    "value": "path_pos_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_path_pos - relative_path_pos_projected",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_917": {
                "variable": {
                    "value": "raw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "raw_pred_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.raw_pred",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_208": {
                "input": {
                    "value": "pos_value - self.level",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "acos_276": {
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_dir[:, 0] * next_dir[:, 0] + prev_dir[:, 1] * next_dir[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_276": {
                "input": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_dir[:, 0] * next_dir[:, 1] - prev_dir[:, 1] * next_dir[:, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_653": {
                "variable": {
                    "value": "corrected_edge_prob_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_batch[:, 1, :, :] + corrected_edge_prob_batch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "loss_params['corner_angles']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "loss_params['junction_angles']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "[self.tensorskeleton.path_delim, is_corner_index]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_962": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_963": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_242": {
                "input": {
                    "value": "is_corner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_tangent_closest_in_uv != next_tangent_closest_in_uv",
                            "Compare"
                        ]
                    ]
                }
            },
            "norm_311": {
                "input": {
                    "value": "junction_prev_tangent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "junction_corner[:, 1, :] - junction_corner[:, 0, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_312": {
                "input": {
                    "value": "junction_next_tangent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "junction_corner[:, 2, :] - junction_corner[:, 1, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_256": {
                "input": {
                    "value": "sub_path_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_path_end_pos - sub_path_start_pos",
                            "BinOp"
                        ],
                        [
                            "sub_path_normal / (torch.norm(sub_path_normal, dim=1)[:, None] + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1039": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1040": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1164": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1165": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1092": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1093": {
                "data": {
                    "value": "np.transpose(crossfield, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/polygonize_simple.py": {
        "torch": {
            "tensor_201": {
                "data": {
                    "value": "np.transpose(seg[:, :, :2], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/save_utils.py": {
        "torch": {
            "save_274": {
                "obj": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_filepath[0], name, base_filepath[1] + ext)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_filepath[0], base_filepath[1] + ext)",
                            "Call"
                        ],
                        [
                            "base_filepath + '.' + name + ext",
                            "BinOp"
                        ],
                        [
                            "base_filepath + ext",
                            "BinOp"
                        ],
                        [
                            "get_save_filepath(base_filepath, name, '.tif')",
                            "Call"
                        ],
                        [
                            "get_save_filepath(base_filepath, name, '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "frame_field_learning/train.py": {
        "torch": {
            "DistributedSampler_79": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_ds, rng_samples.sample(range(len(train_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "config['world_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['nr'] * config['gpus'] + gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "init_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_ds, rng_samples.sample(range(len(train_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(2 * config['optim_params']['batch_size'], config['samples'])",
                            "Call"
                        ],
                        [
                            "2 * config['optim_params']['batch_size']",
                            "BinOp"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_ds, num_replicas=config['world_size'], rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_ds, rng_samples.sample(range(len(train_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['optim_params']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_ds, num_replicas=config['world_size'], rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_130": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FrameFieldModel(config, backbone=backbone, train_transform=train_online_cuda_transform, eval_transform=eval_online_cuda_transform)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[gpu], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_140": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, eps=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.optim.RMSprop(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config['optim_params']['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_37": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_58": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_71": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_ds, rng_samples.sample(range(len(train_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rng_samples.sample(range(len(train_ds)), config['samples'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_83": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(val_ds, rng_samples.sample(range(len(val_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "config['world_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['nr'] * config['gpus'] + gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "val_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(val_ds, rng_samples.sample(range(len(val_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(2 * config['optim_params']['batch_size'], config['samples'])",
                            "Call"
                        ],
                        [
                            "2 * config['optim_params']['batch_size']",
                            "BinOp"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_ds, num_replicas=config['world_size'], rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(config['optim_params']['base_lr'] * config['optim_params']['batch_size'] * config['world_size'], config['optim_params']['max_lr'])",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Subset_73": {
                "variable": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(val_ds, rng_samples.sample(range(len(val_ds)), config['samples']))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rng_samples.sample(range(len(val_ds)), config['samples'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(config['optim_params']['base_lr'] * config['optim_params']['batch_size'] * config['world_size'], config['optim_params']['max_lr'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "frame_field_learning/trainer.py": {
        "torch": {
            "SummaryWriter_71": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_logs_dirpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logs_dirpath, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_72": {
                "variable": {
                    "value": "self.val_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_logs_dirpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logs_dirpath, 'val')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_390": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, filename_format.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, filename_format.format(to_delete_epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, 'checkpoint.best_val.epoch_{:06d}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_407": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': self.model.module.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'lr_scheduler_state_dict': self.lr_scheduler.state_dict(), 'loss_func_state_dict': self.loss_func.state_dict(), 'train_loss': train_loss, 'val_loss': val_loss, 'train_acc': train_acc, 'val_acc': val_acc}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepaths[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, filename_format.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, filename_format.format(to_delete_epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoints_dirpath, 'checkpoint.best_val.epoch_{:06d}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_442": {
                "variable": {
                    "value": "prev_best_val_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "prev_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_filepaths[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_146": {
                "variable": {
                    "value": "mean_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "measures.iou(y_pred.reshape(y_pred.shape[0], -1), y_true.reshape(y_true.shape[0], -1), threshold=iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/tta_utils.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "dist_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(array.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "dist_trans.reshape(shape)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dist_trans, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmin_27": {
                "variable": {
                    "value": "indices_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dice_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "measures.dice_loss(all_outputs['seg'][:, :, 0, :, :], final_seg[None, :, 0, :, :])",
                            "Call"
                        ],
                        [
                            "measures.dice_loss(shifted_seg[:, :, 0, :, :], mean_shifted_seg[None, :, 0, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_outputs['seg'].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "final_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_outputs['seg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_49": {
                "variable": {
                    "value": "(final_seg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_outputs['seg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_61": {
                "variable": {
                    "value": "(min_seg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_outputs['seg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "(max_seg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_outputs['seg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "variable": {
                    "value": "mean_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_seg_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_cleaned_seg.shape[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "all_cleaned_seg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_cleaned_seg.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "all_cleaned_seg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_100": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[range_x, range_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "grid_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "median_106": {
                "variable": {
                    "value": "(median_spatial_mean_xy, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spatial_mean_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grid_xy[None, None, None, :, :, :] * all_cleaned_seg[:, :, :, :, :, None], dim=(3, 4)) / torch.sum(all_cleaned_seg[:, :, :, :, :, None], dim=(3, 4))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "mean_shifted_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.geometry.translate(all_outputs['seg'].view(-1, *shape[-3:]), shift_xy).view(shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_126": {
                "variable": {
                    "value": "indices_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dice_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "measures.dice_loss(all_outputs['seg'][:, :, 0, :, :], final_seg[None, :, 0, :, :])",
                            "Call"
                        ],
                        [
                            "measures.dice_loss(shifted_seg[:, :, 0, :, :], mean_shifted_seg[None, :, 0, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_outputs['seg'].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_149": {
                "variable": {
                    "value": "all_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(replicates, *notrans_outputs[key].shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "notrans_outputs[key].dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "notrans_outputs[key].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rot90_161": {
                "variable": {
                    "value": "rotated_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xb['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rot90_164": {
                "variable": {
                    "value": "reversed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotated_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "-k",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rot90_176": {
                "variable": {
                    "value": "reversed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kornia.geometry.transform.vflip(flipped_rotated_outputs[key])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "-k",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "all_cleaned_seg[:, :, :, :, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/unet.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=0 if no_padding else 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.mpconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.down1.forward(x0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.down1.forward(x0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0 if no_padding else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0 if no_padding else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "frame_field_learning/unet_resnet.py": {
        "torch": {
            "pad_60": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x2, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout2d_150": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dec1(dec2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_2d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvRelu(in_channels, middle_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_37": {
                "in_channels": {
                    "value": "middle_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_43": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "middle_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "middle_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "middle_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_372": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/clean_coco.py": {
        "torch": {
            "tensor_60": {
                "data": {
                    "value": "seg_image[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((img['height'], img['width']), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.maximum(mask_image, dt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "data": {
                    "value": "img['id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/polygonize_coco.py": {
        "torch": {
            "cat_102": {
                "variable": {
                    "value": "tile_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_tile_data[key] for _tile_data in sample_data_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "image_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.30483739, 0.35143595, 0.3973895]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "image_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.16362707, 0.15187606, 0.14273278]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/polygonize_mask.py": {
        "torch": {
            "manual_seed_185": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128 < mask_image",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.5, 0.5, 0.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}