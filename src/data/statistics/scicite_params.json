{
    "scicite/dataset_readers/citation_data_reader_aclarc.py": {
        "torch": {}
    },
    "scicite/dataset_readers/citation_data_reader_scicite.py": {
        "torch": {}
    },
    "scicite/models/scaffold_bilstm_attention_classifier.py": {
        "torch": {
            "Parameter_287": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_dict['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_311": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "attn_distrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_313": {
                "variable": {
                    "value": "attn_distrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_315": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scored_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in * attn_distrib",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_2(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_3(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_2(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_3(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_2(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_3(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_2(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward_3(encoded_citation_text)",
                            "Call"
                        ],
                        [
                            "self.classifier_feedforward(encoded_citation_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scicite/training/multitask_trainer.py": {
        "torch": {
            "gather_438": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[output['loss'].unsqueeze(0) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "used_device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_1025": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1026": {
                "variable": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_916": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(model_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_927": {
                "obj": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'val_metric_per_epoch': val_metric_per_epoch, 'optimizer': self._optimizer.state_dict(), 'batch_num_total': self._batch_num_total}",
                            "Dict"
                        ],
                        [
                            "torch.load(training_state_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "training_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_570": {
                "variable": {
                    "value": "update_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_571": {
                "variable": {
                    "value": "param_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_645": {
                "input": {
                    "value": "torch.tensor(grad_data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_809": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_645": {
                "data": {
                    "value": "grad_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scicite/training/multitask_trainer_two_tasks.py": {
        "torch": {
            "gather_452": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[output['loss'].unsqueeze(0) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "used_device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_1052": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1053": {
                "variable": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_943": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(model_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_954": {
                "obj": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'val_metric_per_epoch': val_metric_per_epoch, 'optimizer': self._optimizer.state_dict(), 'batch_num_total': self._batch_num_total}",
                            "Dict"
                        ],
                        [
                            "torch.load(training_state_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "training_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_597": {
                "variable": {
                    "value": "update_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_598": {
                "variable": {
                    "value": "param_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_672": {
                "input": {
                    "value": "torch.tensor(grad_data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_836": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_672": {
                "data": {
                    "value": "grad_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scicite/training/train_multitask.py": {
        "torch": {
            "load_411": {
                "variable": {
                    "value": "best_model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scicite/training/train_multitask_two_tasks.py": {
        "torch": {
            "load_461": {
                "variable": {
                    "value": "best_model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}