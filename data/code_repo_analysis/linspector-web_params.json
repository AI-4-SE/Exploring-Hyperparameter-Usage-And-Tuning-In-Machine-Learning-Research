{
    "inspector/nn/embeddings/sentence_embedding.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sentence_emb + [word_embedding]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inspector/nn/linspector.py": {
        "torch": {
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.encode('tree', add_special_tokens=False)]",
                            "List"
                        ],
                        [
                            "[self.tokenizer.encode(line, add_special_tokens=False) for line in batch]",
                            "ListComp"
                        ],
                        [
                            "self.pad_sequences(inputs, max_length)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.encode('tree', add_special_tokens=False)]",
                            "List"
                        ],
                        [
                            "[self.tokenizer.encode(line, add_special_tokens=False) for line in batch]",
                            "ListComp"
                        ],
                        [
                            "self.pad_sequences(inputs, max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_508": {
                "variable": {
                    "value": "input_ids_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.encode('tree', add_special_tokens=False)]",
                            "List"
                        ],
                        [
                            "[self.tokenizer.encode(line, add_special_tokens=False) for line in batch]",
                            "ListComp"
                        ],
                        [
                            "self.pad_sequences(inputs, max_length)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "variable": {
                    "value": "input_ids_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.encode('tree', add_special_tokens=False)]",
                            "List"
                        ],
                        [
                            "[self.tokenizer.encode(line, add_special_tokens=False) for line in batch]",
                            "ListComp"
                        ],
                        [
                            "self.pad_sequences(inputs, max_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inspector/nn/models/contrastive_linear.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.word_embeddings.get_output_dim() * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_22": {
                "variable": {
                    "value": "first_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embeddings(first_token['tokens'])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(first_embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "second_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embeddings(second_token['tokens'])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(second_embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_embedding, second_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_30": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "inspector/nn/models/linspector_linear.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.word_embeddings.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embeddings(token['tokens'])",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(token['tokens'])",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(tokens['tokens'], token_index)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "inspector/nn/predictors/not_a_predictor.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}