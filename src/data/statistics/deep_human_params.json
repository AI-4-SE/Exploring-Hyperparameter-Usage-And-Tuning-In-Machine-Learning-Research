{
    "demo.py": {
        "tensorflow": {
            "group_106": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_109": {
                "variable": {
                    "value": "saver_pose_seg_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='seg_2d') + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='pose_3d') + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='cross_cascade_refinement') + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='rough_depth_estimation')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "saver_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='normal_estimation')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_118": {
                "variable": {
                    "value": "restore_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "params.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_126": {
                "variable": {
                    "value": "restore_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "params.normal_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "pred_joints1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[w1, h1, d1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "pred_joints0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[w0, h0, d0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "pred_joints_refined",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[w2, h2, d2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "seg_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_2d_rescale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(pose_seg_refined['seg_refined'], [256, 256])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(seg_2d_rescale, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_62": {
                "variable": {
                    "value": "seg_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seg_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(seg_2d_rescale, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(seg_pred)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(refined_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.not_equal(seg_pred, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 256, 256, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "normal_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.cast(mask_ext, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "depth_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(-9, 11, 1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 20, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "depth_logits_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "depth_basic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_dic['depth_basic']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_87": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_detail_depth",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rough_normal",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "joint_train_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "seg_2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "pose_3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "cross_cascade_refinement",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "rough_depth_estimation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "normal_estimation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "rough_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "depth_refinement",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_114": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "normal_estimation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_53": {
                "values": {
                    "value": "[x, seg_2d_rescale, pose_3d_rescale]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_73": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "input": {
                    "value": "depth_logits_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(depth_basic)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(-9, 11, 1, dtype=tf.float32), [1, 1, 20, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "depth_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_112": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "rough_depth_estimation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(seg_mask, [-1, 256, 256, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_111": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cross_cascade_refinement",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_109": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "seg_2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_110": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "pose_3d",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "function/integral_loss.py": {
        "tensorflow": {
            "reshape_9": {
                "variable": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_10": {
                "variable": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_12": {
                "variable": {
                    "value": "accu_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "variable": {
                    "value": "accu_h_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "accu_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(heatmaps, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(accu_h_p, accu_h_filter, stride=1, padding='SAME', name='accu_h')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "accu_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_16": {
                "variable": {
                    "value": "accu_w_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "accu_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(heatmaps, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(accu_w_p, accu_w_filter, stride=1, padding='SAME', name='accu_w')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "variable": {
                    "value": "accu_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "variable": {
                    "value": "accu_d_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "accu_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(heatmaps, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(accu_d_p, accu_d_filter, stride=1, padding='SAME', name='accu_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "accu_h_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, h_dim, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, h_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_22": {
                "variable": {
                    "value": "accu_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accu_h_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(accu_h, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "accu_h_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(0, h_dim, dtype=tf.float32), [1, h_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "accu_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "accu_w_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, w_dim, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_25": {
                "variable": {
                    "value": "accu_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accu_w_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(accu_w, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "accu_w_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(0, w_dim, dtype=tf.float32), [1, w_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "accu_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "accu_d_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, 19, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, d_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_28": {
                "variable": {
                    "value": "accu_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accu_d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(accu_d, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "accu_d_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(0, 19, dtype=tf.float32), [1, d_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "accu_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preds, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preds, [tf.shape(preds)[0], num_joints, depth * height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(preds)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preds, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preds, [tf.shape(preds)[0], num_joints, depth * height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(preds)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(preds)[0], num_joints, depth * height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preds, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preds, [tf.shape(preds)[0], num_joints, depth * height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_21": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_24": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_27": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps, [tf.shape(heatmaps)[0], num_joints, d_dim, h_dim, w_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(heatmaps, [0, 1, 3, 4, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preds, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preds, [tf.shape(preds)[0], num_joints, depth * height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "function/opt_depth.py": {
        "tensorflow": {
            "squeeze_19": {
                "variable": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_23": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xv_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_24": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yv_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_25": {
                "variable": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_30": {
                "variable": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_31": {
                "variable": {
                    "value": "point_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(xv - intrinsic_mat[0, :, :, 0, 2]) * source_depth / intrinsic_mat[0, :, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_x, source_mask)",
                            "Call"
                        ],
                        [
                            "(xv - intrinsic_mat[:, :, 0, 2]) * source_depth / intrinsic_mat[:, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_x, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_32": {
                "variable": {
                    "value": "point_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(yv - intrinsic_mat[0, :, :, 1, 2]) * source_depth / intrinsic_mat[0, :, :, 1, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_y, source_mask)",
                            "Call"
                        ],
                        [
                            "(yv - intrinsic_mat[:, :, 1, 2]) * source_depth / intrinsic_mat[:, :, 1, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_y, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_34": {
                "variable": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_35": {
                "variable": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_37": {
                "variable": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_x, point_y, source_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "variable": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_42": {
                "variable": {
                    "value": "target_intrinsic",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "intrinsic_mat[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "deformed_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_intrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(intrinsic_mat[1], source_mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "deformed_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(R_mat, source_points) + T_mat",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(target_intrinsic, deformed_points)",
                            "Call"
                        ],
                        [
                            "tf.matmul(R_mat, source_points) + T_mat",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(intrinsic_mat, deformed_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_49": {
                "variable": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y, vert_dfm_x, vert_dfm_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "vert_dfm_x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(vert_dfm_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "vert_dfm_x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(vert_dfm_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "vert_dfm_y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(vert_dfm_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "vert_dfm_y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(vert_dfm_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "idx00",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y0, vert_dfm_x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "idx01",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y0, vert_dfm_x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "idx10",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y1, vert_dfm_x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "idx11",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y1, vert_dfm_x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_64": {
                "variable": {
                    "value": "I00",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx00)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_65": {
                "variable": {
                    "value": "I01",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_66": {
                "variable": {
                    "value": "I10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_67": {
                "variable": {
                    "value": "I11",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "vert_target_mask_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "vert_target_mask_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_target_mask_y, vert_target_mask_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_73": {
                "variable": {
                    "value": "dfm_and_target_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.expand_dims(input_masks[1], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_74": {
                "variable": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "vert_ori_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(xv, source_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "vert_ori_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(yv, source_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_ori_y, vert_ori_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_81": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "source_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_img",
                            "Name"
                        ],
                        [
                            "source_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vert_dfm_x - tf.floor(vert_dfm_x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "ty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vert_dfm_y - tf.floor(vert_dfm_y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_91": {
                "variable": {
                    "value": "warpimg",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "Ixx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ],
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([256, 256, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([256, 256, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_93": {
                "variable": {
                    "value": "intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "I - Ixx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_95": {
                "variable": {
                    "value": "depth_consist_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(masked_target_depth - vert_dfm_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * tf.ones_like(masked_target_depth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_96": {
                "variable": {
                    "value": "final_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_consist_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(tf.abs(masked_target_depth - vert_dfm_z), 0.5 * tf.ones_like(masked_target_depth))",
                            "Call"
                        ],
                        [
                            "tf.less(tf.abs(masked_target_depth - vert_dfm_z), 0.5 * tf.ones_like(masked_target_depth))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.squeeze(dfm_and_target_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_97": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "final_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(depth_consist_mask, tf.squeeze(dfm_and_target_mask, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(depth_consist_mask, tf.squeeze(dfm_and_target_mask, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_99": {
                "variable": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(I - Ixx)",
                            "Call"
                        ],
                        [
                            "tf.abs(I - Ixx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "masked_Ixx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather_nd(Ixx, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_103": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "threshold_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "threshold_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_111": {
                "variable": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_intensity_diff < threshold_1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_112": {
                "variable": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_intensity_diff > threshold_2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "out_debug_dic[idx_dst]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y, vert_dfm_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_129": {
                "variable": {
                    "value": "out_debug_dic[image_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(source_img)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(source_img)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_150": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xv_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_151": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yv_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_152": {
                "variable": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_157": {
                "variable": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(source_depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(source_depth, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_158": {
                "variable": {
                    "value": "point_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(xv - intrinsic_mat[0, :, :, 0, 2]) * source_depth / intrinsic_mat[0, :, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_x, source_mask)",
                            "Call"
                        ],
                        [
                            "(xv - intrinsic_mat[:, :, 0, 2]) * source_depth / intrinsic_mat[:, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_x, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_159": {
                "variable": {
                    "value": "point_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(yv - intrinsic_mat[0, :, :, 1, 2]) * source_depth / intrinsic_mat[0, :, :, 1, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_y, source_mask)",
                            "Call"
                        ],
                        [
                            "(yv - intrinsic_mat[:, :, 1, 2]) * source_depth / intrinsic_mat[:, :, 1, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(point_y, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_161": {
                "variable": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_162": {
                "variable": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "T_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(T_mat, -1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(T_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_x, point_y, source_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "variable": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_169": {
                "variable": {
                    "value": "intrinsic_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "intrinsic_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(intrinsic_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "deformed_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsic_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(intrinsic_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "deformed_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(R_mat, source_points) + T_mat",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(target_intrinsic, deformed_points)",
                            "Call"
                        ],
                        [
                            "tf.matmul(R_mat, source_points) + T_mat",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(intrinsic_mat, deformed_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_176": {
                "variable": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y, vert_dfm_x, vert_dfm_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "vert_dfm_x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(vert_dfm_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "vert_dfm_x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(vert_dfm_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "vert_dfm_y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(vert_dfm_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "vert_dfm_y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(vert_dfm_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "idx00",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y0, vert_dfm_x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "idx01",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y0, vert_dfm_x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "idx10",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y1, vert_dfm_x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "idx11",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y1, vert_dfm_x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_191": {
                "variable": {
                    "value": "I00",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx00)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_192": {
                "variable": {
                    "value": "I01",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_193": {
                "variable": {
                    "value": "I10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_194": {
                "variable": {
                    "value": "I11",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(target_img, idx11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_196": {
                "variable": {
                    "value": "vert_target_mask_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_197": {
                "variable": {
                    "value": "vert_target_mask_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_target_mask_y, vert_target_mask_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_200": {
                "variable": {
                    "value": "dfm_and_target_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.expand_dims(input_masks[1], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_201": {
                "variable": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dfm_mask_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y, vert_dfm_x, vert_dfm_z], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_target_mask_y, vert_target_mask_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_202": {
                "variable": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_204": {
                "variable": {
                    "value": "vert_ori_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(xv, source_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "variable": {
                    "value": "vert_ori_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(yv, source_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_ori_y, vert_ori_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_208": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "source_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_img",
                            "Name"
                        ],
                        [
                            "source_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vert_dfm_x - tf.floor(vert_dfm_x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "variable": {
                    "value": "ty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vert_dfm_y - tf.floor(vert_dfm_y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_216": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_ori_y, vert_ori_x], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_217": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_218": {
                "variable": {
                    "value": "warpimg",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "Ixx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ],
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([256, 256, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([256, 256, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_220": {
                "variable": {
                    "value": "intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "I - Ixx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_222": {
                "variable": {
                    "value": "depth_consist_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(masked_target_depth - vert_dfm_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * tf.ones_like(masked_target_depth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_223": {
                "variable": {
                    "value": "final_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_consist_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(tf.abs(masked_target_depth - vert_dfm_z), 0.5 * tf.ones_like(masked_target_depth))",
                            "Call"
                        ],
                        [
                            "tf.less(tf.abs(masked_target_depth - vert_dfm_z), 0.5 * tf.ones_like(masked_target_depth))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.squeeze(dfm_and_target_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_224": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "final_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(depth_consist_mask, tf.squeeze(dfm_and_target_mask, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(depth_consist_mask, tf.squeeze(dfm_and_target_mask, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_226": {
                "variable": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(I - Ixx)",
                            "Call"
                        ],
                        [
                            "tf.abs(I - Ixx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_227": {
                "variable": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_229": {
                "variable": {
                    "value": "masked_Ixx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather_nd(Ixx, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_intensity_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(intensity_diff, indices)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(masked_intensity_diff, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_232": {
                "variable": {
                    "value": "threshold_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_233": {
                "variable": {
                    "value": "threshold_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_238": {
                "variable": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_intensity_diff < threshold_1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_239": {
                "variable": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_intensity_diff > threshold_2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(masked_intensity_diff, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_intensity_diff_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "masked_intensity_diff",
                            "Name"
                        ],
                        [
                            "tf.where(masked_intensity_diff < threshold_1, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ],
                        [
                            "tf.where(masked_intensity_diff > threshold_2, masked_intensity_diff_out, zeros_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_250": {
                "variable": {
                    "value": "out_debug_dic[idx_dst]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[vert_dfm_y, vert_dfm_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_256": {
                "variable": {
                    "value": "out_debug_dic[image_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(source_img)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(source_img)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_283": {
                "variable": {
                    "value": "weights_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_gradients_x), 3, keep_dims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_284": {
                "variable": {
                    "value": "weights_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_gradients_y), 3, keep_dims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "source_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_img",
                            "Name"
                        ],
                        [
                            "source_img",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "a": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_53": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_54": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_56": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_57": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_nd_64": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx00",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x0], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_65": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx01",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x1], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_66": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx10",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x0], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_67": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx11",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x1], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_73": {
                "input": {
                    "value": "input_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_77": {
                "tensor": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_78": {
                "tensor": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_95": {
                "x": {
                    "value": "masked_target_depth - vert_dfm_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "input": {
                    "value": "dfm_and_target_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(tf.expand_dims(input_masks[1], axis=-1), dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(tf.expand_dims(input_masks[1], axis=-1), dfm_mask_coord)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_102": {
                "params": {
                    "value": "Ixx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ],
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_145": {
                "input": {
                    "value": "source_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_img",
                            "Name"
                        ],
                        [
                            "source_img",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "a": {
                    "value": "R_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(R_mat, source_mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([point_x, point_y, source_depth], -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_points, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_180": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_181": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_183": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_184": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_nd_191": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx00",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x0], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_192": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx01",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x1], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y0, vert_dfm_x1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_193": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx10",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x0], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_194": {
                "params": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img",
                            "Name"
                        ],
                        [
                            "target_img",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx11",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x1], -1)",
                            "Call"
                        ],
                        [
                            "tf.stack([vert_dfm_y1, vert_dfm_x1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_200": {
                "input": {
                    "value": "input_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_204": {
                "tensor": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_205": {
                "tensor": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "source_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_masks[0]",
                            "Subscript"
                        ],
                        [
                            "input_masks[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_222": {
                "x": {
                    "value": "masked_target_depth - vert_dfm_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_223": {
                "input": {
                    "value": "dfm_and_target_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(tf.expand_dims(input_masks[1], axis=-1), dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(tf.expand_dims(input_masks[1], axis=-1), dfm_mask_coord)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_229": {
                "params": {
                    "value": "Ixx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ],
                        [
                            "(1.0 - ty) * I0x + ty * I1x",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_ori, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(final_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_286": {
                "x": {
                    "value": "mask[:, :, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_287": {
                "x": {
                    "value": "mask[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "input_tensor": {
                    "value": "tf.abs(smoothness_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_83": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_84": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_95": {
                "input": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_210": {
                "x": {
                    "value": "vert_dfm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 0, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_211": {
                "x": {
                    "value": "vert_dfm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ],
                        [
                            "deformed_points[:, 1, 0] / deformed_points[:, 2, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_222": {
                "input": {
                    "value": "masked_target_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(target_depth, dfm_mask_coord)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_target_depth, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_283": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_289": {
                "x": {
                    "value": "smoothness_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disp_gradients_y * weights_y * tf.to_float(mask[:, :-1, :, :])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_283": {
                "x": {
                    "value": "image_gradients_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gradient_x(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_284": {
                "x": {
                    "value": "image_gradients_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gradient_y(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/Refine_model.py": {
        "tensorflow": {
            "placeholder_130": {
                "variable": {
                    "value": "self.isTraining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "isTrainingflag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_139": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.96",
                            "Constant"
                        ]
                    ]
                }
            },
            "truncated_normal_23": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_23": {
                "x": {
                    "value": "2 / float(shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_52": {
                "variable": {
                    "value": "refined_seg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[seg_feature_conv, seg_output_conv, joints_output_conv, joints_feature_conv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_size, self.linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_149": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w1', initializer=kaiming, shape=[self.input_size, self.linear_size], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_151": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, w1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y3, training=self.isTraining, name='batch_normalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y3, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "self.two_linear(y3, self.linear_size, True, self.dropout_keep_prob, True, True, self.dtype, idx)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.isTraining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_normalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, w1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y3, training=self.isTraining, name='batch_normalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y3, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "self.two_linear(y3, self.linear_size, True, self.dropout_keep_prob, True, True, self.dtype, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_153": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, w1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y3, training=self.isTraining, name='batch_normalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y3, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "self.two_linear(y3, self.linear_size, True, self.dropout_keep_prob, True, True, self.dtype, idx)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.linear_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "b4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_162": {
                "variable": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w4', initializer=kaiming, shape=[self.linear_size, 2], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w4, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w2_' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b2_' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_196": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_197": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w3_' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[linear_size, linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b3_' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kaiming",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[linear_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_208": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_209": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cross_cascade'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_77": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cross_cascade'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "linear_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_164": {
                "input": {
                    "value": "tf.expand_dims(y, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "'two_linear_' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_194": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "training": {
                    "value": "self.isTraining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'batch_normalization1' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_206": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "training": {
                    "value": "self.isTraining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'batch_normalization2' + str(idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w1', initializer=kaiming, shape=[self.input_size, self.linear_size], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_163": {
                "a": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, w1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y3, training=self.isTraining, name='batch_normalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y3, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "self.two_linear(y3, self.linear_size, True, self.dropout_keep_prob, True, True, self.dtype, idx)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w4', initializer=kaiming, shape=[self.linear_size, 2], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w4, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_191": {
                "t": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w2_' + str(idx), initializer=kaiming, shape=[input_size, linear_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w2, 1) if max_norm else w2",
                            "IfExp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "a": {
                    "value": "xin",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w2_' + str(idx), initializer=kaiming, shape=[input_size, linear_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w2, 1) if max_norm else w2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "clip_by_norm_202": {
                "t": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w3_' + str(idx), initializer=kaiming, shape=[linear_size, linear_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w3, 1) if max_norm else w3",
                            "IfExp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(y3, w4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(xin, w2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization1' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, w3) + b3",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.isTraining, name='batch_normalization2' + str(idx))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "xin + y if residual else y",
                            "IfExp"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w3_' + str(idx), initializer=kaiming, shape=[linear_size, linear_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(w3, 1) if max_norm else w3",
                            "IfExp"
                        ]
                    ]
                }
            },
            "constant_initializer_75": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "network/depth_optimization.py": {
        "tensorflow": {
            "convert_to_tensor_52": {
                "variable": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(xv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(xv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(yv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(yv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_64": {
                "variable": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(xv, multiply)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_66": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(yv, multiply)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_68": {
                "variable": {
                    "value": "pointcloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xv, yv, depth_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, im_h, im_h, window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, uv_indices_bucket]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_89": {
                "variable": {
                    "value": "neighbor_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "neighbor_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_neighbor_index_generator(im_h, im_w, beta, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_90": {
                "variable": {
                    "value": "neighbor_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neighbor_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_neighbor_index_generator(im_h, im_w, beta, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_93": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(normal_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(normal_map_temp, (1, 1, 1, window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_98": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "depth_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pointcloud_map_temp[:, :, :, :, 2] - neighbor_points[:, :, :, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "depth_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(pointcloud_map_temp[:, :, :, :, 2] - neighbor_points[:, :, :, :, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(depth_diff, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_102": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(delta, name='max_normal_diff')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "max_normal_diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(gamma, name='max_depth_diff')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "max_depth_diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tile_53": {
                "input": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.constant([batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_53": {
                "value": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "neighbor_points * neighbor_normal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "neighbor_normal[:, :, :, :, 0:2] * pointcloud_map_temp[:, :, :, :, 0:2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "input_tensor": {
                    "value": "neighbor_points * normal_map_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "normal_map_temp[:, :, :, :, 0:2] * pointcloud_map_temp[:, :, :, :, 0:2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "input": {
                    "value": "neighbor_normal[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "normal_map_temp[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "network/hourglass_multioutput.py": {
        "tensorflow": {
            "get_variable_67": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_89": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_138": {
                "variable": {
                    "value": "low_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_145": {
                "variable": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(low_3)[1:3] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cnv1, 128, name='r1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "output[out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.nStack",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "output[feature]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.nStack",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_70": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.conv2d(inputs, numOut, 1, 1, 'SAME', name='skipLayer_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_130": {
                "x": {
                    "value": "convb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convBlock(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skipLayer(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "residual_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_146": {
                "x": {
                    "value": "up_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(inputs, numOut, name='up1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(low_3, tf.shape(low_3)[1:3] * 2, name='upsampling')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hourglass_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "stacks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_68": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'hourglass_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/model.py": {
        "tensorflow": {
            "get_variable_64": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_135": {
                "variable": {
                    "value": "low_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_142": {
                "variable": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(low_3)[1:3] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cnv1, 128, name='r1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_67": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.conv2d(inputs, numOut, 1, 1, 'SAME', name='skipLayer_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_127": {
                "x": {
                    "value": "convb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convBlock(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skipLayer(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "residual_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_143": {
                "x": {
                    "value": "up_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(inputs, numOut, name='up1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(low_3, tf.shape(low_3)[1:3] * 2, name='upsampling')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hourglass_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "stacks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_54": {
                "values": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.nStack",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'hourglass_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/model_kel.py": {
        "tensorflow": {
            "get_variable_64": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_135": {
                "variable": {
                    "value": "low_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_142": {
                "variable": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(low_3)[1:3] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cnv1, 128, name='r1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_67": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.conv2d(inputs, numOut, 1, 1, 'SAME', name='skipLayer_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_127": {
                "x": {
                    "value": "convb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convBlock(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skipLayer(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "residual_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'stacked_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'hourglass'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_143": {
                "x": {
                    "value": "up_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(inputs, numOut, name='up1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "up_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(low_3, tf.shape(low_3)[1:3] * 2, name='upsampling')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hourglass_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "stacks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_54": {
                "values": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.nStack",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'hourglass_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "low_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(low_2, numOut, name='low3')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/modified_hgmodel.py": {
        "tensorflow": {
            "conv2d_57": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_59": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_66": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_70": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(upsample_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(upsample_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(upsample_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(upsample_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_85": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_86": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.conv2d(inputs, numOut, 1, 1, 'SAME', name='skipLayer_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_144": {
                "x": {
                    "value": "convb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convBlock(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skipLayer(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "residual_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'single_hourglass'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "basic_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "depth_offset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_181": {
                "x": {
                    "value": "detail_deconv_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(down_5_3, numOut, kernel_size=2, strides=2, pad='SAME', name='detail_deconv_4')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "detail_skip_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cov_4, numOut, name='detail_skip_4')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_184": {
                "x": {
                    "value": "detail_deconv_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(detail_up_4, numOut, kernel_size=2, strides=2, pad='SAME', name='detail_deconv_3')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "detail_skip_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cov_3, numOut, name='detail_skip_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_187": {
                "x": {
                    "value": "detail_deconv_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(detail_up_3, numOut, kernel_size=2, strides=2, pad='SAME', name='detail_deconv_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "detail_skip_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cov_2, numOut, name='detail_skip_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_190": {
                "x": {
                    "value": "detail_deconv_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(detail_up_2, numOut, kernel_size=2, strides=2, pad='SAME', name='detail_deconv_1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "detail_skip_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(cov_1, numOut, name='detail_skip_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_193": {
                "x": {
                    "value": "detail_deconv_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(detail_up_1, numOut, kernel_size=2, strides=2, pad='SAME', name='detail_deconv_input')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(inputs, numOut, name='input_skip')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/util_kernel_regression.py": {
        "tensorflow": {
            "convert_to_tensor_36": {
                "variable": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_47": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(xv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(xv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_48": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(yv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(yv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(xv, (batch_size, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_50": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(yv, (batch_size, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depth_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "pointcloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xv, yv, depth_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, im_h, im_h, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, uv_indices_bucket]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_65": {
                "variable": {
                    "value": "neighbor_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, uv_indices_bucket], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_66": {
                "variable": {
                    "value": "neighbor_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, uv_indices_bucket], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(normal_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(normal_map_temp, (1, 1, 1, window_size * window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(delta, name='max_grad')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "max_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "normal_similarity.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_74": {
                "variable": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "normal_similarity > delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32, shape=normal_similarity.get_shape().as_list())",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_77": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size * window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "z_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(z_ji, axis=-2) / tf.reduce_sum(normal_similarity, axis=-2)",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(z_i, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_37": {
                "input": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(batch_size, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "neighbor_points * normal_map_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "normal_map_temp[:, :, :, :, 0:2] * pointcloud_map_temp[:, :, :, :, 0:2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "normal_map_temp[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "normal/hg_trainer.py": {
        "tensorflow": {
            "group_91": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_98": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_99": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "w_cos_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "w_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_58": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 256, 256, 3], name='y_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "cross_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(output[0], y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 256, 256, 3], name='y_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "cross_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(output[1], y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "norm_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hgModel.generate(x)['out']",
                            "Subscript"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "norm_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(output[1], y)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_64": {
                "variable": {
                    "value": "cross_1_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cross_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(output_1, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_65": {
                "variable": {
                    "value": "cross_2_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cross_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(output_2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_66": {
                "variable": {
                    "value": "norm_1_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(output, ord=2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_67": {
                "variable": {
                    "value": "norm_2_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(output_2, ord=2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "loss_1_cos_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.acos(cross_1_masked / (norm_1_masked + 1e-05)) / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "loss_2_cos_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.acos(cross_2_masked / (norm_2_masked + 1e-05)) / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "variable": {
                    "value": "loss_1_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(norm_1_masked - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "loss_2_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(norm_2_masked - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_81": {
                "variable": {
                    "value": "rmsprop",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_87": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w_cos_sim * (loss_1_cos_sim + loss_2_cos_sim) + w_norm * (loss_1_reg + loss_2_reg)",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_102": {
                "variable": {
                    "value": "restore_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.modeldir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "rmsprop_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "minimize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_228": {
                "variable": {
                    "value": "summary_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "params.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_70": {
                "x": {
                    "value": "norm_1_masked - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "x": {
                    "value": "norm_2_masked - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_68": {
                "x": {
                    "value": "cross_1_masked / (norm_1_masked + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_69": {
                "x": {
                    "value": "cross_2_masked / (norm_2_masked + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "normal/normal_Unet.py": {
        "tensorflow": {
            "norm_41": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_48": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_56": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(upsample_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(upsample_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "upsample_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(inputs, filters, kernel_size, strides, pad, use_bias=False, activation=None, kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(upsample_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(upsample_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[kernel_size, kernel_size, inputs.get_shape().as_list()[3], filters], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_72": {
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, [1, strides, strides, 1], padding=pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.conv2d(inputs, numOut, 1, 1, 'SAME', name='skipLayer_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filters, initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_128": {
                "x": {
                    "value": "convb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convBlock(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "skip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skipLayer(inputs, numOut)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "residual_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'normal_Unet'",
                            "MethodArgument"
                        ],
                        [
                            "'down_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'up_conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lin'",
                            "MethodArgument"
                        ],
                        [
                            "'convBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'skipLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'tpnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_163": {
                "x": {
                    "value": "normal_up_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(normal_decov_1, 256, kernel_size=2, strides=2, pad='SAME', name='normal_up_1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_skip_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(normal_cov_5, 256, name='normal_skip_5')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_166": {
                "x": {
                    "value": "normal_up_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(normal_decov_2, 128, kernel_size=2, strides=2, pad='SAME', name='normal_up_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_skip_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(normal_cov_4, 128, name='normal_skip_4')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_169": {
                "x": {
                    "value": "normal_up_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(normal_decov_3, 128, kernel_size=2, strides=2, pad='SAME', name='normal_up_3')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_skip_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(normal_cov_3, 128, name='normal_skip_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_172": {
                "x": {
                    "value": "normal_up_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(normal_decov_4, 64, kernel_size=2, strides=2, pad='SAME', name='normal_up_4')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_skip_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(normal_cov_2, 64, name='normal_skip_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_175": {
                "x": {
                    "value": "normal_up_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up_con2d(normal_decov_5, 64, kernel_size=2, strides=2, pad='SAME', name='normal_up_5')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_skip_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.residual(inputs, 64, name='normal_skip_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_70": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "normal/normal_util.py": {
        "tensorflow": {
            "expand_dims_114": {
                "variable": {
                    "value": "depth_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_115": {
                "variable": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "depth_ext",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depth, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h // 8, w // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_116": {
                "variable": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(depth_ext, [h // 8, w // 8])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(smoothed, [h, w])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(smoothed, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(depth_ext, [h // 8, w // 8])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(smoothed, [h, w])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(smoothed, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "normal/test_rebuild.py": {
        "tensorflow": {
            "group_71": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_74": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_79": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_80": {
                "variable": {
                    "value": "restore_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "params.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "w_cos_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "w_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "variable": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.cast(mask_ext, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_45": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "normal/trainer.py": {
        "tensorflow": {
            "group_96": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_105": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_106": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.cast(mask_ext, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_68": {
                "variable": {
                    "value": "elem_multi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_dic['normal_out']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 256, 256, 3], name='y_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "cross_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elem_multi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(output, y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_72": {
                "variable": {
                    "value": "norm_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_dic['normal_out']",
                            "Subscript"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_74": {
                "variable": {
                    "value": "cross_1_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cross_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(elem_multi, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_76": {
                "variable": {
                    "value": "norm_1_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(output, ord=2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, [None, 256, 256], name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.acos(cross_1_masked / (norm_1_masked + 1e-05)) / np.pi * 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_86": {
                "variable": {
                    "value": "rmsprop",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.acos(cross_1_masked / (norm_1_masked + 1e-05)) / np.pi * 180)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_109": {
                "variable": {
                    "value": "restore_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.modeldir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_48": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "normal_estimation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "rmsprop_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "minimize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_230": {
                "variable": {
                    "value": "summary_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "params.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_93": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_57": {
                "x": {
                    "value": "mask_ext",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask_batch, -1)",
                            "Call"
                        ],
                        [
                            "np.repeat(mask_ext, 3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "acos_78": {
                "x": {
                    "value": "cross_1_masked / (norm_1_masked + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util_kernel_regression.py": {
        "tensorflow": {
            "convert_to_tensor_36": {
                "variable": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_47": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(xv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(xv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_48": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yv_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(yv_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(yv_np, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_50": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(xv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(xv, multiply)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_51": {
                "variable": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(yv_np, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(yv, multiply)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiply",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_53": {
                "variable": {
                    "value": "pointcloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xv, yv, depth_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_63": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, im_h, im_h, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, uv_indices_bucket]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_66": {
                "variable": {
                    "value": "neighbor_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, uv_indices_bucket], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_67": {
                "variable": {
                    "value": "neighbor_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, uv_indices_bucket], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_69": {
                "variable": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(normal_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(normal_map_temp, (1, 1, 1, window_size * window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(delta, name='max_grad')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "max_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_75": {
                "variable": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "normal_similarity > delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(normal_similarity)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_77": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_to_pointcloud(depth_map, im_h, im_w, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_78": {
                "variable": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointcloud_map_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointcloud_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(pointcloud_map_temp, (1, 1, 1, window_size * window_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, 1, window_size * window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_37": {
                "input": {
                    "value": "uv_index_bucket",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([u_index_bucket, v_index_bucket], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(uv_index_bucket, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.constant([batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "neighbor_points * normal_map_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "normal_map_temp[:, :, :, :, 0:2] * pointcloud_map_temp[:, :, :, :, 0:2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "input": {
                    "value": "normal_map_temp[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "normal_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normal_map_temp * neighbor_normal",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(normal_similarity, axis=4, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.where(normal_similarity > delta, normal_similarity, zero_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "network/datagen_multithread.py": {
        "torch": {}
    },
    "network/datagen_single_thread.py": {
        "torch": {}
    },
    "network/detail_hooker.py": {
        "torch": {}
    },
    "network/old_datagen.py": {
        "torch": {}
    },
    "network/processing_detail_data.py": {
        "torch": {}
    },
    "normal/produce_normal_file.py": {
        "torch": {}
    }
}