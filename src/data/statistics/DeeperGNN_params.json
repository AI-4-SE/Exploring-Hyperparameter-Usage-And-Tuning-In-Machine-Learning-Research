{
    "DeeperGNN/dagnn.py": {
        "torch": {
            "ones_35": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "pps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(pps)",
                            "Call"
                        ],
                        [
                            "retain_score.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(retain_score)",
                            "Call"
                        ],
                        [
                            "retain_score.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(pps)",
                            "Call"
                        ],
                        [
                            "retain_score.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(retain_score)",
                            "Call"
                        ],
                        [
                            "retain_score.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dataset.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dataset.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.prop(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.prop(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_104": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.prop(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeeperGNN/main_ogbnarxiv.py": {
        "torch": {
            "device_162": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "nll_loss_191": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)[train_idx]",
                            "Subscript"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "torch.matmul(retain_score, pps).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y.squeeze(1)[train_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "pps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(pps)",
                            "Call"
                        ],
                        [
                            "retain_score.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(retain_score)",
                            "Call"
                        ],
                        [
                            "retain_score.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "retain_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(pps)",
                            "Call"
                        ],
                        [
                            "retain_score.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(retain_score)",
                            "Call"
                        ],
                        [
                            "retain_score.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_117": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.lin1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.prop(x, edge_index, norm)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "best_result",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "best_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.prop(x, edge_index, norm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "self.results[run]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "self.results",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DeeperGNN/train_eval.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "train_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:20] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "rest_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[20:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "train_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:20] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "val_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[20:50] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "rest_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[50:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_159": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_174": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_44": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_74": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "durations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_loss_history[-(early_stopping + 1):-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "synchronize_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_33": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_38": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_62": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_67": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}