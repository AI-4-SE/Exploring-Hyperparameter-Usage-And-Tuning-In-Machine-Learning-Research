{
    "src/concat.py": {
        "tensorflow": {},
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "402",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "valid_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_embedding_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(242)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "span_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "span_embedding_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert(input_ids, token_type_ids, attention_mask, head_mask=None)[0]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(valid_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat(concat_id_list, self.label_embedding, self.span_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_560": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_561": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_564": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_579": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_649": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ner.from_pretrained(args.bert_model, from_tf=False, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "Ner.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_652": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ner.from_pretrained(args.bert_model, from_tf=False, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "Ner.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_672": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_681": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_687": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_input_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "variable": {
                    "value": "all_input_dev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "all_segment_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "all_label_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_711": {
                "variable": {
                    "value": "all_valid_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_712": {
                "variable": {
                    "value": "all_lmask_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_716": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_dev_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_719": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_720": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_916": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_917": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_918": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_919": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_920": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_921": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_924": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_927": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_928": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1024": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1025": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1026": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1027": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1028": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1029": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_1032": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_1035": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1036": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "zero_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "576",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_vector, zero_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_167": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_563": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_684": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_686": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_961": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(label_logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1069": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(label_logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "id_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "id_list in enumerate(concat_id_list)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "242",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_804": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "zero_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_vector, zero_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "matrix[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(B_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "matrix[:, j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(I_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__751": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_956": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_961": {
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1064": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_1069": {
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_emb[0], label_emb[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "zero_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_vector, zero_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "matrix[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(B_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "matrix[:, j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(I_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_136": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "len(subword_lis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subword_lis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(subword_lis)",
                            "Call"
                        ],
                        [
                            "torch.transpose(tensor_cat, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor_cat.view(1, 768, len(subword_lis))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_800": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_804": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(F.log_softmax(label_logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "torch.argmax(F.log_softmax(logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(F.log_softmax(label_logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.matmul(sequence_output, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_emb[1], label_emb[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "label_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_vector, label_emb[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "matrix[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(B_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "matrix[:, j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(I_vector, label_vector)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/sum.py": {
        "tensorflow": {},
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "onehot_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "242",
                            "int"
                        ],
                        [
                            "242",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "all_label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "242",
                            "int"
                        ],
                        [
                            "242",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "type_label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "type_label_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_114": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "valid_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_embedding_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(242)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "span_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "span_embedding_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "W_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.onehot_vector",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(label_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "W_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(S, V)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_label, 0, 1)",
                            "Call"
                        ],
                        [
                            "extract_bottom_embedding(W_label, 768, 202)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert(input_ids, token_type_ids, attention_mask, head_mask=None)[0]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(valid_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "broadcast(W_label, W_span, 768, 402)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_571": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_572": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_575": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_590": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_660": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ner.from_pretrained(args.bert_model, from_tf=False, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "Ner.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_663": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ner.from_pretrained(args.bert_model, from_tf=False, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "Ner.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_683": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_684": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_685": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_686": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_687": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_688": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_692": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_698": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_718": {
                "variable": {
                    "value": "all_input_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_719": {
                "variable": {
                    "value": "all_input_dev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_720": {
                "variable": {
                    "value": "all_segment_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_721": {
                "variable": {
                    "value": "all_label_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_722": {
                "variable": {
                    "value": "all_valid_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_723": {
                "variable": {
                    "value": "all_lmask_dev_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_727": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_dev_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_730": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_731": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_927": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_928": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_929": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_930": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_931": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_932": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_935": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_938": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_939": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1035": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1036": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1037": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1038": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1039": {
                "variable": {
                    "value": "all_valid_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.valid_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1040": {
                "variable": {
                    "value": "all_lmask_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_1043": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_1046": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1047": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_dev_ids, all_input_dev_mask, all_segment_dev_ids, all_label_dev_ids, all_valid_dev_ids, all_lmask_dev_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_178": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_574": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_695": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_697": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids, all_valid_ids, all_lmask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_972": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(label_logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1080": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(label_logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "onehot_vector[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "onehot_vector[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "242",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_815": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__762": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_967": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_972": {
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1075": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_1080": {
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_140": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "len(subword_lis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subword_lis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(subword_lis)",
                            "Call"
                        ],
                        [
                            "torch.transpose(tensor_cat, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor_cat.view(1, 768, len(subword_lis))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_811": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_815": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(F.log_softmax(label_logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, valid_ids=valid_ids, attention_mask_label=l_mask, label_embedding_id=label_embedding_id, span_embedding_id=span_embedding_id)",
                            "Call"
                        ],
                        [
                            "torch.argmax(F.log_softmax(logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(F.log_softmax(label_logits, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.matmul(sequence_output, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}