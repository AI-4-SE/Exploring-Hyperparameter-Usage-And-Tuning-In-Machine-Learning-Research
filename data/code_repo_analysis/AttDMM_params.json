{
    "main.py": {
        "sklearn": {
            "roc_auc_score_724": {
                "variable": {
                    "value": "roc_auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(all_y_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.array(all_mortality_probs_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_792": {
                "variable": {
                    "value": "roc_auc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(all_y_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.array(all_mortality_probs_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_966": {
                "variable": {
                    "value": "roc_auc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(all_y_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.array(all_mortality_probs_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_889": {
                "variable": {
                    "value": "roc_auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(all_y_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.array(all_mortality_probs_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_1188": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "do_evaluation_rocauc(mini_batch_size=args.mini_batch_size, num_samples=20, verbose=True)",
                            "Call"
                        ],
                        [
                            "do_evaluation_rocauc_custom_time(mini_batch_size=args.mini_batch_size, num_samples=20, cropped_t_from_last=cropped_t, do_eval_for_val=False, verbose=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(y_prob_np))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ModuleList_72": {
                "variable": {
                    "value": "self.iafs_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.iafs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.z_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.z_q_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, rnn_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "all_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hidden_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "variable": {
                    "value": "all_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_1198": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RNN_62": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim + use_feature_mask * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "nonlinearity": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 if rnn_num_layers == 1 else rnn_dropout_rate",
                            "IfExp"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_66": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim + use_feature_mask * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 if rnn_num_layers == 1 else rnn_dropout_rate",
                            "IfExp"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_446": {
                "variable": {
                    "value": "y_val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(data_folder, 'y_mor_val.npy'))",
                            "Call"
                        ],
                        [
                            "y_val.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_447": {
                "variable": {
                    "value": "y_test_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(data_folder, 'y_mor_test.npy'))",
                            "Call"
                        ],
                        [
                            "y_test.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_536": {
                "obj": {
                    "value": "attdmm.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.experiments_main_folder, args.experiment_folder, args.save_model)",
                            "Call"
                        ],
                        [
                            "save_model + '_best'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_548": {
                "f": {
                    "value": "load_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.experiments_main_folder, args.experiment_folder, args.load_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_1162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_688": {
                "variable": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_vals).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_vals).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_688": {
                "variable": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_754": {
                "variable": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_tests).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_tests).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_754": {
                "variable": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_928": {
                "variable": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_tests).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_tests).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_928": {
                "variable": {
                    "value": "all_z_tests",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1041": {
                "start": {
                    "value": "n_eval_samples * val_data_sequences.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1044": {
                "start": {
                    "value": "n_eval_samples * test_data_sequences.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_853": {
                "variable": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_vals).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_z_vals).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_853": {
                "variable": {
                    "value": "all_z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_211": {
                "*size": {
                    "value": "len(mini_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "(mini_batch.shape[0], mini_batch.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_179": {
                "*size": {
                    "value": "len(mini_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "zeros_like_228": {
                "variable": {
                    "value": "reversed_mini_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "mini_batch.cuda()",
                            "Call"
                        ],
                        [
                            "mini_batch",
                            "Method Argument"
                        ],
                        [
                            "mini_batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch.shape[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_282": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_lengths[keep_index]",
                            "Subscript"
                        ],
                        [
                            "seq_lengths[mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_lengths).type('torch.LongTensor')",
                            "Call"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_285": {
                "variable": {
                    "value": "(_, sorted_seq_length_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_lengths[keep_index]",
                            "Subscript"
                        ],
                        [
                            "seq_lengths[mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_lengths).type('torch.LongTensor')",
                            "Call"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_291": {
                "variable": {
                    "value": "T_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_lengths[keep_index]",
                            "Subscript"
                        ],
                        [
                            "seq_lengths[mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_lengths).type('torch.LongTensor')",
                            "Call"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ],
                        [
                            "seq_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_294": {
                "variable": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "mini_batch.cuda()",
                            "Call"
                        ],
                        [
                            "mini_batch",
                            "Method Argument"
                        ],
                        [
                            "mini_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_297": {
                "variable": {
                    "value": "mini_batch_static",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mini_batch_static",
                    "type": "variable",
                    "possible_values": [
                        [
                            "static[sorted_mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mini_batch_static).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "mini_batch_static.cuda()",
                            "Call"
                        ],
                        [
                            "mini_batch_static",
                            "Method Argument"
                        ],
                        [
                            "mini_batch_static",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_348": {
                "variable": {
                    "value": "mini_batch_reversed_with_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch_reversed_with_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reverse_sequences(mini_batch, sorted_seq_lengths)",
                            "Call"
                        ],
                        [
                            "reverse_sequences(mini_batch, sorted_seq_lengths)",
                            "Call"
                        ],
                        [
                            "reverse_sequences(torch.cat((mini_batch, mini_batch_feature_mask), dim=-1), sorted_seq_lengths)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(mini_batch_reversed_with_mask, sorted_seq_lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "mini_batch_reversed_with_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_lengths[sorted_seq_length_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_357": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_packed_sequence(rnn_output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "rnn_output",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.lin_gate_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + use_feature_mask_emitter * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emission_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emission_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.lin_gate_hidden_to_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emission_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emission_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.lin_proposed_mean_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + use_feature_mask_emitter * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emission_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emission_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.lin_proposed_mean_hidden_to_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emission_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emission_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.lin_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.lin_z_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + use_feature_mask_emitter * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_35": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.lin_gate_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.concat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transition_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.lin_gate_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transition_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.lin_proposed_mean_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.concat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transition_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.lin_proposed_mean_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transition_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.lin_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.lin_z_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_88": {
                "variable": {
                    "value": "self.lin_z_to_loc.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.lin_z_to_loc.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_92": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_t_1, mini_batch_static)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_gate_hidden_to_z(_gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.lin_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.concat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.lin_hidden_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.lin_hidden_to_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_131": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_132": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_t_1, mini_batch_static)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.context_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(att_dim, 1).uniform_(-bound, bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_165": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "self.Beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.lin_layers_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_188": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_200": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_206": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos(self.context_vec.squeeze(-1).expand(len(z_projected), len(self.context_vec)), z_projected)",
                            "Call"
                        ],
                        [
                            "self.Beta * alpha",
                            "BinOp"
                        ],
                        [
                            "alpha.reshape(z.shape[0], z.shape[1])",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill(mini_batch_mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-1)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(-1).expand(alpha.shape + (z.shape[2],))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_231": {
                "variable": {
                    "value": "time_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "mini_batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_232": {
                "variable": {
                    "value": "reversed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "time_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(T - 1, -1, -1, device=mini_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_239": {
                "variable": {
                    "value": "mask[b, 0:seq_lengths[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_lengths[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "y_mini_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "y_sequence[sorted_mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(y_mini_batch).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "y_mini_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "y_mask_mini_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_mask_mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "y_mask_sequence[sorted_mini_batch_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(y_mask_mini_batch).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "y_mask_mini_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_gate_hidden_to_input(_gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_gate_hidden_to_input(_gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_323": {
                "variable": {
                    "value": "mini_batch_feature_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "mini_batch_feature_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences_feature_mask[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch_feature_mask, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences_feature_mask[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch_feature_mask, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "mini_batch_feature_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_330": {
                "variable": {
                    "value": "mini_batch_feature_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "mini_batch_feature_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences_feature_mask[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch_feature_mask, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "list(map(lambda x: torch.from_numpy(x[:T_max, :]).type('torch.DoubleTensor'), sequences_feature_mask[sorted_mini_batch_indices]))",
                            "Call"
                        ],
                        [
                            "pad_sequence(mini_batch_feature_mask, batch_first=True).type('torch.DoubleTensor')",
                            "Call"
                        ],
                        [
                            "mini_batch_feature_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "all_MLP_dimensions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "all_MLP_dimensions[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "ndarray": {
                    "value": "x[:T_max, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_332": {
                "tensors": {
                    "value": "(mini_batch, mini_batch_feature_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(z_t, mini_batch_feature_mask_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(z_t, mini_batch_feature_mask_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(z_t, mini_batch_feature_mask_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_322": {
                "ndarray": {
                    "value": "x[:T_max, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "x[:T_max, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}