{
    "dataset.py": {
        "torch": {
            "ones_13": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_157": {
                "variable": {
                    "value": "self.users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "variable": {
                    "value": "self.users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_158": {
                "variable": {
                    "value": "self.bundles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_bundles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "self.ground_truth_u_b[index].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "self.train_mask_u_b[index].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval_main.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "bundle_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "bundle_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.get_dataset(CONFIG['path'], CONFIG['dataset_name'], task=CONFIG['eval_task'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "os.path.join(DIR, dd['hash'] + '_Recall@20.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "mean_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(torch.sigmoid(pred[:, 0] - pred[:, 1]))",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + (L2_loss / kwargs['batch_size'] if 'batch_size' in kwargs else 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_40": {
                "input": {
                    "value": "torch.sigmoid(pred[:, 0] - pred[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(torch.sigmoid(pred[:, 0] - pred[:, 1]))",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + (L2_loss / kwargs['batch_size'] if 'batch_size' in kwargs else 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_40": {
                "input": {
                    "value": "pred[:, 0] - pred[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "bundle_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.get_dataset(CONFIG['path'], CONFIG['dataset_name'], task=CONFIG['task'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "bundle_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.get_dataset(CONFIG['path'], CONFIG['dataset_name'], task=CONFIG['task'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_38": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "load_52": {
                "variable": {
                    "value": "pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CONFIG['pretrain']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "product(CONFIG['lrs'], CONFIG['decays'], CONFIG['message_dropouts'], CONFIG['node_dropouts'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_105": {
                "f": {
                    "value": "CONFIG['conti_train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "metric.py": {
        "torch": {
            "topk_16": {
                "variable": {
                    "value": "(_, col_indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk",
                            "Method Argument"
                        ],
                        [
                            "topk",
                            "Method Argument"
                        ],
                        [
                            "topk",
                            "Method Argument"
                        ],
                        [
                            "topk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "hit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_101": {
                "variable": {
                    "value": "self.IDCGs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1 + self.topk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_128": {
                "variable": {
                    "value": "self.denominator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.topk + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_88": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "col_indice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(scores, topk)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_17": {
                "start": {
                    "value": "scores.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log2_89": {
                "input": {
                    "value": "torch.arange(2, self.topk + 2, device=device, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_89": {
                "start": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.topk + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/BGCN.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self.items_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_items, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.mess_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.info.mess_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.node_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.info.node_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.dnns_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.embedding_size * (l + 1), self.embedding_size) for l in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.dnns_non_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.embedding_size * (l + 1), self.embedding_size) for l in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A_feature, B_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[features]",
                            "List"
                        ],
                        [
                            "torch.cat(all_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_134": {
                "variable": {
                    "value": "(A_feature, B_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[features]",
                            "List"
                        ],
                        [
                            "torch.cat(all_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "(A_feature.shape[0], B_feature.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_142": {
                "variable": {
                    "value": "atom_bundles_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(self.pooling_graph, atom_items_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "self.users_feature.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pretrain['users_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_112": {
                "variable": {
                    "value": "self.items_feature.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pretrain['items_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_114": {
                "variable": {
                    "value": "self.bundles_feature.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pretrain['bundles_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "input": {
                    "value": "self.pooling_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "atom_items_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_propagate(self.atom_graph, self.users_feature, self.items_feature, self.dnns_atom)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_156": {
                "input": {
                    "value": "users_feature_atom * bundles_feature_atom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "users_feature_non_atom * bundles_feature_non_atom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_183": {
                "input": {
                    "value": "users_feature_atom",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "bundles_feature_atom.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_184": {
                "input": {
                    "value": "users_feature_non_atom",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "bundles_feature_non_atom.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.embedding_size * (l + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "self.embedding_size * (l + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[self.act(dnns[i](torch.matmul(graph, features))), features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_131": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((A_feature, B_feature), 0)",
                            "Call"
                        ],
                        [
                            "self.mess_dropout(torch.cat([self.act(dnns[i](torch.matmul(graph, features))), features], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "input": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.bmat([[sp.identity(raw_graph.shape[0]), raw_graph], [raw_graph.T, sp.identity(raw_graph.shape[1])]])",
                            "Call"
                        ],
                        [
                            "rowsum_sqrt @ graph @ colsum_sqrt",
                            "BinOp"
                        ],
                        [
                            "graph.tocoo()",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(indices), torch.FloatTensor(values), torch.Size(graph.shape))",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(indices, values, size=graph.shape)",
                            "Call"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((A_feature, B_feature), 0)",
                            "Call"
                        ],
                        [
                            "self.mess_dropout(torch.cat([self.act(dnns[i](torch.matmul(graph, features))), features], 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/model_base.py": {
        "torch": {
            "Parameter_78": {
                "variable": {
                    "value": "self.users_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_users, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bundles_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_bundles, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "utils/logger.py": {
        "torch": {
            "save_117": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root_path, '{}.pth'.format(self.get_model_Id(self.modelinfo)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root_path, '{}_{}.pth'.format(self.get_model_Id(self.modelinfo), target))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_123": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root_path, '{}.pth'.format(self.get_model_Id(self.modelinfo)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root_path, '{}_{}.pth'.format(self.get_model_Id(self.modelinfo), target))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}