{
    "main_LFM.py": {
        "tensorflow": {
            "run_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_LIM.py": {
        "tensorflow": {
            "run_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vkge/LIM.py": {
        "tensorflow": {
            "AdamOptimizer_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.no_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.s_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.p_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.o_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.KL_discount",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.ELBOBS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_94": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_192": {
                "variable": {
                    "value": "self.y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_194": {
                "variable": {
                    "value": "self.p_x_i_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.p_x_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_195": {
                "variable": {
                    "value": "self.p_x_i_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.p_x_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_485": {
                "variable": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_486": {
                "variable": {
                    "value": "self.y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_488": {
                "variable": {
                    "value": "self.p_x_i_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.p_x_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_489": {
                "variable": {
                    "value": "self.p_x_i_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.p_x_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_502": {
                "variable": {
                    "value": "self.mu_s_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_503": {
                "variable": {
                    "value": "self.mu_o_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_504": {
                "variable": {
                    "value": "self.mu_p_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_506": {
                "variable": {
                    "value": "self.log_sigma_sq_s_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_507": {
                "variable": {
                    "value": "self.log_sigma_sq_o_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_508": {
                "variable": {
                    "value": "self.log_sigma_sq_p_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_510": {
                "variable": {
                    "value": "self.mu_all_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mu_s_ps, self.mu_o_ps, self.mu_p_ps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_511": {
                "variable": {
                    "value": "self.log_sigma_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.log_sigma_sq_s_ps, self.log_sigma_sq_o_ps, self.log_sigma_sq_p_ps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_517": {
                "variable": {
                    "value": "self.mu_s_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_518": {
                "variable": {
                    "value": "self.mu_o_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_519": {
                "variable": {
                    "value": "self.mu_p_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_521": {
                "variable": {
                    "value": "self.log_sigma_sq_s_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_522": {
                "variable": {
                    "value": "self.log_sigma_sq_o_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_523": {
                "variable": {
                    "value": "self.log_sigma_sq_p_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.log_sigma_sq_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_525": {
                "variable": {
                    "value": "self.mu_all_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mu_s_ns, self.mu_o_ns, self.mu_p_ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "self.log_sigma_ns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.log_sigma_sq_s_ns, self.log_sigma_sq_o_ns, self.log_sigma_sq_p_ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(100, size=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "create_global_step_96": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "self.p_x_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "self.p_x_i_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.scores_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "variable": {
                    "value": "self.kl2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(predicate_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_540": {
                "variable": {
                    "value": "self.kl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(pos_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_541": {
                "variable": {
                    "value": "self.kl2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(neg_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_155": {
                "variable": {
                    "value": "self.mu_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.predicate_embedding_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.p_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_156": {
                "variable": {
                    "value": "self.log_sigma_sq_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.predicate_embedding_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.p_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "Inference",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "tf.log(tf.where(condition=self.y_pos, x=self.p_x_i_pos, y=1 - self.p_x_i_pos) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "tf.log(tf.where(condition=self.y_neg, x=self.p_x_i_neg, y=1 - self.p_x_i_neg) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "self.kl0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(s_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "variable": {
                    "value": "self.kl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(o_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "variable": {
                    "value": "self.kl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(entity_posterior, prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_493": {
                "input_tensor": {
                    "value": "tf.log(tf.where(condition=self.y_pos, x=self.p_x_i_pos, y=1 - self.p_x_i_pos) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_495": {
                "input_tensor": {
                    "value": "tf.log(tf.where(condition=self.y_neg, x=self.p_x_i_neg, y=1 - self.p_x_i_neg) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_145": {
                "variable": {
                    "value": "self.mu_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.s_embedding_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.s_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_146": {
                "variable": {
                    "value": "self.log_sigma_sq_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.s_embedding_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.s_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_147": {
                "variable": {
                    "value": "self.mu_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.o_embedding_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.o_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_148": {
                "variable": {
                    "value": "self.log_sigma_sq_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.o_embedding_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.o_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_150": {
                "variable": {
                    "value": "self.mu_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.entity_embedding_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.s_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_151": {
                "variable": {
                    "value": "self.log_sigma_sq_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.entity_embedding_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.s_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_152": {
                "variable": {
                    "value": "self.mu_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.entity_embedding_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.o_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_153": {
                "variable": {
                    "value": "self.log_sigma_sq_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.entity_embedding_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.o_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_200": {
                "x": {
                    "value": "tf.where(condition=self.y_pos, x=self.p_x_i_pos, y=1 - self.p_x_i_pos) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_202": {
                "x": {
                    "value": "tf.where(condition=self.y_neg, x=self.p_x_i_neg, y=1 - self.p_x_i_neg) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_494": {
                "x": {
                    "value": "tf.where(condition=self.y_pos, x=self.p_x_i_pos, y=1 - self.p_x_i_pos) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_496": {
                "x": {
                    "value": "tf.where(condition=self.y_neg, x=self.p_x_i_neg, y=1 - self.p_x_i_neg) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_200": {
                "condition": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_x_i_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - self.p_x_i_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_202": {
                "condition": {
                    "value": "self.y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_x_i_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - self.p_x_i_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_494": {
                "condition": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_x_i_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - self.p_x_i_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_496": {
                "condition": {
                    "value": "self.y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_x_i_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - self.p_x_i_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vkge/models/base.py": {
        "tensorflow": {
            "reshape_85": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicate_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, emb_size, emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "(es_re, es_im)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.subject_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(eo_re, eo_im)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.object_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(ew_re, ew_im)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.predicate_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "scaled_subject_embedding * self.object_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "sW * self.object_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "self.subject_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "a": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicate_embeddings, (-1, emb_size, emb_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "arg1 * rel * arg2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "self.subject_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vkge/models/similarities.py": {
        "tensorflow": {
            "reduce_sum_19": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_35": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x1 - x2), axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_19": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_50": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vkge/training/constraints.py": {
        "tensorflow": {
            "exp_8": {
                "variable": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "variable": {
                    "value": "row_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_13": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_19": {
                "variable": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_norm_21": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_22": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(log_var_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_norm_30": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_31": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "row_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(var_matrix), axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_42": {
                "variable": {
                    "value": "pseudoboolean_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(var_matrix, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(log_var_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_50": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_51": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "pseudoboolean_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_14": {
                "ref": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_23": {
                "ref": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_32": {
                "ref": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_38": {
                "ref": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_43": {
                "ref": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pseudoboolean_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(1.0, tf.maximum(var_matrix, 0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_52": {
                "ref": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(var_matrix, 1.0, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ],
                        [
                            "var_matrix * tf.expand_dims(norm / row_norms, axis=axis)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(var_matrix, val)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_56": {
                "ref": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pseudoboolean_sigmoid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudoboolean_sigmoid_update",
                            "variable"
                        ],
                        [
                            "tf.nn.sigmoid(var_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_11": {
                "input": {
                    "value": "norm / row_norms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_28": {
                "x": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tf.square(var_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "norm / row_norms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_42": {
                "x": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_48": {
                "x": {
                    "value": "log_var_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_36": {
                "x": {
                    "value": "var_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.exp(log_var_matrix)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.exp(log_var_matrix))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vkge/training/losses.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_17": {
                "variable": {
                    "value": "logistic_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logistic_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=scores, labels=targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "hinge_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "margin - scores * (2 * targets - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hinge_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(margin - scores * (2 * targets - 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vkge/training/util.py": {
        "tensorflow": {
            "sqrt_39": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(log_sigma_square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "embedding_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emd_mean_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vtype + '_mean'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_variables + 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.001, maxval=0.001, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "embedding_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emd_mean_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vtype + '_mean'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_variables + 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "embedding_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emd_sig_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vtype + '_sigma'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_variables + 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=0, maxval=sigmax, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "embedding_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emd_sig_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vtype + '_sigma'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_variables + 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=sigmax, maxval=sigmax, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "embedding_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emd_sig_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vtype + '_sigma'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_variables + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=sigmax, maxval=sigmax, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_39": {
                "x": {
                    "value": "log_sigma_square",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.ones(code_size), code_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_60": {
                "x": {
                    "value": "tf.ones(code_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_99": {
                "minval": {
                    "value": "-0.001",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_114": {
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "sigmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(scale_max, decimals=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_122": {
                "minval": {
                    "value": "sigmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(scale_max, decimals=2)",
                            "Call"
                        ]
                    ]
                },
                "maxval": {
                    "value": "sigmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(scale_max, decimals=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_130": {
                "minval": {
                    "value": "sigmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(scale_max, decimals=2)",
                            "Call"
                        ]
                    ]
                },
                "maxval": {
                    "value": "sigmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(scale_max, decimals=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_60": {
                "shape": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_normalize_206": {
                "x": {
                    "value": "mu_s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_207": {
                "x": {
                    "value": "mu_p",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_208": {
                "x": {
                    "value": "mu_o",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_218": {
                "x": {
                    "value": "mu_s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_219": {
                "x": {
                    "value": "mu_p",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_220": {
                "x": {
                    "value": "mu_o",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}