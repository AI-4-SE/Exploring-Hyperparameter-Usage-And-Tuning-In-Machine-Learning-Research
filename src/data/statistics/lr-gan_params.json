{
    "_ext/stnm/__init__.py": {
        "torch": {}
    },
    "functions/gridgen.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "input_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "output_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batchgrid_temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.batchgrid.view(-1, self.height * self.width, 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid.view(-1, self.height * self.width, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(input1, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "grad_output_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output_view",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_output_temp.view(-1, self.height * self.width, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "baddbmm_58": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(self.input1.size())",
                            "Call"
                        ],
                        [
                            "grad_input1.cuda()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, grad_output_temp, batchgrid_temp)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.input1.size())",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "grad_output_temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grad_output.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.transpose(grad_output_view, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "batch2": {
                    "value": "batchgrid_temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.batchgrid.view(-1, self.height * self.width, 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid.view(-1, self.height * self.width, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0), self.height, self.width, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "output[i, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.grid[:, :, 1].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_74": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_105": {
                "input": {
                    "value": "self.input1[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "grad_output[i, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "functions/stnm.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "canvas.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "canvas.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "canvas.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "canvas.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "grad_canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.canvas.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "grad_fgimg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.fgimg.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "grad_fggrid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.fggrid.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "grad_fgmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.fgmask.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/gridgen.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_216": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_283": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_357": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1, 0, 0], [0, 1, 0]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "batch_identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[input.size(0), 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_28": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - batch_identity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "input - batch_identity",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(input - batch_identity, input - batch_identity)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(input - batch_identity, input - batch_identity)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan_101": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_177": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_186": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_214": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_243": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_252": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_259": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_281": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_281": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_318": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_329": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_355": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_355": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_399": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tan_101": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "acos_184": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_250": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_259": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_316": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_329": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_402": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_406": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_408": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "modules/stnm.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=opt.dataroot, transform=transforms.Compose([transforms.Scale(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.LSUN(db_path=opt.dataroot, classes=['bedroom_train'], transform=transforms.Compose([transforms.Scale(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.CIFAR10(root=opt.dataroot, download=True, transform=transforms.Compose([transforms.Scale(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder('datasets/cub200/images', transform=trans)",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder('datasets/mnist-one/images', transform=trans)",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder('datasets/mnist-two/images', transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_384": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_403": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_404": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_57": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_150": {
                "variable": {
                    "value": "self.lstmcell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.Gbgi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.depth_in_bg, nc, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.Gfgi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.depth_in, nc, 4, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.Gfgm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.depth_in, 1, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.Gtransform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.nlnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nz + nz, nz)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(depth_in * nsize_in * nsize_in, out_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "x_s_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s.clamp(opt.maxobjscale, 2 * opt.maxobjscale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "x_r_clmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_r.clamp(-rot, rot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_267": {
                "variable": {
                    "value": "x_t_clmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t.clamp(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_269": {
                "variable": {
                    "value": "y_r_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r.clamp(-rot, rot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "y_s_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s.clamp(opt.maxobjscale, 2 * opt.maxobjscale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "variable": {
                    "value": "y_t_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t.clamp(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "Tout",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_s_clamp, x_r_clmap, x_t_clmap, y_r_clamp, y_s_clamp, y_t_clamp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_338": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_381": {
                "f": {
                    "value": "opt.netD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_418": {
                "variable": {
                    "value": "real_cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_cpu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_cpu.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mean(real_cpu, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_473": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_netG_s_%d_epoch_%d.pth' % (opt.outmodelf, opt.dataset, opt.session, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_474": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_netD_s_%d_epoch_%d.pth' % (opt.outmodelf, opt.dataset, opt.session, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_155": {
                "in_channels": {
                    "value": "self.depth_in_bg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_163": {
                "in_channels": {
                    "value": "self.depth_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_168": {
                "in_channels": {
                    "value": "self.depth_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_192": {
                "in_features": {
                    "value": "nz + nz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_193": {
                "num_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_201": {
                "in_channels": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_221": {
                "in_channels": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_222": {
                "num_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "depth_in * nsize_in * nsize_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_251": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "*size": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_362": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "8 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "nc",
                            "Name"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_209": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "8 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "nc",
                            "Name"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "num_features": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_229": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "8 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "nc",
                            "Name"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "num_features": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_242": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_243": {
                "num_features": {
                    "value": "depth_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "8 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "nc",
                            "Name"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ]
                    ]
                }
            },
            "LeakyReLU_244": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, encFC]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "8 * ngf",
                            "BinOp"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ],
                        [
                            "nc",
                            "Name"
                        ],
                        [
                            "depth_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_357": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, encFC]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "depth_out",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "4 * ngf",
                            "BinOp"
                        ],
                        [
                            "max(depth_in // 2, 64)",
                            "Call"
                        ],
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "2 * depth_in",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}