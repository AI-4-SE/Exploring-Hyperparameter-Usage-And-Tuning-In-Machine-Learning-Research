{
    "OpenAttack/data/dces.py": {
        "sklearn": {
            "NearestNeighbors_25": {
                "variable": {
                    "value": "neigh",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attack_assist/substitute/word/chinese_word2vec.py": {
        "torch": {
            "from_numpy_30": {
                "ndarray": {
                    "value": "wordvec.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attack_assist/substitute/word/embed_based.py": {
        "torch": {}
    },
    "OpenAttack/attack_assist/substitute/word/english_counterfit.py": {
        "torch": {
            "from_numpy_30": {
                "ndarray": {
                    "value": "wordvec.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attack_assist/substitute/word/english_glove.py": {
        "torch": {
            "from_numpy_31": {
                "ndarray": {
                    "value": "wordvec.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attack_assist/substitute/word/english_word2vec.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "wordvec.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attackers/bae/__init__.py": {
        "torch": {
            "tensor_125": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * len(input_ids)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "orig_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([feature.seq]))",
                            "Call"
                        ],
                        [
                            "orig_probs[0].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.softmax(orig_probs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "input_ids_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tokenizer.convert_tokens_to_ids(sub_words)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_138": {
                "variable": {
                    "value": "(word_pred_scores_all, word_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlm_model(input_ids_.to(self.device))[0].squeeze()",
                            "Call"
                        ],
                        [
                            "word_predictions[1:len(sub_words) + 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_305": {
                "variable": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(tgt_model.get_prob(texts))",
                            "Call"
                        ],
                        [
                            "torch.softmax(leave_1_probs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_307": {
                "variable": {
                    "value": "leave_1_probs_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(tgt_model.get_prob(texts))",
                            "Call"
                        ],
                        [
                            "torch.softmax(leave_1_probs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "segments_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[segments_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_234": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_239": {
                "variable": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([temp_text]))[0].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.softmax(temp_prob, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_240": {
                "variable": {
                    "value": "temp_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([temp_text]))[0].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.softmax(temp_prob, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_346": {
                "input": {
                    "value": "predictions[0, masked_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_237": {},
            "index_select_313": {
                "input": {
                    "value": "orig_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([feature.seq]))",
                            "Call"
                        ],
                        [
                            "orig_probs[0].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.softmax(orig_probs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "leave_1_probs_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(leave_1_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "OpenAttack/attackers/bert_attack/__init__.py": {
        "torch": {
            "tensor_111": {
                "variable": {
                    "value": "input_ids_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tokenizer.convert_tokens_to_ids(sub_words)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_113": {
                "variable": {
                    "value": "(word_pred_scores_all, word_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlm_model(input_ids_.to(self.device))[0].squeeze()",
                            "Call"
                        ],
                        [
                            "word_predictions[1:len(sub_words) + 1, :]",
                            "Subscript"
                        ],
                        [
                            "mlm_model(all_substitutes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_224": {
                "variable": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_225": {
                "variable": {
                    "value": "leave_1_probs_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leave_1_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(tgt_model.get_prob(texts))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_255": {
                "variable": {
                    "value": "c_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "all_substitutes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_substitutes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(all_substitutes)",
                            "Call"
                        ],
                        [
                            "all_substitutes[:24].to(self.device)",
                            "Call"
                        ],
                        [
                            "[[int(c)] for c in lev_i]",
                            "ListComp"
                        ],
                        [
                            "lev_i",
                            "Name"
                        ]
                    ]
                }
            },
            "exp_265": {
                "variable": {
                    "value": "ppl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(ppl.view(N, L), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_266": {
                "variable": {
                    "value": "(_, word_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ppl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_loss(word_predictions.view(N * L, -1), all_substitutes.view(-1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.mean(ppl.view(N, L), dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_68": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_169": {
                "variable": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_170": {
                "variable": {
                    "value": "temp_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([temp_text]))[0].squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_265": {
                "input": {
                    "value": "ppl.view(N, L)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_169": {},
            "index_select_231": {
                "input": {
                    "value": "orig_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(victim.get_prob([feature.seq]))",
                            "Call"
                        ],
                        [
                            "orig_probs[0].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "leave_1_probs_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(leave_1_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "OpenAttack/attackers/gan/__init__.py": {
        "torch": {
            "max_170": {
                "variable": {
                    "value": "(_, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.autoencoder(torch.LongTensor([source_orig]), torch.LongTensor([length]), noise=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "OpenAttack/attackers/geometry/__init__.py": {
        "torch": {
            "argsort_150": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(sent_vecs).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "r_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_vecs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "finish_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_178": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "finish_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((input_shape[0], 1), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "finish_mask.cuda()",
                            "Call"
                        ],
                        [
                            "finish_mask + cur_finish_mask",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(cur_batch_size).bool()",
                            "Call"
                        ],
                        [
                            "finish_mask.cuda()",
                            "Call"
                        ],
                        [
                            "finish_mask.bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "self.loops_needed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_289": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(x.grad.data)",
                            "Call"
                        ],
                        [
                            "torch.div(grad, self.norm_dim(grad).unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.norm_dim(grad).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_307": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(norms)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "new_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.split_forward(new_word_ids, new_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "unk_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "unk_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word2id[self.UNK_WORD]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(unk_id)",
                            "Call"
                        ],
                        [
                            "unk_id.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_372": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(word_ids).logits",
                            "Attribute"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_373": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(word_ids).logits",
                            "Attribute"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logits.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_376": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_383": {
                "variable": {
                    "value": "true_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(new_predictions.size(0), 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == new_predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(num_classes).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == original_predictions.unsqueeze(1)",
                            "Compare"
                        ]
                    ]
                }
            },
            "diag_397": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.config['max_steps'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_439": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logits.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_439": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_454": {
                "variable": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.split_forward(new_word_ids, new_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "masked_select_461": {
                "variable": {
                    "value": "all_true_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(new_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(new_predictions.size(0), 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == new_predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(num_classes).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == original_predictions.unsqueeze(1)",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_473": {
                "variable": {
                    "value": "best_word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saliency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_probs.unsqueeze(1) - all_true_probs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_474": {
                "variable": {
                    "value": "replace_order",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saliency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_probs.unsqueeze(1) - all_true_probs",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineSimilarity_496": {
                "variable": {
                    "value": "self.cosine_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_540": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, stopwords_mask)",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, cur_available)",
                            "Call"
                        ],
                        [
                            "mask.bool()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sample.mask[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_available",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_available.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(cur_batch_size, self.config['max_steps'])",
                            "Call"
                        ],
                        [
                            "cur_available.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mul(cur_available, 1 - words_to_replace_one_hot)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_584": {
                "variable": {
                    "value": "all_new_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "all_new_word_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_585": {
                "variable": {
                    "value": "all_new_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_lengths)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_586": {
                "variable": {
                    "value": "all_new_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_603": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_604": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_632": {
                "variable": {
                    "value": "all_new_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "all_new_word_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_633": {
                "variable": {
                    "value": "all_new_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_lengths)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_634": {
                "variable": {
                    "value": "all_new_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_674": {
                "variable": {
                    "value": "sent_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.hidden_states[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_677": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(word_ids).logits",
                            "Attribute"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_681": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I.size(1)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_681": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_687": {
                "variable": {
                    "value": "original_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(word_ids).logits",
                            "Attribute"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "masked_select_688": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(new_predictions.size(0), 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == new_predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(num_classes).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == original_predictions.unsqueeze(1)",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_698": {
                "variable": {
                    "value": "cur_available",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cur_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "word_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.config['max_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_701": {
                "variable": {
                    "value": "finish_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cur_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "word_ids.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_702": {
                "variable": {
                    "value": "cur_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cur_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "word_ids.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_970": {
                "variable": {
                    "value": "intermediate_cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_cosines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_cosines).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "intermediate_cosines.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_970": {
                "variable": {
                    "value": "intermediate_cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_972": {
                "variable": {
                    "value": "intermediate_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_projections).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "intermediate_projections.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_972": {
                "variable": {
                    "value": "intermediate_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_975": {
                "variable": {
                    "value": "intermediate_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_distances).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "intermediate_distances.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_975": {
                "variable": {
                    "value": "intermediate_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_977": {
                "variable": {
                    "value": "intermediate_pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_pred_probs).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_977": {
                "variable": {
                    "value": "intermediate_pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_981": {
                "variable": {
                    "value": "intermediate_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_word_ids).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_981": {
                "variable": {
                    "value": "intermediate_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_983": {
                "variable": {
                    "value": "intermediate_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermediate_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(intermediate_normals).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "intermediate_normals.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_983": {
                "variable": {
                    "value": "intermediate_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1002": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(norms)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1301": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_193": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_vecs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_200": {
                "variable": {
                    "value": "logits_label_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "label.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_200": {
                "variable": {
                    "value": "logits_label_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_243": {
                "variable": {
                    "value": "r_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(pert, min=0.0001).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input_shape)",
                            "Call"
                        ],
                        [
                            "w.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(valid_w_mask, new_w, w)",
                            "Call"
                        ],
                        [
                            "l.name()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_244": {
                "variable": {
                    "value": "r_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(torch.clamp(pert, min=0.0001).reshape(-1, 1), w)",
                            "Call"
                        ],
                        [
                            "torch.div(r_i, self.norm_dim(w).reshape((-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.norm_dim(w).reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_255": {
                "variable": {
                    "value": "r_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cur_update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(finish_mask < 1.0).byte()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.cuda()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.bool()",
                            "Call"
                        ],
                        [
                            "~finish_mask",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(cur_update_mask, selected_projections > 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "r_tot_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_tot + r_i",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "r_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input_shape)",
                            "Call"
                        ],
                        [
                            "r_tot.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask, r_tot_new, r_tot)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_285": {
                "input": {
                    "value": "torch.gather(fs, dim=1, index=k_i.unsqueeze(1)) - torch.gather(fs, dim=1, index=label.unsqueeze(1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_285": {
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_cached_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_535": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, stopwords_mask)",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, cur_available)",
                            "Call"
                        ],
                        [
                            "mask.bool()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sample.mask[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "stopwords_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sample.stopwords_mask[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "stopwords_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_683": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_709": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_765": {
                "variable": {
                    "value": "words_to_replace_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "words_to_replace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_replace_orders[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "word_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_767": {
                "variable": {
                    "value": "cur_available",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_available",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_available.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(cur_batch_size, self.config['max_steps'])",
                            "Call"
                        ],
                        [
                            "cur_available.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mul(cur_available, 1 - words_to_replace_one_hot)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - words_to_replace_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_794": {
                "variable": {
                    "value": "all_new_sent_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.hidden_states[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_796": {
                "variable": {
                    "value": "all_new_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_new_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_802": {
                "variable": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "repeat_interleave_806": {
                "variable": {
                    "value": "all_cur_sent_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_sent_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(sent_vecs.data)",
                            "Call"
                        ],
                        [
                            "cur_sent_vecs.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask.view(-1, 1), selected_sent_vecs, cur_sent_vecs)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(n_new_samples)",
                            "Call"
                        ],
                        [
                            "repeats.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_808": {
                "variable": {
                    "value": "all_cur_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(n_new_samples)",
                            "Call"
                        ],
                        [
                            "repeats.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_816": {
                "variable": {
                    "value": "all_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_new_r_tot_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm_dim(all_new_r_tot)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_cosines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cosine_similarity(all_new_r_tot, all_cur_normals)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_831": {
                "variable": {
                    "value": "all_projections_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(all_new_r_tot_length, all_cosines)",
                            "Call"
                        ],
                        [
                            "all_cur_r_tot_distance",
                            "Name"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_833": {
                "variable": {
                    "value": "all_new_predictions_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(all_new_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_835": {
                "variable": {
                    "value": "all_new_lengths_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_lengths)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_lengths)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_837": {
                "variable": {
                    "value": "all_new_labels_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_labels)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_839": {
                "variable": {
                    "value": "all_cosines_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_cosines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cosine_similarity(all_new_r_tot, all_cur_normals)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_844": {
                "variable": {
                    "value": "all_new_word_ids_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_new_word_ids)",
                            "Call"
                        ],
                        [
                            "all_new_word_ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_846": {
                "variable": {
                    "value": "all_new_sent_vectors_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_sent_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(outputs.hidden_states[-1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_848": {
                "variable": {
                    "value": "all_new_probs_splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_new_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(all_new_logits, dim=-1).data",
                            "Attribute"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_new_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_886": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_indices)",
                            "Call"
                        ],
                        [
                            "selected_indices.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_887": {
                "variable": {
                    "value": "selected_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "selected_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_projections)",
                            "Call"
                        ],
                        [
                            "selected_projections.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_888": {
                "variable": {
                    "value": "selected_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "selected_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_predictions)",
                            "Call"
                        ],
                        [
                            "selected_predictions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_889": {
                "variable": {
                    "value": "selected_cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "selected_cosines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_cosines)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_891": {
                "variable": {
                    "value": "selected_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_word_ids, 0)",
                            "Call"
                        ],
                        [
                            "selected_word_ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_893": {
                "variable": {
                    "value": "selected_sent_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_sent_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_sent_vecs, 0)",
                            "Call"
                        ],
                        [
                            "selected_sent_vecs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_895": {
                "variable": {
                    "value": "selected_new_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_new_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_new_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_898": {
                "variable": {
                    "value": "cur_pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selected_new_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_new_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(logits.size(1)).unsqueeze(0).repeat(new_predictions.size(0), 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == new_predictions.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.arange(num_classes).unsqueeze(0).repeat(cur_batch_size, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_mask.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_mask == original_predictions.unsqueeze(1)",
                            "Compare"
                        ]
                    ]
                }
            },
            "mul_913": {
                "variable": {
                    "value": "cur_update_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(finish_mask < 1.0).byte()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.cuda()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.bool()",
                            "Call"
                        ],
                        [
                            "~finish_mask",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(cur_update_mask, selected_projections > 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "selected_projections > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_919": {
                "variable": {
                    "value": "cur_projections",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cur_update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(finish_mask < 1.0).byte()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.cuda()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.bool()",
                            "Call"
                        ],
                        [
                            "~finish_mask",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(cur_update_mask, selected_projections > 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "selected_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_projections)",
                            "Call"
                        ],
                        [
                            "selected_projections.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cur_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(cur_batch_size)",
                            "Call"
                        ],
                        [
                            "cur_projections.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask, selected_projections, cur_projections)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_922": {
                "variable": {
                    "value": "cur_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cur_update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(finish_mask < 1.0).byte()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.cuda()",
                            "Call"
                        ],
                        [
                            "cur_update_mask.bool()",
                            "Call"
                        ],
                        [
                            "~finish_mask",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(cur_update_mask, selected_projections > 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "selected_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(selected_predictions)",
                            "Call"
                        ],
                        [
                            "selected_predictions.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cur_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(original_predictions.data)",
                            "Call"
                        ],
                        [
                            "cur_predictions.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask, selected_predictions, cur_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_925": {
                "variable": {
                    "value": "cur_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cur_update_mask.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "selected_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_word_ids, 0)",
                            "Call"
                        ],
                        [
                            "selected_word_ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cur_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(word_ids)",
                            "Call"
                        ],
                        [
                            "cur_word_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask.view(-1, 1), selected_word_ids, cur_word_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_929": {
                "variable": {
                    "value": "cur_sent_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cur_update_mask.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "selected_sent_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(selected_sent_vecs, 0)",
                            "Call"
                        ],
                        [
                            "selected_sent_vecs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cur_sent_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(sent_vecs.data)",
                            "Call"
                        ],
                        [
                            "cur_sent_vecs.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(cur_update_mask.view(-1, 1), selected_sent_vecs, cur_sent_vecs)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_986": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_213": {
                "variable": {
                    "value": "logits_class_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "I[:, k].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "logits_class_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_227": {
                "variable": {
                    "value": "pert_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(f_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.norm_dim(w_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_235": {
                "variable": {
                    "value": "pert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_pert_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pert_k < pert",
                            "Compare"
                        ],
                        [
                            "valid_pert_mask.bool()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_pert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pert_k + 0.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(input_shape[0]) * np.inf",
                            "BinOp"
                        ],
                        [
                            "pert.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(valid_pert_mask, new_pert, pert)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "valid_w_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_pert_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pert_k < pert",
                            "Compare"
                        ],
                        [
                            "valid_pert_mask.bool()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(input_shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_241": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_w_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(valid_pert_mask, shape=(input_shape[0], 1)).float()",
                            "Call"
                        ],
                        [
                            "valid_w_mask.bool()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_k + 0.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input_shape)",
                            "Call"
                        ],
                        [
                            "w.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(valid_w_mask, new_w, w)",
                            "Call"
                        ],
                        [
                            "l.name()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_397": {
                "*size": {
                    "value": "self.config['max_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_419": {
                "*size": {
                    "value": "[cur_batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_781": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_803": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_866": {
                "variable": {
                    "value": "selected_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_projections_splited[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_867": {
                "variable": {
                    "value": "selected_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_projections_splited[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_902": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1079": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1103": {
                "data": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_ids.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "word_ids.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.word2id[word] for word in words]",
                            "ListComp"
                        ],
                        [
                            "sample.word_ids[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "word_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1284": {
                "data": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_ids.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "word_ids.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.word2id[word] for word in words]",
                            "ListComp"
                        ],
                        [
                            "sample.word_ids[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "word_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1285": {
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, stopwords_mask)",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, cur_available)",
                            "Call"
                        ],
                        [
                            "mask.bool()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sample.mask[:self.max_steps]",
                            "Subscript"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_188": {
                "input": {
                    "value": "finish_mask >= finished",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "input": {
                    "value": "pert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(input_shape[0]) * np.inf",
                            "BinOp"
                        ],
                        [
                            "pert.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(valid_pert_mask, new_pert, pert)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_261": {
                "input": {
                    "value": "net.forward(check_fool.requires_grad_(True))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_798": {
                "input": {
                    "value": "all_new_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_869": {
                "variable": {
                    "value": "selected_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_projections_splited[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_870": {
                "variable": {
                    "value": "selected_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_projections_splited[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_222": {
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "I[:, k].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_223": {
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "label.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_227": {
                "input": {
                    "value": "f_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(fs, dim=1, index=I[:, k].unsqueeze(1)) - torch.gather(fs, dim=1, index=label.unsqueeze(1))",
                            "BinOp"
                        ],
                        [
                            "f_k.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_memory_allocated_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_285": {
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_i.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_286": {
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x)",
                            "Call"
                        ],
                        [
                            "net.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "label.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attackers/scpn/__init__.py": {
        "torch": {
            "load_119": {
                "variable": {
                    "value": "pp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path['scpn.pt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "parse_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path['parse_generator.pt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "tp_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_templates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(templates), max(template_lens)), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "tp_parses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_parses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(seqs), max(seq_lens)), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_98": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_94": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/attackers/scpn/models.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.trans_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len_voc",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_nt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_nt + d_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.out_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.out_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len_voc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_21": {
                "variable": {
                    "value": "self.out_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.att_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, d_hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.att_parse_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, d_hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.copy_hid_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.copy_att_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.copy_inp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_nt + d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_32": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "range_row",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths)",
                            "Call"
                        ],
                        [
                            "torch.max(lengths)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "range_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_67": {
                "variable": {
                    "value": "(lens, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "e_hid_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "e_cell_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sort_72": {
                "variable": {
                    "value": "(_, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "trans_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_weights.unsqueeze(2) * trans_embs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_input, trans_ctx.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "attn_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(2) * enc_hids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input.squeeze(1).mm(self.copy_inp_v)",
                            "Call"
                        ],
                        [
                            "p_copy + hn[1].mm(self.copy_hid_v)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(p_copy).squeeze(1)",
                            "Call"
                        ],
                        [
                            "decoder_input.squeeze(1).mm(self.copy_inp_v)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(p_copy).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_254": {
                "variable": {
                    "value": "self.word_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len_voc",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_255": {
                "variable": {
                    "value": "self.trans_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len_trans_voc",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_nt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.encoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_264": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_word + d_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_265": {
                "variable": {
                    "value": "self.trans_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.out_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.out_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len_voc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_270": {
                "variable": {
                    "value": "self.att_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_271": {
                "variable": {
                    "value": "self.out_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.att_parse_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_275": {
                "variable": {
                    "value": "self.att_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, d_hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_276": {
                "variable": {
                    "value": "self.att_parse_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, d_hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "self.copy_hid_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.copy_att_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "variable": {
                    "value": "self.copy_inp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(d_word + d_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_285": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_286": {
                "variable": {
                    "value": "range_row",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths)",
                            "Call"
                        ],
                        [
                            "torch.max(lengths)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_286": {
                "variable": {
                    "value": "range_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_303": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_312": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * enc_hids",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ],
                        [
                            "b_hn.unsqueeze(1) * trans_embs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(scores, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_321": {
                "variable": {
                    "value": "(lens, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "variable": {
                    "value": "e_hid_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "e_cell_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sort_330": {
                "variable": {
                    "value": "(_, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "enc_last_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_last_hid[0], enc_last_hid[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_344": {
                "variable": {
                    "value": "(lens, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "t_hid_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "t_cell_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sort_349": {
                "variable": {
                    "value": "(_, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "trans_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_weights.unsqueeze(2) * trans_embs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_input, trans_ctx.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_379": {
                "variable": {
                    "value": "attn_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(2) * enc_hids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_385": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input.squeeze(1).mm(self.copy_inp_v)",
                            "Call"
                        ],
                        [
                            "p_copy + hn[1].mm(self.copy_hid_v)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(p_copy).squeeze(1)",
                            "Call"
                        ],
                        [
                            "decoder_input.squeeze(1).mm(self.copy_inp_v)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(p_copy).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_385": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_409": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "word_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_nt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs.size(1)",
                            "Call"
                        ],
                        [
                            "hs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.len_voc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_186": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_scores + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "pred_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hn.squeeze(0), attn_ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_259": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_word + d_trans",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_261": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_word",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "in_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_embs, trans.unsqueeze(1).expand(bsz, max_len, self.d_trans)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "word_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_442": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs.size(1)",
                            "Call"
                        ],
                        [
                            "hs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.len_voc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "self.trans_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "lengths.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ],
                        [
                            "trans.device",
                            "Attribute"
                        ],
                        [
                            "self.word_embs.parameters().__next__().device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_472": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_scores + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_472": {
                "variable": {
                    "value": "vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "pred_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hn[1], attn_ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_203": {
                "variable": {
                    "value": "(_, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-preds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_491": {
                "variable": {
                    "value": "(_, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-preds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_227": {
                "variable": {
                    "value": "(_, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-preds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_514": {
                "variable": {
                    "value": "(_, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-preds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/data/gan.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x)",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(x)).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(x).cuda()",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noutput",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.linear_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noutput",
                            "Name"
                        ]
                    ]
                }
            },
            "Embedding_249": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_250": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_270": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ],
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.linear_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_290": {
                "variable": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, all_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_373": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_376": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "norms.expand_as(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_398": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_451": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_452": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_455": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_462": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ],
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_500": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_539": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_decoder(indices)",
                            "Call"
                        ],
                        [
                            "self.embedding(indices)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(indices)",
                            "Call"
                        ],
                        [
                            "self.embedding_decoder(indices)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_551": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_554": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "norms.expand_as(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_574": {
                "variable": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, all_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_575": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embeddings, all_hidden], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([embeddings, all_hidden], 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_580": {
                "variable": {
                    "value": "(output, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_604": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_626": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_89": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_137": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_183": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_232": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_258": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_windows_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_strides_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(x) for x in conv_strides.split('-')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_262": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_379": {
                "variable": {
                    "value": "gauss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(hidden.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "torch.Generator()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normal_557": {
                "variable": {
                    "value": "gauss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "means": {
                    "value": "torch.zeros(hidden.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_647": {
                "f": {
                    "value": "os.path.join(path, 'a.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_648": {
                "f": {
                    "value": "os.path.join(path, 'i.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_649": {
                "f": {
                    "value": "os.path.join(path, 'g.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_650": {
                "f": {
                    "value": "os.path.join(path, 'd.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_331": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_dec(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_335": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_394": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_491": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_613": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_dec(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_616": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_617": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_448": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "*size": {
                    "value": "hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Generator_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_557": {
                "*size": {
                    "value": "hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/data/sgan.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x)",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(x)).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(x).cuda()",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noutput",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.linear_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noutput",
                            "Name"
                        ]
                    ]
                }
            },
            "Embedding_249": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_250": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.linear_cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_271": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ],
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.linear_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_291": {
                "variable": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, all_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_376": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_379": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "norms.expand_as(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_401": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_455": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_458": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_465": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ],
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word2idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_503": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_542": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_decoder(indices)",
                            "Call"
                        ],
                        [
                            "self.embedding(indices)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(indices)",
                            "Call"
                        ],
                        [
                            "self.embedding_decoder(indices)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_554": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_557": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.linear(c_pre_lin)",
                            "Call"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ],
                        [
                            "self.encode(indices, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.div(hidden, norms.expand_as(hidden))",
                            "Call"
                        ],
                        [
                            "hidden + to_gpu(self.gpu, Variable(gauss_noise))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "norms.expand_as(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, all_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_580": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embeddings, all_hidden], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([embeddings, all_hidden], 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_585": {
                "variable": {
                    "value": "(output, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_89": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_137": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_183": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_232": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_258": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_windows_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_strides_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(x) for x in conv_strides.split('-')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_262": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_382": {
                "variable": {
                    "value": "gauss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(hidden.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_562": {
                "variable": {
                    "value": "gauss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(hidden.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_629": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_652": {
                "f": {
                    "value": "os.path.join(path, 'a.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_653": {
                "f": {
                    "value": "os.path.join(path, 'i.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_654": {
                "f": {
                    "value": "os.path.join(path, 'g.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_655": {
                "f": {
                    "value": "os.path.join(path, 'd.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_332": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_dec(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_336": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_495": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_618": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_dec(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_621": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_622": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_451": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "*size": {
                    "value": "hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_562": {
                "*size": {
                    "value": "hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/metric/algorithms/levenshtein.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "la + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "lb + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "OpenAttack/victim/classifiers/transformers.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "curr_sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokeinzed_sen[i * self.batch_size:(i + 1) * self.batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions[i * self.batch_size:(i + 1) * self.batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.logits",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "all_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_hidden_states, outputs.hidden_states[-1].detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.logits",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "outputs.logits",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "result_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result_grad, self.curr_embedding.grad.clone().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result, logits.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/adversarial_training.py": {
        "torch": {
            "NLLLoss_101": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "EmbeddingBag_40": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_42": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}