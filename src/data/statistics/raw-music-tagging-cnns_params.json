{
    "cloud/trainer/dataproviders.py": {
        "tensorflow": {
            "string_input_producer_57": {
                "variable": {
                    "value": "self._filename_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_107": {
                "variable": {
                    "value": "windowed_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "loaded_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "windows_per_song",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "WindowedSongs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "windowed_songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(loaded_songs, windows_per_song, name='WindowedSongs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "StackedSongs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "strided_slice_117": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_prep(loaded_tags, self._num_tags)",
                            "Call"
                        ],
                        [
                            "self.tag_prep(loaded_tags, self._num_tags + 1)",
                            "Call"
                        ],
                        [
                            "tf.strided_slice(tags, [0, 0], [-1, -1], [windows_per_song, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['tags'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[windows_per_song, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, windows_per_song, self._max_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, windows_per_song, self._max_samples, self._sample_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordReader_138": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_example_141": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'tags': tf.FixedLenFeature([], tf.string), 'song': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_164": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.decode_raw(data['tags'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_259": {
                "variable": {
                    "value": "clipped_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_prep(loaded_tags, self._num_tags)",
                            "Call"
                        ],
                        [
                            "self.tag_prep(loaded_tags, self._num_tags + 1)",
                            "Call"
                        ],
                        [
                            "tf.strided_slice(tags, [0, 0], [-1, -1], [windows_per_song, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['tags'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, shrink]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "variable": {
                    "value": "target_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_prep(loaded_tags, self._num_tags)",
                            "Call"
                        ],
                        [
                            "self.tag_prep(loaded_tags, self._num_tags + 1)",
                            "Call"
                        ],
                        [
                            "tf.strided_slice(tags, [0, 0], [-1, -1], [windows_per_song, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['tags'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "target_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_273": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tags, axis=1, name='target_sum')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_274": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(where)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "squeeze_indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_275": {
                "variable": {
                    "value": "filtered_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(where), axis=1, name='squeeze_indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "song_reduction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_276": {
                "variable": {
                    "value": "filtered_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_prep(loaded_tags, self._num_tags)",
                            "Call"
                        ],
                        [
                            "self.tag_prep(loaded_tags, self._num_tags + 1)",
                            "Call"
                        ],
                        [
                            "tf.strided_slice(tags, [0, 0], [-1, -1], [windows_per_song, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['tags'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(where), axis=1, name='squeeze_indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tags_reduction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_288": {
                "variable": {
                    "value": "scale_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_289": {
                "variable": {
                    "value": "scale_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_290": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scale_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(songs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(songs)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_291": {
                "variable": {
                    "value": "norm_song",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(scale_max, scale_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "InputGenerator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_157": {
                "name": {
                    "value": "Decoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "original_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.decode_raw(data['song'], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "original_songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.float64), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._max_samples, self._sample_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.decode_raw(data['song'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "SamplePrep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_184": {
                "variable": {
                    "value": "clipped_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, start_red]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_186": {
                "variable": {
                    "value": "clipped_songs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, start_red, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_198": {
                "name": {
                    "value": "Shuffle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_200": {
                "variable": {
                    "value": "(features, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[songs, tags]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "self._batch_size * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "songs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_prep(loaded_songs)",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.stack(windowed_songs, name='StackedSongs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(songs, [-1, windows_per_song, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "self.normalize(songs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(original_songs, [-1, self._max_samples, self._sample_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['song'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._split_nums",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "feature_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_231": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_prep(loaded_tags, self._num_tags)",
                            "Call"
                        ],
                        [
                            "self.tag_prep(loaded_tags, self._num_tags + 1)",
                            "Call"
                        ],
                        [
                            "tf.strided_slice(tags, [0, 0], [-1, -1], [windows_per_song, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.decode_raw(data['tags'], tf.int32), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._split_nums",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "targets_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_244": {
                "name": {
                    "value": "SetShape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "TagPrep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_271": {
                "name": {
                    "value": "FilterUnused",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_287": {
                "name": {
                    "value": "InputNormalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_raw_164": {
                "input_bytes": {
                    "value": "data['tags']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_229": {
                "name": {
                    "value": "SplitBatch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_273": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_274": {
                "condition": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(target_sums, tf.constant(0, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_159": {
                "input_bytes": {
                    "value": "data['song']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_163": {
                "input_bytes": {
                    "value": "data['song']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_144": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_145": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cloud/trainer/models.py": {
        "tensorflow": {
            "AdadeltaOptimizer_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_25": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_123": {
                "variable": {
                    "value": "predictions_per_tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.nn.sigmoid(logits, name='probs'))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_124": {
                "variable": {
                    "value": "targets_per_tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "targets_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "fnw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "false_negatives_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_148": {
                "variable": {
                    "value": "weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(fnw, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "false_p_coefficient",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(logits, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, tf.multiply(fnw, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_150": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=-1, name='mergingLogits'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_151": {
                "variable": {
                    "value": "log_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.constant(1.0), tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_153": {
                "variable": {
                    "value": "error_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(false_p_coefficient, false_n_coefficient)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.add(tf.constant(1.0), tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.subtract(false_p_coefficient, false_n_coefficient), log_exp)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_155": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(error_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(error, balancing_weights_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(error)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "balancing_weights_vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(error_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(error, balancing_weights_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(error)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_178": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_181": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_184": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_191": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_192": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_195": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_196": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_199": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_clsp.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_211": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_214": {
                "variable": {
                    "value": "output_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL_OUT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_clsp.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_226": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_227": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_229": {
                "variable": {
                    "value": "output_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL_OUT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_clsp.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_241": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_242": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_244": {
                "variable": {
                    "value": "output_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL_OUT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_clsp.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_256": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltnsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_clsp, [int(out_clsp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_257": {
                "variable": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_259": {
                "variable": {
                    "value": "output_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fclsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 2500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_fltnsp, 1500, activation=tf.nn.elu, name='FCSL')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fclsp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL_OUT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_288": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_290": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_321": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_323": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_333": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_354": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_355": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_356": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_369": {
                "variable": {
                    "value": "out_mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(in_layer, depth, [1, filter_length], stride=[1, filter_stride], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, pool_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling1d_404": {
                "variable": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_413": {
                "variable": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_416": {
                "variable": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_MP2.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_419": {
                "variable": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_MP2, [int(out_MP2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_MP2, [int(out_MP2.shape[0]), -1], name=name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_422": {
                "variable": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_439": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_448": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_451": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_454": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_457": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_488": {
                "variable": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_497": {
                "variable": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_MP2.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_503": {
                "variable": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_MP2, [int(out_MP2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_MP2, [int(out_MP2.shape[0]), -1], name=name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_504": {
                "variable": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_507": {
                "variable": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_508": {
                "variable": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FCL1, output_size, activation=tf.identity, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out_FCL1, 200, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL2, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pooling1d_539": {
                "variable": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_572": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_581": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_584": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_587": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_590": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_593": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_615": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_624": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_627": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_630": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_633": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_636": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "get_collection_38": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_fn_74": {
                "variable": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda w: model(w)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "MapModels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "list(range(1, num_classes + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_163": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.constant(factor, dtype=tf.float32), tf.log(class_weights))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_205": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_206": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_207": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_220": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_221": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_222": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_235": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_236": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_237": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_250": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_251": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_252": {
                "variable": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_clsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 50, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_clsp, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_clsp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_275": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_315": {
                "variable": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_335": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_348": {
                "variable": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_363": {
                "variable": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, filter_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, filter_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_388": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_394": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_395": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_399": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_400": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_401": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_408": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_409": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_410": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_434": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_435": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_436": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_443": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_444": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_445": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_472": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_478": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_479": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_483": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_484": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_485": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_492": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_493": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_494": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_523": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_529": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_530": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_534": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_535": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_536": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_543": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_544": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_545": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_561": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_562": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_563": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_567": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_568": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_569": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_576": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_577": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_578": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_604": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_605": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_606": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_610": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_611": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_612": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_619": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_620": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_621": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_89": {
                "variable": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda w: model(w)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "MapModels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda w: model(w), elems=data_batch, back_prop=True, parallel_iterations=PARALLEL_ITERS, swap_memory=True, name='MapModels')",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda w: model(w), elems=data_batch, back_prop=True, parallel_iterations=PARALLEL_ITERS, swap_memory=True, name='MapModels')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "averageLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_148": {
                "x": {
                    "value": "fnw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(false_negatives_weight, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_149": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=-1, name='mergingLogits'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_151": {
                "x": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_153": {
                "x": {
                    "value": "false_p_coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.maximum(logits, tf.constant(0.0)), weighting)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "false_n_coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(weighting, tf.multiply(logits, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "CL1_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "CL1_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "CL1_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "CL1_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "CL7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "CL7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "conv_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_398": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_407": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_433": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_471": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_482": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_491": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_522": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_533": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_542": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_560": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_566": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_575": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_603": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_618": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ]
                    ]
                }
            },
            "name_scope_30": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_loss_36": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_sigmoid_cross_entropy(logits=logits, labels=targets_batch, false_negatives_weight=TRUE_POSITIVE_FACTOR, balancing_weights_vector=class_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "tf.unstack(logits_array)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "mergingLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_149": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_151": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_152": {
                "x": {
                    "value": "tf.multiply(tf.constant(-1.0), tf.abs(logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_163": {
                "x": {
                    "value": "tf.constant(factor, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(class_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_54": {
                "name": {
                    "value": "training_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_sigmoid_cross_entropy(logits=logits, labels=targets_batch, false_negatives_weight=TRUE_POSITIVE_FACTOR, balancing_weights_vector=class_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_61": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(logits, name='probs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_83": {
                "value": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda w: model(w), elems=data_batch, back_prop=True, parallel_iterations=PARALLEL_ITERS, swap_memory=True, name='MapModels')",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda w: model(w), elems=data_batch, back_prop=True, parallel_iterations=PARALLEL_ITERS, swap_memory=True, name='MapModels')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_152": {
                "x": {
                    "value": "tf.constant(-1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_163": {
                "value": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_164": {
                "x": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "balancing_weights(50, 'log', TAG_BALANCING_FACTOR)",
                            "Call"
                        ],
                        [
                            "tf.constant(list(range(1, num_classes + 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(tf.constant(factor, dtype=tf.float32), tf.log(class_weights)), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_51": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_152": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_152": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=-1, name='mergingLogits'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_47": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=-1, name='mergingLogits'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cloud/trainer/models_mgpu.py": {
        "tensorflow": {
            "AdadeltaOptimizer_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_24": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_184": {
                "variable": {
                    "value": "predictions_per_tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tower_predictions, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_185": {
                "variable": {
                    "value": "targets_per_tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "targets_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "fnw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "false_negatives_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "variable": {
                    "value": "weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(fnw, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_210": {
                "variable": {
                    "value": "false_p_coefficient",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(logits, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, tf.multiply(fnw, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_211": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=1, name='mergingLogits'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_212": {
                "variable": {
                    "value": "log_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.constant(1.0), tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_214": {
                "variable": {
                    "value": "error_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(false_p_coefficient, false_n_coefficient)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.add(tf.constant(1.0), tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.subtract(false_p_coefficient, false_n_coefficient), log_exp)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_216": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(error_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(error, balancing_weights_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(error)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "balancing_weights_vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(error_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(error, balancing_weights_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(error)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_249": {
                "variable": {
                    "value": "out_mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(in_layer, depth, [1, filter_length], stride=[1, filter_stride], scope='conv', rate=dil_rate, activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(in_layer, depth, [1, filter_length], stride=[1, filter_stride], scope='conv', rate=dil_rate, activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, pool_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "out_mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(in_layer, depth, [1, filter_length], stride=[1, filter_stride], scope='conv', rate=dil_rate, activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(in_layer, depth, [1, filter_length], stride=[1, filter_stride], scope='conv', rate=dil_rate, activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, pool_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_312": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_315": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_318": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_325": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_326": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_329": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_330": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_333": {
                "variable": {
                    "value": "superpool_outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "superpool_outputs['FCSL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "out_fltn_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1_sp, name='batchNorm', training=True, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1_sp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_cl1_sp.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_346": {
                "variable": {
                    "value": "out_fcl2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_cl1_sp, [int(out_cl1_sp.shape[0]), -1], name='FLTN_SP')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_347": {
                "variable": {
                    "value": "out_fcl2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_fcl2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltn_sp, 1500, activation=tf.nn.elu, name='FCSL2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fcl2_sp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_349": {
                "variable": {
                    "value": "output_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fcl2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltn_sp, 1500, activation=tf.nn.elu, name='FCSL2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_fcl2_sp, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCSL3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling1d_376": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_385": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_391": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_394": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_397": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_419": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_428": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_434": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_437": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_440": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_477": {
                "variable": {
                    "value": "out_mp1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_cl1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_486": {
                "variable": {
                    "value": "out_mp2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_mp1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_mp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_cl3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_mp2.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_492": {
                "variable": {
                    "value": "out_fcl1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_495": {
                "variable": {
                    "value": "out_fcl2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fcl1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_fltn, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_512": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling2d_521": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['CL2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_524": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs['MP2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(outputs['MP2'].shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_527": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FLTN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_530": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs['FCL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ],
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_563": {
                "variable": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "max_pooling1d_572": {
                "variable": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_575": {
                "variable": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_MP2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL3, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_MP2.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dense_578": {
                "variable": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FLTN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_MP2, [int(out_MP2.shape[0]), -1], name=name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_579": {
                "variable": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_582": {
                "variable": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_FCL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FLTN, 1000, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "dropout_583": {
                "variable": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_FCL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out_FCL1, 200, activation=tf.identity, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out_FCL2, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pooling1d_616": {
                "variable": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "expand_dims_637": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_652": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_653": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_654": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_664": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_679": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_680": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_681": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_691": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_706": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_707": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_708": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_718": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_739": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_740": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_741": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_751": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_772": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_773": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_774": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_784": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_805": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_806": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_807": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_822": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_837": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_838": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_839": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_849": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_864": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_865": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_866": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_876": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_891": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_892": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_893": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_908": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_914": {
                "variable": {
                    "value": "out_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l2a, out_l2b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_919": {
                "variable": {
                    "value": "out_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l3a, out_l3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_926": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_927": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_928": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_938": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_947": {
                "variable": {
                    "value": "out_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l2a, out_l2b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_955": {
                "variable": {
                    "value": "out_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l3a, out_l3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_962": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_963": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_964": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_974": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_982": {
                "variable": {
                    "value": "out_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l2a, out_l2b, out_l2c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_989": {
                "variable": {
                    "value": "out_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l3a, out_l3b, out_l3c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_996": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_997": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_998": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1008": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1011": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l1a, out_l1b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1016": {
                "variable": {
                    "value": "out_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l2a, out_l2b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1021": {
                "variable": {
                    "value": "out_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l3a, out_l3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_1028": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1029": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_1030": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1040": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1043": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l1a, out_l1b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_1052": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1053": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_1054": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1064": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1070": {
                "variable": {
                    "value": "out_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l2ab, out_l2b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1075": {
                "variable": {
                    "value": "out_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l3ab, out_l3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1080": {
                "variable": {
                    "value": "out_l4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l4ab, out_l4b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1085": {
                "variable": {
                    "value": "out_l5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l5ab, out_l5b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1090": {
                "variable": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_l6ab, out_l6b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_1094": {
                "variable": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(out_l6, 512, [1, 4], stride=[1, 4], scope='conv', activation_fn=tf.nn.elu, normalizer_fn=tf.contrib.layers.batch_norm)",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l6, 512, 4, 1, 'CL7', 2, 2, 'MP6')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1095": {
                "variable": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(out_l7)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(out_drop.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FLTN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_1096": {
                "variable": {
                    "value": "out_fcl",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_fltn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out_mp2, [int(out_mp2.shape[0]), -1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_drop, [int(out_drop.shape[0]), -1], name='FLTN')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FCL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tower_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "merged_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(values=tower_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_121": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_223": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "list(range(1, num_classes + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_224": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.constant(factor, dtype=tf.float32), tf.log(class_weights))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_242": {
                "variable": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, filter_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, filter_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "rate": {
                    "value": "dil_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_264": {
                "variable": {
                    "value": "out_cl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, filter_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, filter_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "rate": {
                    "value": "dil_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_294": {
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, pool_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_300": {
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, pool_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv1d_339": {
                "variable": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_341": {
                "variable": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1_sp, name='batchNorm', training=True, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1_sp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_342": {
                "variable": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_cl1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data, 32, 3, strides=1, activation=None, name='conv', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1_sp, name='batchNorm', training=True, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1_sp, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_365": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_366": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_367": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_371": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_372": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_373": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_380": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_381": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_382": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_408": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_409": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_410": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_414": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['CL1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_415": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_416": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_423": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_424": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_425": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_461": {
                "variable": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_467": {
                "variable": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_468": {
                "variable": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_472": {
                "variable": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cl1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_473": {
                "variable": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_cl1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_474": {
                "variable": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_cl2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_cl1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_481": {
                "variable": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_mp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_cl2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_482": {
                "variable": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_mp1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_483": {
                "variable": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_cl3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_mp1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_cl3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_cl3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_507": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_508": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_509": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_516": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['MP1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_517": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_518": {
                "variable": {
                    "value": "outputs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(data, 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(superpool_outputs['FCSL1'], 600, activation=tf.nn.elu, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, 4, 16, strides=16, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['CL1'], 8, 8, strides=4, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs['MP1'], 12, 4, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 4, [16, 1], strides=[16, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['CL1'], 8, [8, 1], strides=[4, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 12, [4, 1], strides=[1, 1], activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data_batch, 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(outputs['MP1'], 32, (8, 1), strides=(1, 1), activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output, name='batchNorm', training=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_547": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_553": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_554": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_558": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_559": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_560": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_567": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_568": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_569": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_600": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filt_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "filt_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_606": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_607": {
                "variable": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_611": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CL1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(data_batch, filt_depth, filt_length, strides=stride_length, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL1, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL1, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_612": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_613": {
                "variable": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_CL1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL2, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL2, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_620": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_MP1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out_CL2, pool_size=4, strides=4, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_621": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_622": {
                "variable": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_CL3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(out_MP1, 32, 8, strides=1, activation=None, name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(out_CL3, name='batchNorm', training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out_CL3, name='nonLin')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nonLin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_639": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_666": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_693": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_720": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_733": {
                "variable": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "tf.concat([out_l6ab, out_l6b], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_753": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_766": {
                "variable": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "tf.concat([out_l6ab, out_l6b], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_786": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_799": {
                "variable": {
                    "value": "out_l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 2, 2, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "conv_max_layers_1d(out_l5, 256, 4, 1, 'CL6', 4, 4, 'MP5')",
                            "Call"
                        ],
                        [
                            "tf.concat([out_l6ab, out_l6b], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_824": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_851": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_878": {
                "variable": {
                    "value": "out_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(data_batch, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_loss_69": {
                "loss": {
                    "value": "merged_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_209": {
                "x": {
                    "value": "fnw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(false_negatives_weight, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_210": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=1, name='mergingLogits'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_212": {
                "x": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(tf.multiply(tf.constant(-1.0), tf.abs(logits)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_214": {
                "x": {
                    "value": "false_p_coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.maximum(logits, tf.constant(0.0)), weighting)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "false_n_coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(weighting, tf.multiply(logits, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "conv_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "conv_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "conv_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "input": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, filter_length]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, filter_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "rate": {
                    "value": "dil_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "CL1_SP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_407": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_460": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_471": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_480": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_506": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_515": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_546": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_566": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_599": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_610": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_619": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'FCSL1'",
                            "str"
                        ],
                        [
                            "'FCSL2'",
                            "str"
                        ],
                        [
                            "'FCSL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'FCL3'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ],
                        [
                            "'MP2'",
                            "str"
                        ],
                        [
                            "'FLTN'",
                            "str"
                        ],
                        [
                            "'FCL1'",
                            "str"
                        ],
                        [
                            "'FCL2'",
                            "str"
                        ],
                        [
                            "'CL1'",
                            "str"
                        ],
                        [
                            "'CL2'",
                            "str"
                        ],
                        [
                            "'MP1'",
                            "str"
                        ],
                        [
                            "'CL3'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_638": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_665": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_692": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_719": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_732": {
                "name_or_scope": {
                    "value": "CL7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_752": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_765": {
                "name_or_scope": {
                    "value": "CL7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_785": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_798": {
                "name_or_scope": {
                    "value": "CL7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_823": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_850": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_877": {
                "name_or_scope": {
                    "value": "CL1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "training_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "merged_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_93": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tower_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "targets_super_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_142": {
                "variable": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda w: model(w, mode)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "MapModels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda w: model(w, mode), elems=data_batch, back_prop=True, parallel_iterations=12, swap_memory=True, name='MapModels')",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda w: model(w, mode), elems=data_batch, back_prop=True, parallel_iterations=12, swap_memory=True, name='MapModels')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "averageLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_210": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_212": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_213": {
                "x": {
                    "value": "tf.multiply(tf.constant(-1.0), tf.abs(logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_224": {
                "x": {
                    "value": "tf.constant(factor, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(class_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_225": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "GPU",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_52": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_84": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_152": {
                "variable": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda w: model(w, mode)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_super_batch[GPU_IDX]",
                            "Subscript"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "MapModels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_213": {
                "x": {
                    "value": "tf.constant(-1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_224": {
                "value": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_225": {
                "x": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "balancing_weights(50, 'log', TAG_BALANCING_FACTOR)",
                            "Call"
                        ],
                        [
                            "tf.constant(list(range(1, num_classes + 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(tf.constant(factor, dtype=tf.float32), tf.log(class_weights)), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "GPU.replace('/', '').replace(':', '_')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_80": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_213": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_213": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=1, name='mergingLogits'))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "tower_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_159": {
                "values": {
                    "value": "tf.unstack(logits_array)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "mergingLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "tower_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "prediction_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(model, data_batch, window, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "model(data_batch, mode)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits_array, axis=0, name='averageLogits')",
                            "Call"
                        ],
                        [
                            "superpool_c(tf.stack(tf.unstack(logits_array), axis=1, name='mergingLogits'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_159": {
                "value": {
                    "value": "logits_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda w: model(w, mode), elems=data_batch, back_prop=True, parallel_iterations=12, swap_memory=True, name='MapModels')",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda w: model(w, mode), elems=data_batch, back_prop=True, parallel_iterations=12, swap_memory=True, name='MapModels')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "tower_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "round_63": {
                "x": {
                    "value": "prediction_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits, name='probs')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cloud/trainer/task.py": {
        "tensorflow": {
            "set_verbosity_23": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ClusterSpec_384": {
                "variable": {
                    "value": "cluster_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('cluster')",
                            "Call"
                        ]
                    ]
                }
            },
            "Server_385": {
                "variable": {
                    "value": "server",
                    "type": "variable",
                    "possible_values": []
                },
                "server_or_cluster_def": {
                    "value": "cluster_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ClusterSpec(cluster)",
                            "Call"
                        ]
                    ]
                },
                "job_name": {
                    "value": "job_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('task', {}).get('type')",
                            "Call"
                        ]
                    ]
                },
                "task_index": {
                    "value": "task_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('task', {}).get('index')",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_93": {
                "variable": {
                    "value": "self._file_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(checkpoint_dir, 'eval')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Coordinator_129": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "clean_stop_exception_types": {
                    "value": "(tf.errors.CancelledError, tf.errors.OutOfRangeError)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_238": {
                "variable": {
                    "value": "evaluation_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_366": {
                "msg": {
                    "value": "Setting up the server",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_374": {
                "msg": {
                    "value": "'CONFIG: {}'.format(tf_config_json)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "warn_495": {
                "msg": {
                    "value": "'Unknown arguments: {}'.format(unknown)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_75": {
                "variable": {
                    "value": "self._summary_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_79": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_83": {
                "variable": {
                    "value": "self._gs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_148": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_149": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_313": {
                "variable": {
                    "value": "train_file_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(job_dir, 'eval')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_316": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_328": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "clean_stop_exception_types": {
                    "value": "(tf.errors.CancelledError, tf.errors.OutOfRangeError)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RunOptions_340": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_341": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_114": {
                "variable": {
                    "value": "latest",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_131": {
                "graph": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "start_queue_runners_143": {
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_151": {
                "msg": {
                    "value": "'Starting Evaluation For Step: {}'.format(train_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_169": {
                "msg": {
                    "value": "'Eval complete. Step: {}'.format(eval_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_283": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(cluster=cluster_spec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_317": {
                "master": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "job_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "hooks": {
                    "value": "hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[EvaluationRunHook(job_dir, metrics, evaluation_graph, eval_frequency, eval_steps=eval_steps)]",
                            "List"
                        ]
                    ]
                },
                "save_checkpoint_secs": {
                    "value": "TRAIN_CHECKPOINT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "int"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "TRAIN_SUMMARIES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "int"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "start_queue_runners_332": {
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_70": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "replica_device_setter_283": {
                "cluster": {
                    "value": "cluster_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ClusterSpec(cluster)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_327": {
                "msg": {
                    "value": "Starting coordinator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_331": {
                "msg": {
                    "value": "Starting queue runners",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_337": {
                "msg": {
                    "value": "Evaluating initial step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_345": {
                "msg": {
                    "value": "Starting training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_104": {
                "msg": {
                    "value": "running eval after run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_131": {
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_323": {
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_162": {
                "msg": {
                    "value": "'On Evaluation Step: {}'.format(eval_step)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cloud/trainer/task_mgpu.py": {
        "tensorflow": {
            "set_verbosity_21": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ClusterSpec_401": {
                "variable": {
                    "value": "cluster_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('cluster')",
                            "Call"
                        ]
                    ]
                }
            },
            "Server_402": {
                "variable": {
                    "value": "server",
                    "type": "variable",
                    "possible_values": []
                },
                "server_or_cluster_def": {
                    "value": "cluster_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ClusterSpec(cluster)",
                            "Call"
                        ]
                    ]
                },
                "job_name": {
                    "value": "job_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('task', {}).get('type')",
                            "Call"
                        ]
                    ]
                },
                "task_index": {
                    "value": "task_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_config_json.get('task', {}).get('index')",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_103": {
                "variable": {
                    "value": "self._file_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(checkpoint_dir, 'eval')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Coordinator_139": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "clean_stop_exception_types": {
                    "value": "(tf.errors.CancelledError, tf.errors.OutOfRangeError)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GPUOptions_141": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "GPU_MEMORY_FRACTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "Graph_260": {
                "variable": {
                    "value": "evaluation_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_336": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "GPU_MEMORY_FRACTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "info_384": {
                "msg": {
                    "value": "Setting up the server",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warn_519": {
                "msg": {
                    "value": "'Unknown arguments: {}'.format(unknown)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_85": {
                "variable": {
                    "value": "self._summary_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_93": {
                "variable": {
                    "value": "self._gs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_161": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_162": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_303": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_341": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_353": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "clean_stop_exception_types": {
                    "value": "(tf.errors.CancelledError, tf.errors.OutOfRangeError)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "latest_checkpoint_124": {
                "variable": {
                    "value": "latest",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_142": {
                "graph": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_149": {
                "msg": {
                    "value": "Initializing locals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_156": {
                "msg": {
                    "value": "Starting evaluation queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "start_queue_runners_157": {
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_165": {
                "msg": {
                    "value": "'Starting Evaluation For Step: {}'.format(train_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_184": {
                "msg": {
                    "value": "'Eval complete. Step: {}'.format(eval_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_261": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_342": {
                "master": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "job_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "hooks": {
                    "value": "hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[EvaluationRunHook(job_dir, metrics, evaluation_graph, eval_frequency, eval_steps=eval_steps)]",
                            "List"
                        ]
                    ]
                },
                "save_checkpoint_secs": {
                    "value": "TRAIN_CHECKPOINT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "int"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "TRAIN_SUMMARIES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "int"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options, log_device_placement=True, allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "start_queue_runners_358": {
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator(clean_stop_exception_types=(tf.errors.CancelledError, tf.errors.OutOfRangeError))",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_76": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_83": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_114": {
                "msg": {
                    "value": "running eval after run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_142": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=GPU_MEMORY_FRACTION)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=GPU_MEMORY_FRACTION)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_348": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=GPU_MEMORY_FRACTION)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=GPU_MEMORY_FRACTION)",
                            "Call"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "'On Evaluation Step: {}'.format(eval_step)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pydst/extract_ds_fbanks_tfr.py": {
        "tensorflow": {
            "Feature_33": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_36": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_128": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "root + setname + '_fbanksdata.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_33": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_36": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_149": {
                "variable": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'num_samples': _int64_feature(num_samples), 'sample_depth': _int64_feature(sample_depth), 'num_tags': _int64_feature(num_tags), 'tags': _bytes_feature(tags_string), 'song': _bytes_feature(song_samples_sting)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_149": {
                "feature": {
                    "value": "{'num_samples': _int64_feature(num_samples), 'sample_depth': _int64_feature(sample_depth), 'num_tags': _int64_feature(num_tags), 'tags': _bytes_feature(tags_string), 'song': _bytes_feature(song_samples_sting)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "pydst/extract_ds_tfr.py": {
        "tensorflow": {
            "Feature_35": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_130": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "root + setname + '_rawdata.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_35": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_38": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_148": {
                "variable": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'num_samples': _int64_feature(num_samples), 'sample_depth': _int64_feature(sample_depth), 'num_tags': _int64_feature(num_tags), 'tags': _bytes_feature(tags_string), 'song': _bytes_feature(song_samples_sting)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_148": {
                "feature": {
                    "value": "{'num_samples': _int64_feature(num_samples), 'sample_depth': _int64_feature(sample_depth), 'num_tags': _int64_feature(num_tags), 'tags': _bytes_feature(tags_string), 'song': _bytes_feature(song_samples_sting)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "pydst/extract_dsw_fbanks_tfr.py": {
        "tensorflow": {
            "Feature_33": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_36": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_128": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "root + setname + '_win_fbanksdata.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_33": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_36": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_149": {
                "variable": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'tags': _bytes_feature(tags_string), 'song': _bytes_feature(window_samples_string)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_149": {
                "feature": {
                    "value": "{'tags': _bytes_feature(tags_string), 'song': _bytes_feature(window_samples_string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "pydst/extract_dsw_tfr.py": {
        "tensorflow": {
            "Feature_35": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_130": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "root + setname + '_win_rawdata.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_35": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_38": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_150": {
                "variable": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'tags': _bytes_feature(tags_string), 'song': _bytes_feature(window_samples_string)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_150": {
                "feature": {
                    "value": "{'tags': _bytes_feature(tags_string), 'song': _bytes_feature(window_samples_string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}