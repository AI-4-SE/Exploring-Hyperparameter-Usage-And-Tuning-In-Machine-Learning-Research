{
    "helpers.py": {
        "sklearn": {
            "train_test_split_79": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_80": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_91": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_92": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_455": {
                "variable": {
                    "value": "gpu_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_477": {
                "variable": {
                    "value": "loaders[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.MNIST(root=root, train=True, transform=trans, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=root, train=True, transform=trans_train, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root=temp_root, split='train', transform=trans, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=root, train=True, transform=trans_train, download=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(X_train), target_type(y_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(X_train), target_type(y_train))",
                            "Call"
                        ],
                        [
                            "image_datasets['train']",
                            "Subscript"
                        ],
                        [
                            "image_datasets['train']",
                            "Subscript"
                        ],
                        [
                            "get_dataset(name=ds_name, target_type=torch.FloatTensor, test_size=0.0)",
                            "Call"
                        ],
                        [
                            "get_dataset(name=ds_name, target_type=torch.LongTensor, target_shape=(-1, 1), model=model)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "gpu_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nworkers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_613": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_614": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('lr', 0.1)",
                            "Call"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "(1 - 2 * alpha) * eta_max + 2 * alpha * eta_min",
                            "BinOp"
                        ],
                        [
                            "(2 - 2 * alpha) * eta_min + (2 * alpha - 1) * eta_max",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('wd', 0.0001)",
                            "Call"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "Adagrad_195": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('lr', 0.1)",
                            "Call"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "(1 - 2 * alpha) * eta_max + 2 * alpha * eta_min",
                            "BinOp"
                        ],
                        [
                            "(2 - 2 * alpha) * eta_min + (2 * alpha - 1) * eta_max",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('wd', 0.0001)",
                            "Call"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_441": {
                "seed": {
                    "value": "random.randint(0, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_442": {
                "seed": {
                    "value": "random.randint(0, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_474": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=trans, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=root, train=False, transform=trans_test, download=False)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root=temp_root, split='test', transform=trans, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=root, train=False, transform=trans_test, download=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(X_test), target_type(y_test))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(X_test), target_type(y_test))",
                            "Call"
                        ],
                        [
                            "image_datasets['val']",
                            "Subscript"
                        ],
                        [
                            "image_datasets['val']",
                            "Subscript"
                        ],
                        [
                            "get_dataset(name=ds_name, target_type=torch.FloatTensor, test_size=0.0)",
                            "Call"
                        ],
                        [
                            "get_dataset(name=ds_name, target_type=torch.LongTensor, target_shape=(-1, 1), model=model)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "gpu_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nworkers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_265": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adagrad(model.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "Lookahead(optimizer, k=5, alpha=0.5)",
                            "Call"
                        ],
                        [
                            "Sls(model.parameters(), n_batches_per_epoch=hyper['n_batches_per_epoch'], init_step_size=hyper['init_step_size'])",
                            "Call"
                        ],
                        [
                            "CGQ(model.parameters(), lr=lr, momentum=momentum, nesterov=nesterov, weight_decay=wd, est_bound=hyper['est_bound'], est_step_size=hyper['est_step_size'], est_window=hyper['est_window'], mbound=hyper['mbound'], polak_ribiere=hyper['polak_ribiere'], interp=hyper['interp'], ls_prob=hyper['ls_prob'])",
                            "Call"
                        ],
                        [
                            "AdamQ(model.parameters(), lr=lr, weight_decay=wd, est_bound=hyper['est_bound'], est_step_size=hyper['est_step_size'], est_window=hyper['est_window'], mbound=hyper['mbound'], polak_ribiere=hyper['polak_ribiere'], interp=hyper['interp'])",
                            "Call"
                        ],
                        [
                            "AdagradQ(model.parameters(), lr=lr, weight_decay=wd, est_bound=hyper['est_bound'], est_step_size=hyper['est_step_size'], est_window=hyper['est_window'], mbound=hyper['mbound'], polak_ribiere=hyper['polak_ribiere'], interp=hyper['interp'])",
                            "Call"
                        ],
                        [
                            "PalOptimizer(model.parameters(), writer=None, measuring_step_size=hyper['est_step_size'], max_step_size=hyper['est_bound'], direction_adaptation_factor=momentum)",
                            "Call"
                        ],
                        [
                            "COCOB_Backprop(model.parameters(), weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, momentum=momentum, nesterov=nesterov, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_84": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_85": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_96": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_97": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('lr', 0.1)",
                            "Call"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "(1 - 2 * alpha) * eta_max + 2 * alpha * eta_min",
                            "BinOp"
                        ],
                        [
                            "(2 - 2 * alpha) * eta_min + (2 * alpha - 1) * eta_max",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ],
                        [
                            "factor * base_lr",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('momentum', 0.9)",
                            "Call"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('nesterov', momentum > 0)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyper.setdefault('wd', 0.0001)",
                            "Call"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "models/densenet.py": {
        "torch": {
            "ReLU_28": {
                "variable": {
                    "value": "self.relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_83": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "m(features)",
                            "Call"
                        ],
                        [
                            "m(features, *args)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_181": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "m(out, *args)",
                            "Call"
                        ],
                        [
                            "self.norm(x, *args)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(out, *args)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out, *args)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm_1(x, *args)",
                            "Call"
                        ],
                        [
                            "self.relu_1(new_features)",
                            "Call"
                        ],
                        [
                            "self.conv_1(new_features, *args)",
                            "Call"
                        ],
                        [
                            "self.norm_2(new_features, *args)",
                            "Call"
                        ],
                        [
                            "self.relu_2(new_features)",
                            "Call"
                        ],
                        [
                            "self.conv_2(new_features, *args)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', Conv2d(3, num_init_features, kernel_size=3, stride=1, padding=1, bias=False, **kwargs))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3, bias=False, **kwargs)), ('norm0', BatchNorm2d(num_init_features, **kwargs)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "log_softmax_127": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "m(out)",
                            "Call"
                        ],
                        [
                            "m(out, *args)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "init_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if image_size == 28 else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_110": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_141": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/preresnet.py": {
        "torch": {
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_109": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_172": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_138": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_imagenet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_152": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_160": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "layer_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "activation_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "poolings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/wide_resnet.py": {
        "torch": {
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x, *args)",
                            "Call"
                        ],
                        [
                            "block(x, *args)",
                            "Call"
                        ],
                        [
                            "block(x, *args)",
                            "Call"
                        ],
                        [
                            "block(x, *args)",
                            "Call"
                        ],
                        [
                            "self.bn1(x, *args)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 8)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x, *args)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers.py": {
        "torch": {
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "torch.sqrt(grad_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm + torch.sum(torch.mul(g, g))",
                            "BinOp"
                        ],
                        [
                            "self.get_dp(group, do_line_search)",
                            "Call"
                        ],
                        [
                            "compute_grad_norm(grad_current)",
                            "Call"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_rng_state_422": {
                "variable": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_423": {
                "variable": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_426": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_427": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_rng_state_1043": {
                "variable": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_1044": {
                "variable": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_403": {
                "input": {
                    "value": "torch.mul(g, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_rng_state_432": {
                "new_state": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_433": {
                "new_state": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_788": {
                "variable": {
                    "value": "measuring_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "measuring_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(measuring_step_size)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_790": {
                "variable": {
                    "value": "max_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(max_step_size)",
                            "Call"
                        ],
                        [
                            "group['max_step_size']",
                            "Subscript"
                        ],
                        [
                            "3.16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_792": {
                "variable": {
                    "value": "direction_adaptation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction_adaptation_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction_adaptation_factor)",
                            "Call"
                        ],
                        [
                            "group['direction_adaptation_factor']",
                            "Subscript"
                        ],
                        [
                            "0.4",
                            "Method Argument"
                        ],
                        [
                            "direction_adaptation_factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_794": {
                "variable": {
                    "value": "update_step_adaptation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "update_step_adaptation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(update_step_adaptation)",
                            "Call"
                        ],
                        [
                            "group['update_step_adaptation']",
                            "Subscript"
                        ],
                        [
                            "1 / 0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_810": {
                "variable": {
                    "value": "directional_derivative",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_811": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_1047": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_1048": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_265": {
                "variable": {
                    "value": "param_state[last_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "d_p.add(p, alpha=weight_decay)",
                            "Call"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_269": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_num / _denom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "self.mbound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_284": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "d_p.add(p, alpha=weight_decay)",
                            "Call"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_403": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_597": {
                "variable": {
                    "value": "param_state[slow_param]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "fast.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_809": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_829": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "epsilon",
                            "variable"
                        ],
                        [
                            "norm + torch.dot(flat_grad, flat_grad)",
                            "BinOp"
                        ],
                        [
                            "epsilon",
                            "variable"
                        ],
                        [
                            "norm + torch.dot(flat_buf, flat_buf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_841": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "epsilon",
                            "variable"
                        ],
                        [
                            "norm + torch.dot(flat_grad, flat_grad)",
                            "BinOp"
                        ],
                        [
                            "epsilon",
                            "variable"
                        ],
                        [
                            "norm + torch.dot(flat_buf, flat_buf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_885": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_1053": {
                "new_state": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_1054": {
                "new_state": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_818": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_899": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_915": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iter(params.flatten())",
                            "Call"
                        ],
                        [
                            "directional_derivative",
                            "variable"
                        ],
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_915": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iter(params.flatten())",
                            "Call"
                        ],
                        [
                            "directional_derivative",
                            "variable"
                        ],
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_924": {
                "variable": {
                    "value": "s_upd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dot_827": {
                "input": {
                    "value": "flat_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buf.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "flat_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buf.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_840": {
                "input": {
                    "value": "flat_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ],
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "flat_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ],
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_826": {
                "input": {
                    "value": "flat_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ],
                        [
                            "p.grad.data.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "flat_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buf.view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_net.py": {
        "torch": {
            "get_rng_state_78": {
                "variable": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_79": {
                "variable": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "variable": {
                    "value": "gpu_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "random.randint(0, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_17": {
                "seed": {
                    "value": "random.randint(0, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "random.randint(0",
                            "Method Argument"
                        ],
                        [
                            "random.randint(0",
                            "Method Argument"
                        ],
                        [
                            "int(time.time())",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_83": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "random.randint(0",
                            "Method Argument"
                        ],
                        [
                            "random.randint(0",
                            "Method Argument"
                        ],
                        [
                            "int(time.time())",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_159": {
                "variable": {
                    "value": "orig_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "torch.sqrt(orig_norm)",
                            "Call"
                        ],
                        [
                            "orig_norm + v.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_88": {
                "new_state": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_89": {
                "new_state": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_131": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture(*mdl_args, **mdl_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "'densenet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_178": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(result_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_314": {
                "variable": {
                    "value": "temp_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "torch.sqrt(temp_norm).item()",
                            "Call"
                        ],
                        [
                            "temp_norm + (v.data - orig_dir[k]).norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_397": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_399": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_path, opt_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_345": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_path, opt_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}