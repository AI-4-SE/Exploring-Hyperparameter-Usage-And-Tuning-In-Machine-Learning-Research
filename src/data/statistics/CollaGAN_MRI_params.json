{
    "model/AEseg3d.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_seg, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_in, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.inputs_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_in * 2, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.inputs_post",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_in * 2, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.inputs_pre, self.inputs, self.inputs_post]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.is_Training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.recon, self.inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "self.l2_seg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.targets, self.segres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "self.KL_div_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(mu) + tf.square(sigma) - tf.log(tf.nn.relu(sigma) + eps) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "self.AnB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.targets[:, 0, :, :] * self.segres[:, 0, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.targets[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.segres[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "merge_all_103": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "0loss/0_KL_div_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.KL_div_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_72": {
                "name": {
                    "value": "0loss/1_L2_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "0loss/2_DICE_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dice_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_74": {
                "name": {
                    "value": "0loss/3_l2_seg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_seg_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_76": {
                "name": {
                    "value": "1dice/1WT",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.WT_dice",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "2dice/1precision",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_81": {
                "name": {
                    "value": "2dice/1recall",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recall",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_83": {
                "name": {
                    "value": "1inputs/1T1w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 0, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_84": {
                "name": {
                    "value": "1inputs/2T1contrast",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 1, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_85": {
                "name": {
                    "value": "1inputs/3T2w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 2, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_86": {
                "name": {
                    "value": "1inputs/4FLAIR",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 3, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_88": {
                "name": {
                    "value": "2recon/1T1w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.recon[:, 0, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_89": {
                "name": {
                    "value": "2recon/2T1contrast",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.recon[:, 1, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_90": {
                "name": {
                    "value": "2recon/3T2w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.recon[:, 2, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_91": {
                "name": {
                    "value": "2recon/4FLAIR",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.recon[:, 3, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_93": {
                "name": {
                    "value": "3Seg/1WT_target",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_visout(self.targets[:, 0, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_94": {
                "name": {
                    "value": "3Seg/1WT_result",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_visout(self.segres[:, 0, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_111": {
                "x": {
                    "value": "tf.transpose(inp, order) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "tf.transpose(tf.abs(inp), order) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_119": {
                "variable": {
                    "value": "lr_",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_47": {
                "x": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_58": {
                "x": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.segres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_120": {
                "name": {
                    "value": "'learning_rate/{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "lr_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(lr, global_step, self.decay_step, 0.99, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_121": {
                "learning_rate": {
                    "value": "lr_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(lr, global_step, self.decay_step, 0.99, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'Adam'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_114": {
                "a": {
                    "value": "tf.abs(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_60": {
                "x": {
                    "value": "tf.nn.relu(sigma) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_114": {
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_60": {
                "features": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/CollaGAN.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.tar_class_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.is_Training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.a_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.b_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.c_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.d_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.a_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.b_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.c_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.d_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.bool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.bool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.bool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.bool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "tmp_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nB, self.nCh_out, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_65": {
                "variable": {
                    "value": "inp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tmp_zeros",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.a_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_66": {
                "variable": {
                    "value": "inp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tmp_zeros",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.b_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_67": {
                "variable": {
                    "value": "inp3",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tmp_zeros",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.c_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "inp4",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tmp_zeros",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.d_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "input_contrasts",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp1, inp2, inp3, inp4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_71": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_contrasts, self.a_mask, self.b_mask, self.c_mask, self.d_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "cond_83": {
                "variable": {
                    "value": "cyc1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.recon",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.a_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_84": {
                "variable": {
                    "value": "cyc2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.recon",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.b_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_85": {
                "variable": {
                    "value": "cyc3_",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.recon",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.c_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_86": {
                "variable": {
                    "value": "cyc4_",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.recon",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.d_img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "cyc_inp1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tmp_zeros, cyc2_, cyc3_, cyc4_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "cyc_inp2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc1_, tmp_zeros, cyc3_, cyc4_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_90": {
                "variable": {
                    "value": "cyc_inp3_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc1_, cyc2_, tmp_zeros, cyc4_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_91": {
                "variable": {
                    "value": "cyc_inp4_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc1_, cyc2_, cyc3_, tmp_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "atmp_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_94": {
                "variable": {
                    "value": "atmp_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nB, 1, self.nY, self.nX]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "concat_95": {
                "variable": {
                    "value": "cyc_inp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc_inp1_, atmp_ones, atmp_zeros, atmp_zeros, atmp_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "cyc_inp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc_inp2_, atmp_zeros, atmp_ones, atmp_zeros, atmp_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_97": {
                "variable": {
                    "value": "cyc_inp3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc_inp3_, atmp_zeros, atmp_zeros, atmp_ones, atmp_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_98": {
                "variable": {
                    "value": "cyc_inp4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cyc_inp4_, atmp_zeros, atmp_zeros, atmp_zeros, atmp_ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "G_gan_loss_cyc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_cyc1, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "G_gan_loss_cyc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_cyc2, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "G_gan_loss_cyc3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_cyc3, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "G_gan_loss_cyc4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_cyc4, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "variable": {
                    "value": "G_gan_loss_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_rec, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "cyc_l2_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.cyc1, self.a_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "cyc_l2_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.cyc2, self.b_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "cyc_l2_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.cyc3, self.c_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "cyc_l2_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.cyc4, self.d_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "variable": {
                    "value": "l2_loss_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.recon, self.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "cyc_l1_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.cyc1, self.a_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "cyc_l1_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.cyc2, self.b_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "cyc_l1_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.cyc3, self.c_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "cyc_l1_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.cyc4, self.d_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_146": {
                "variable": {
                    "value": "cyc_l1_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cyc_l1_loss1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_147": {
                "variable": {
                    "value": "cyc_l1_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cyc_l1_loss2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_148": {
                "variable": {
                    "value": "cyc_l1_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cyc_l1_loss3",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_149": {
                "variable": {
                    "value": "cyc_l1_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cyc_l1_loss4",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "l1_loss_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.recon, self.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ssim_157": {
                "variable": {
                    "value": "ssim1",
                    "type": "Variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.cyc1[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.a_img[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_val": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ssim_158": {
                "variable": {
                    "value": "ssim2",
                    "type": "Variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.cyc2[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.b_img[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_val": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ssim_159": {
                "variable": {
                    "value": "ssim3",
                    "type": "Variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.cyc3[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.c_img[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_val": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ssim_160": {
                "variable": {
                    "value": "ssim4",
                    "type": "Variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.cyc4[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.d_img[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_val": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ssim_162": {
                "variable": {
                    "value": "ssimr",
                    "type": "Variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.recon[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.targets[0, 0, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_val": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_169": {
                "variable": {
                    "value": "cyc_ssim_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tf.log((1.0 + ssim1) / 2.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_170": {
                "variable": {
                    "value": "cyc_ssim_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tf.log((1.0 + ssim2) / 2.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_171": {
                "variable": {
                    "value": "cyc_ssim_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tf.log((1.0 + ssim3) / 2.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_172": {
                "variable": {
                    "value": "cyc_ssim_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.bool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tf.log((1.0 + ssim4) / 2.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tile_180": {
                "variable": {
                    "value": "OH_label1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.one_hot(tf.cast(0, tf.uint8), self.class_N), [-1, 1, self.class_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.nB, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "OH_label2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.one_hot(tf.cast(1, tf.uint8), self.class_N), [-1, 1, self.class_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.nB, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "OH_label3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.one_hot(tf.cast(2, tf.uint8), self.class_N), [-1, 1, self.class_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.nB, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_183": {
                "variable": {
                    "value": "OH_label4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.one_hot(tf.cast(3, tf.uint8), self.class_N), [-1, 1, self.class_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.nB, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "OH_labelT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.one_hot(tf.cast(self.tar_class_idx, tf.uint8), self.class_N), [-1, 1, self.class_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_187": {
                "variable": {
                    "value": "G_clsf_cyc_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(0, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_cyc1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_188": {
                "variable": {
                    "value": "G_clsf_cyc_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(1, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_cyc2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_189": {
                "variable": {
                    "value": "G_clsf_cyc_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(2, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_cyc3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_190": {
                "variable": {
                    "value": "G_clsf_cyc_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(3, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_cyc4",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_193": {
                "variable": {
                    "value": "G_clsf_orig_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_labelT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(self.tar_class_idx, tf.uint8), self.class_N), [-1, 1, self.class_N]), [1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_rec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_205": {
                "variable": {
                    "value": "C_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(0, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_tar1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_206": {
                "variable": {
                    "value": "C_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(1, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_tar2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_207": {
                "variable": {
                    "value": "C_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(2, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_tar3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_208": {
                "variable": {
                    "value": "C_loss4",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "OH_label4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.one_hot(tf.cast(3, tf.uint8), self.class_N), [-1, 1, self.class_N]), [self.nB, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "type_tar4",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "merge_all_340": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_383": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_437": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "variable": {
                    "value": "err_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_tar, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "err_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(RealFake_rec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "variable": {
                    "value": "cyc_real1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_tar1, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "cyc_fake1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(RealFake_cyc1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "cyc_real2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_tar2, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "variable": {
                    "value": "cyc_fake2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(RealFake_cyc2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_224": {
                "variable": {
                    "value": "cyc_real3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_tar3, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "variable": {
                    "value": "cyc_fake3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(RealFake_cyc3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_227": {
                "variable": {
                    "value": "cyc_real4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(RealFake_tar4, REAL_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "cyc_fake4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(RealFake_cyc4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_240": {
                "name": {
                    "value": "0loss/G:ganfake(0.25-0) + l1(-->0) +clsf(--0))",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.G_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_241": {
                "name": {
                    "value": "0loss/D:realfake(0.5)+clsf(1.386-->0)",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.D_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_243": {
                "name": {
                    "value": "1G/G_gan",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(G_gan_loss_orig + G_gan_loss_cyc) / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_244": {
                "name": {
                    "value": "1G/L2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(l2_loss_orig + l2_cyc_loss) / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_245": {
                "name": {
                    "value": "1G/L1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l1_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(l1_loss_orig + l1_cyc_loss) / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_246": {
                "name": {
                    "value": "1G/SSIM",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssim_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ssim_loss_orig + ssim_cyc_loss) / 4.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_247": {
                "name": {
                    "value": "1G/clsf",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(G_clsf_orig_loss + G_clsf_cyc_loss) / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_249": {
                "name": {
                    "value": "2D/D_gan_loss:REAL/FAKE(0.5)",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "D_gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(D_err + D_gan_cyc) / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_250": {
                "name": {
                    "value": "2D/C_loss(REAL)--1.386-->0",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.C_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_252": {
                "name": {
                    "value": "G_gan(0.25-0)/rec ",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss_orig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_rec, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_253": {
                "name": {
                    "value": "G_gan(0.25-0)/cyc1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss_cyc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_cyc1, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_254": {
                "name": {
                    "value": "G_gan(0.25-0)/cyc2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss_cyc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_cyc2, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_255": {
                "name": {
                    "value": "G_gan(0.25-0)/cyc3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss_cyc3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_cyc3, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "G_gan(0.25-0)/cyc4",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_gan_loss_cyc4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_cyc4, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_258": {
                "name": {
                    "value": "G_l2/rec ",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_loss_orig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(self.recon, self.targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_259": {
                "name": {
                    "value": "G_l2/cyc1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l2_loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(self.cyc1, self.a_img))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_260": {
                "name": {
                    "value": "G_l2/cyc2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l2_loss2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(self.cyc2, self.b_img))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_261": {
                "name": {
                    "value": "G_l2/cyc3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l2_loss3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(self.cyc3, self.c_img))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_262": {
                "name": {
                    "value": "G_l2/cyc4",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l2_loss4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(self.cyc4, self.d_img))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_264": {
                "name": {
                    "value": "G_l1/rec ",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l1_loss_orig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.losses.absolute_difference(self.recon, self.targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_265": {
                "name": {
                    "value": "G_l1/cyc1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.losses.absolute_difference(self.cyc1, self.a_img))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.bool0, lambda : 0.0, lambda : cyc_l1_loss1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_266": {
                "name": {
                    "value": "G_l1/cyc2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l1_loss2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.losses.absolute_difference(self.cyc2, self.b_img))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.bool1, lambda : 0.0, lambda : cyc_l1_loss2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_267": {
                "name": {
                    "value": "G_l1/cyc3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.losses.absolute_difference(self.cyc3, self.c_img))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.bool2, lambda : 0.0, lambda : cyc_l1_loss3)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_268": {
                "name": {
                    "value": "G_l1/cyc4",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_l1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.losses.absolute_difference(self.cyc4, self.d_img))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.bool3, lambda : 0.0, lambda : cyc_l1_loss4)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_270": {
                "name": {
                    "value": "G_ssim/rec ",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssimr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.ssim(self.recon[0, 0, :, :, tf.newaxis], self.targets[0, 0, :, :, tf.newaxis], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_271": {
                "name": {
                    "value": "G_ssim/cyc1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssim1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.ssim(self.cyc1[0, 0, :, :, tf.newaxis], self.a_img[0, 0, :, :, tf.newaxis], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_272": {
                "name": {
                    "value": "G_ssim/cyc2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssim2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.ssim(self.cyc2[0, 0, :, :, tf.newaxis], self.b_img[0, 0, :, :, tf.newaxis], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_273": {
                "name": {
                    "value": "G_ssim/cyc3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssim3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.ssim(self.cyc3[0, 0, :, :, tf.newaxis], self.c_img[0, 0, :, :, tf.newaxis], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_274": {
                "name": {
                    "value": "G_ssim/cyc4",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ssim4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.ssim(self.cyc4[0, 0, :, :, tf.newaxis], self.d_img[0, 0, :, :, tf.newaxis], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_277": {
                "name": {
                    "value": "G_clsf/rec_",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_orig_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_labelT, type_rec)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_278": {
                "name": {
                    "value": "G_clsf/cyc_rec_a",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_cyc_loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label1, type_cyc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_279": {
                "name": {
                    "value": "G_clsf/cyc_rec_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_cyc_loss2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label2, type_cyc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_280": {
                "name": {
                    "value": "G_clsf/cyc_rec_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_cyc_loss3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label3, type_cyc3)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_281": {
                "name": {
                    "value": "G_clsf/cyc_rec_d",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "G_clsf_cyc_loss4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label4, type_cyc4)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_283": {
                "name": {
                    "value": "D_gan_loss(bestForD:1-0.5:bestForG)/Rec_err",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "D_err",
                    "type": "Name",
                    "possible_values": [
                        [
                            "err_real + err_fake",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_284": {
                "name": {
                    "value": "D_gan_loss(bestForD:1-0.5:bestForG)/cyc1_err",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_err1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cyc_real1 + cyc_fake1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_285": {
                "name": {
                    "value": "D_gan_loss(bestForD:1-0.5:bestForG)/cyc2_err",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_err2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cyc_real2 + cyc_fake2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_286": {
                "name": {
                    "value": "D_gan_loss(bestForD:1-0.5:bestForG)/cyc3_err",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_err3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cyc_real3 + cyc_fake3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_287": {
                "name": {
                    "value": "D_gan_loss(bestForD:1-0.5:bestForG)/cyc4_err",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_err4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cyc_real4 + cyc_fake4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_289": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/Rec_err_real",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "err_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_tar, REAL_LABEL))",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tf.log(RealFake_tar + eps))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_290": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/Rec_err_fake",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "err_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(RealFake_rec))",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tf.log(1 - RealFake_rec + eps))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_291": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc1_err_real",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_real1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_tar1, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_292": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc1_err_fake",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_fake1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(RealFake_cyc1))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_293": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc2_err_real",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_real2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_tar2, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_294": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc2_err_fake",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_fake2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(RealFake_cyc2))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_295": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc3_err_real",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_real3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_tar3, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_296": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc3_err_fake",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_fake3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(RealFake_cyc3))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_297": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc4_err_real",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_real4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(RealFake_tar4, REAL_LABEL))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_298": {
                "name": {
                    "value": "D_gan_loss_detail(bestForD:0-0.25:bestForG)/cyc4_err_fake",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_fake4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(RealFake_cyc4))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_300": {
                "name": {
                    "value": "C/a_img",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "C_loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label1, type_tar1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_301": {
                "name": {
                    "value": "C/b_img",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "C_loss2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label2, type_tar2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_302": {
                "name": {
                    "value": "C/c_img",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "C_loss3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label3, type_tar3)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_303": {
                "name": {
                    "value": "C/d_img",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "C_loss4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(OH_label4, type_tar4)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_306": {
                "name": {
                    "value": "1inputs/1T1w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 0, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_307": {
                "name": {
                    "value": "1inputs/2T1contrast",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 1, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_308": {
                "name": {
                    "value": "1inputs/3T2w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 2, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_309": {
                "name": {
                    "value": "1inputs/4FLAIR",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.inputs[:, 3, tf.newaxis, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_310": {
                "name": {
                    "value": "4outputs/1Target",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis(self.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_325": {
                "name": {
                    "value": "2cycle/1T1w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc1_rgbv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tf_vis((self.cyc1 * s + self.a_img) / (s + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_326": {
                "name": {
                    "value": "2cycle/2T1contrast",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc2_rgbv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tf_vis((self.cyc2 * s + self.b_img) / (s + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_327": {
                "name": {
                    "value": "2cycle/3T2w",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc3_rgbv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tf_vis((self.cyc3 * s + self.c_img) / (s + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_328": {
                "name": {
                    "value": "2cycle/4FLAIR",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc4_rgbv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tf_vis((self.cyc4 * s2 + self.d_img) / (s2 + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_336": {
                "name": {
                    "value": "4outputs/2Recon",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_rgb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_337": {
                "name": {
                    "value": "4outputs/3errx3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_vis_abs(3 * (self.recon - self.targets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_345": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_348": {
                "x": {
                    "value": "tf.transpose(inp, order) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_351": {
                "x": {
                    "value": "tf.transpose(tf.abs(inp), order) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_357": {
                "variable": {
                    "value": "lr_",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "Constant"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_407": {
                "variable": {
                    "value": "p1_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1_C3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lReLU(Conv2d(p1_C2, self.nCh[0], 'p1_C3', reg=reg_, use_bias=self.use_bias), name='p1c3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nCh[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k, self.k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg_",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=self.w_decay) if self.w_decay > 0 else None",
                            "IfExp"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=self.w_decay_D) if self.w_decay_D > 0 else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "p1_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pooling2d_411": {
                "variable": {
                    "value": "p2_P",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "p2_C1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2d(input, self.nCh[0], 'p2_C1', reg=reg_, use_bias=self.use_bias)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "p2_P",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pooling2d_413": {
                "variable": {
                    "value": "p2_P2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "p2_C2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2d(p2_P, self.nCh[1], 'p2_C2', reg=reg_, use_bias=self.use_bias)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "p2_P2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_417": {
                "variable": {
                    "value": "p3_P",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nCh[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k, self.k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg_",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=self.w_decay) if self.w_decay > 0 else None",
                            "IfExp"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=self.w_decay_D) if self.w_decay_D > 0 else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "p3_P",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_423": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p1_out, p2_out, p3_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_428": {
                "variable": {
                    "value": "dropout_cat_P2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_P2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lReLU(Conv2d2x2(cat_P, kernel_size=self.k, ch_out=self.nCh[4], reg=reg_, name='cat_P2'), name='catP2')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_Training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_429": {
                "variable": {
                    "value": "RF_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dropout_cat_P2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(cat_P2, rate=self.dropout_ratio, training=is_Training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RF_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_433": {
                "variable": {
                    "value": "dropout_cat_P3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_P3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lReLU(Conv2d2x2(cat_P2, kernel_size=self.k, ch_out=self.nCh[5], reg=reg_, name='cat_P3'), name='catP3')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_Training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_434": {
                "variable": {
                    "value": "Class_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dropout_cat_P3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(cat_P3, rate=self.dropout_ratio, training=is_Training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kernel, self.kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Class_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_120": {
                "x": {
                    "value": "RealFake_cyc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "squared_difference_121": {
                "x": {
                    "value": "RealFake_cyc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "squared_difference_122": {
                "x": {
                    "value": "RealFake_cyc3",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "squared_difference_123": {
                "x": {
                    "value": "RealFake_cyc4",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "squared_difference_126": {
                "x": {
                    "value": "RealFake_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "squared_difference_130": {
                "x": {
                    "value": "self.cyc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.a_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_131": {
                "x": {
                    "value": "self.cyc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_132": {
                "x": {
                    "value": "self.cyc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.c_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_133": {
                "x": {
                    "value": "self.cyc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.d_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_136": {
                "x": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_141": {
                "labels": {
                    "value": "self.cyc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.a_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_142": {
                "labels": {
                    "value": "self.cyc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.b_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_143": {
                "labels": {
                    "value": "self.cyc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.c_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_144": {
                "labels": {
                    "value": "self.cyc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.d_img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_153": {
                "labels": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_164": {
                "x": {
                    "value": "(1.0 + ssim1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_165": {
                "x": {
                    "value": "(1.0 + ssim2) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "(1.0 + ssim3) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_167": {
                "x": {
                    "value": "(1.0 + ssim4) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_175": {
                "x": {
                    "value": "(1.0 + ssimr) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "tensor": {
                    "value": "tf.one_hot(tf.cast(0, tf.uint8), self.class_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.class_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "tensor": {
                    "value": "tf.one_hot(tf.cast(1, tf.uint8), self.class_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.class_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "tensor": {
                    "value": "tf.one_hot(tf.cast(2, tf.uint8), self.class_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.class_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "tensor": {
                    "value": "tf.one_hot(tf.cast(3, tf.uint8), self.class_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.class_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "tf.one_hot(tf.cast(self.tar_class_idx, tf.uint8), self.class_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.class_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_358": {
                "name": {
                    "value": "'learning_rate/{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "lr_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(lr, global_step, decay_step, 0.99, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_359": {
                "learning_rate": {
                    "value": "lr_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(lr, global_step, decay_step, 0.99, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'D'",
                            "MethodArgument"
                        ],
                        [
                            "'Adam'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_400": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_180": {
                "indices": {
                    "value": "tf.cast(0, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_181": {
                "indices": {
                    "value": "tf.cast(1, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_182": {
                "indices": {
                    "value": "tf.cast(2, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_183": {
                "indices": {
                    "value": "tf.cast(3, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_184": {
                "indices": {
                    "value": "tf.cast(self.tar_class_idx, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.class_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_214": {
                "x": {
                    "value": "RealFake_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_215": {
                "x": {
                    "value": "RealFake_rec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_218": {
                "x": {
                    "value": "RealFake_tar1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_219": {
                "x": {
                    "value": "RealFake_cyc1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_221": {
                "x": {
                    "value": "RealFake_tar2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_222": {
                "x": {
                    "value": "RealFake_cyc2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_224": {
                "x": {
                    "value": "RealFake_tar3",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_225": {
                "x": {
                    "value": "RealFake_cyc3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_227": {
                "x": {
                    "value": "RealFake_tar4",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "REAL_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_228": {
                "x": {
                    "value": "RealFake_cyc4",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "tf.log(RealFake_tar + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "input_tensor": {
                    "value": "tf.log(1 - RealFake_rec + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_348": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_351": {
                "a": {
                    "value": "tf.abs(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_169": {
                "x": {
                    "value": "(1.0 + ssim1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_170": {
                "x": {
                    "value": "(1.0 + ssim2) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_171": {
                "x": {
                    "value": "(1.0 + ssim3) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_172": {
                "x": {
                    "value": "(1.0 + ssim4) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_181": {
                "x": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "self.tar_class_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_232": {
                "x": {
                    "value": "RealFake_tar + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_233": {
                "x": {
                    "value": "1 - RealFake_rec + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_351": {
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/netUtil.py": {
        "tensorflow": {
            "concat_65": {
                "variable": {
                    "value": "CC",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[C1, C3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_72": {
                "variable": {
                    "value": "CC",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[C1, C3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "Seg_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Conv2d(D3, n_seg, reg=reg_, name=name_ + 'SegOut', k=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "VAE_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "VAE_C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv2d(VAE_GR, n_out, name=name_ + '3DConvVAE', reg=reg_, use_bias=False, k=3, s=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(VAE_C, [VAE_C.shape[0], 4 * 15 * 15])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[VAE_C.shape[0], 4 * 15 * 15]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_118": {
                "variable": {
                    "value": "VAE_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "VAE_C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv2d(VAE_GR, n_out, name=name_ + '3DConvVAE', reg=reg_, use_bias=False, k=3, s=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(VAE_C, [VAE_C.shape[0], 4 * 15 * 15])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_119": {
                "variable": {
                    "value": "VAE_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "VAE_C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv2d(VAE_GR, n_out, name=name_ + '3DConvVAE', reg=reg_, use_bias=False, k=3, s=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(VAE_C, [VAE_C.shape[0], 4 * 15 * 15])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "VU__",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(z, 4 * 30 * 30)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "avgPool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "inp_MLPm",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sympara, avgPool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_146": {
                "variable": {
                    "value": "mhidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp_MLPm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([sympara, avgPool], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "nMLPm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nCh / reduction",
                            "BinOp"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_147": {
                "variable": {
                    "value": "mhidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mhidden1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(inp_MLPm, nMLPm, use_bias=True, activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "nMLPm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nCh / reduction",
                            "BinOp"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_148": {
                "variable": {
                    "value": "MLPm",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mhidden2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(mhidden1, nMLPm, use_bias=True, activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "nCh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "ch_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "MLPm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(mhidden2, nCh, use_bias=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_151": {
                "variable": {
                    "value": "refined_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ch_attention[:, :, tf.newaxis, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "ainp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp[:, 0:1, :, :], mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_160": {
                "variable": {
                    "value": "binp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp[:, 1:2, :, :], mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "cinp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp[:, 2:3, :, :], mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_162": {
                "variable": {
                    "value": "dinp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp[:, 3:4, :, :], mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_222": {
                "variable": {
                    "value": "pool4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[apool4, bpool4, cpool4, dpool4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_228": {
                "variable": {
                    "value": "down3_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adown3_2, bdown3_2, cdown3_2, ddown3_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_229": {
                "variable": {
                    "value": "CC3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[down3_2, up4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_235": {
                "variable": {
                    "value": "down2_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adown2_2, bdown2_2, cdown2_2, ddown2_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_236": {
                "variable": {
                    "value": "CC2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[down2_2, up3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_242": {
                "variable": {
                    "value": "down1_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adown1_2, bdown1_2, cdown1_2, ddown1_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_243": {
                "variable": {
                    "value": "CC1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[down1_2, up2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_249": {
                "variable": {
                    "value": "down0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adown0_2, bdown0_2, cdown0_2, ddown0_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_250": {
                "variable": {
                    "value": "CC0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[down0_2, up1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ch_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv2d_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "''.join((name, '_Conv'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "xi()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "''.join((name, '_Conv'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_20": {
                "pred": {
                    "value": "is_Training",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : li.batch_norm(x, is_training=True, epsilon=1.000001, center=True, data_format=d_form_, updates_collections=None, scope=scope)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : li.batch_norm(x, is_training=False, updates_collections=None, epsilon=1e-06, center=True, data_format=d_form_, scope=scope, reuse=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_name + '2'",
                            "BinOp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_36": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "''.join((name, '_R'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_39": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "''.join((name, '_lR'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "''.join((name, '_Conv1x1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "d_form",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "li.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "''.join((name, '_Conv2x2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_123": {
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VAE_mu + VAE_sigma * tf.random_normal(tf.shape(VAE_sigma), 0, 1, dtype=dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "4 * 30 * 30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "VU__",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.layers.dense(z, 4 * 30 * 30))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[VU__.shape[0], 4, 30, 30]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "VAE_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(VAE_C, 128)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seg_train.py": {
        "tensorflow": {
            "Saver_53": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_56": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_60": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/ckpt_dir'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FileWriter_70": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/log_dir/train'",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_71": {
                "variable": {
                    "value": "valid_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/log_dir/valid'",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_50": {
                "device_name": {
                    "value": "str_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/device:GPU:' + str(opt.gpu_ids[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_59": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Saver_56": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_58": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_62": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/ckpt_dir'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FileWriter_73": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/log_dir/train'",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_74": {
                "variable": {
                    "value": "valid_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.savepath + '/' + opt.name + '/log_dir/valid'",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_52": {
                "device_name": {
                    "value": "str_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/device:GPU:' + str(opt.gpu_ids[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_61": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "tensorflow": {
            "reduce_mean_10": {
                "variable": {
                    "value": "intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_true * p_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "variable": {
                    "value": "intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_true * p_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_17": {
                "input_tensor": {
                    "value": "p_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_11": {
                "input_tensor": {
                    "value": "p_true",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "input_tensor": {
                    "value": "p_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}