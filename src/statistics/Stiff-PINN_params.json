{
    "polution_pinn/_utils.py": {
        "torch": {
            "set_default_tensor_type_16": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_nums",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "self.dx_dt",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "possible_values": []
                },
                "out": {
                    "value": "species_count",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.dx_dt_temp",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "possible_values": []
                },
                "out": {
                    "value": "species_count",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.r",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "possible_values": []
                },
                "out": {
                    "value": "25",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "diag0",
                    "possible_values": []
                },
                "*size": {
                    "value": "25",
                    "possible_values": []
                }
            },
            "diag_126": {
                "variable": {
                    "value": "self.I0",
                    "possible_values": []
                },
                "input": {
                    "value": "diag0",
                    "possible_values": [
                        [
                            "torch.ones(25)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_127": {
                "variable": {
                    "value": "diag1",
                    "possible_values": []
                },
                "*size": {
                    "value": "species_count",
                    "possible_values": []
                }
            },
            "diag_128": {
                "variable": {
                    "value": "self.I1",
                    "possible_values": []
                },
                "input": {
                    "value": "diag1",
                    "possible_values": [
                        [
                            "torch.ones(species_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_235": {
                "input": {
                    "value": "p.grad.data",
                    "possible_values": []
                }
            },
            "norm_201": {
                "variable": {
                    "value": "grad_norm[count]",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn/config.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "cuda",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_index)",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn/pinn_model.py": {
        "torch": {
            "set_default_tensor_type_5": {
                "t": {
                    "value": "default_tensor_type",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.slope",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).fill_(slope).to(device)",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.seq",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "self.n * self.slope * input",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "y_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "y / scale",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.y0.shape[1]",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "x_rescale",
                    "possible_values": [
                        [
                            "x / self.x_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_77": {
                "input": {
                    "value": "x_rescale",
                    "possible_values": [
                        [
                            "x / self.x_scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "polution_pinn/pollution_pinn.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "t_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_np",
                    "possible_values": [
                        [
                            "np.logspace(start=order_start, stop=order_stop, num=n_steps, endpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_np",
                    "possible_values": [
                        [
                            "np.vstack(y_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_90": {
                "variable": {
                    "value": "x_scale",
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "eps_tensor",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x_all",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, x_test]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_143": {
                "variable": {
                    "value": "y_jac_indice",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_total * n_var, 2]",
                    "possible_values": []
                }
            },
            "Tensor_148": {
                "variable": {
                    "value": "loss_res_train",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_14": {
                "t": {
                    "value": "default_tensor_type",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "x_train",
                    "possible_values": []
                }
            },
            "Tensor_133": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                }
            },
            "Tensor_172": {
                "variable": {
                    "value": "rhs_all",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "pow_123": {
                "input": {
                    "value": "10",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.rand(n_grid_train, device=device).unsqueeze(-1) * delta_order",
                    "possible_values": []
                }
            },
            "pow_124": {
                "input": {
                    "value": "10",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.rand(n_grid_test, device=device).unsqueeze(-1) * delta_order",
                    "possible_values": []
                }
            },
            "arange_145": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "n_total",
                    "possible_values": [
                        [
                            "n_grid_train + n_grid_test",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_123": {
                "*size": {
                    "value": "n_grid_train",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_123": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "rand_124": {
                "*size": {
                    "value": "n_grid_test",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "grad_160": {
                "outputs": {
                    "value": "y_all_repeat[y_jac_indice[:, 0], y_jac_indice[:, 1]].sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_all_repeat",
                    "possible_values": [
                        [
                            "x_all.repeat(n_var, 1)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn/test_scipy.py": {
        "torch": {}
    },
    "polution_pinn_qssa/_utils.py": {
        "torch": {
            "set_default_tensor_type_8": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "t_tensor",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "TY_tensor",
                    "possible_values": []
                }
            },
            "numel_83": {
                "input": {
                    "value": "p.grad.data",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn_qssa/config.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "cuda",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_index)",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn_qssa/pinn_model.py": {
        "torch": {
            "set_default_tensor_type_6": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.slope",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).fill_(slope).to(device)",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.seq",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gelu_29": {
                "input": {
                    "value": "self.n * self.slope * input",
                    "possible_values": []
                }
            },
            "ones_25": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.y0.shape[1]",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_71": {
                "input": {
                    "value": "x / self.x_scale",
                    "possible_values": []
                }
            }
        }
    },
    "polution_pinn_qssa/polution_qssa.py": {
        "torch": {
            "from_numpy_137": {
                "variable": {
                    "value": "t_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_np",
                    "possible_values": [
                        [
                            "np.linspace(start=0.01, stop=60, num=n_steps, endpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_np",
                    "possible_values": [
                        [
                            "np.vstack(y_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_146": {
                "variable": {
                    "value": "y_scale",
                    "possible_values": []
                }
            },
            "Tensor_151": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                }
            },
            "MSELoss_157": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-06",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "pinn_t_list",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "t_end",
                    "possible_values": [
                        [
                            "60",
                            "Constant"
                        ],
                        [
                            "t_true.max().item()",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_grid_train",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "pinn_t_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linspace_181": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "t_end",
                    "possible_values": [
                        [
                            "60",
                            "Constant"
                        ],
                        [
                            "t_true.max().item()",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_grid_test",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "unsqueeze_181": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "grad_mean_res",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_202": {
                "variable": {
                    "value": "alpha_res",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "pinn_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pinn_data",
                    "possible_values": [
                        [
                            "MyDataSet(data=pinn_t_list, label=pinn_t_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_pinn",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "OneCycleLR_209": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), lr=learning_rate, weight_decay=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "0.001",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "1",
                    "possible_values": []
                },
                "epochs": {
                    "value": "num_epochs",
                    "possible_values": [
                        [
                            "200000",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_13": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "Tensor_198": {
                "variable": {
                    "value": "pinn_t_list",
                    "possible_values": []
                }
            },
            "Tensor_199": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_218": {
                "variable": {
                    "value": "x_all",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, x_test]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_like_223": {
                "variable": {
                    "value": "rhs_all",
                    "possible_values": []
                },
                "input": {
                    "value": "y_all",
                    "possible_values": [
                        [
                            "net(x_all).abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_224": {
                "variable": {
                    "value": "dydt_all",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs_all",
                    "possible_values": [
                        [
                            "torch.empty_like(y_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_340": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss_list': loss_list, 'x_train': to_np(pinn_t_list), 'x_test': to_np(x_test)}",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "net",
                    "possible_values": [
                        [
                            "PINN_Model(nodes=120, layers=7, y0=y0, w_scale=w_scale, x_scale=x_scale).to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "'models/robertson_pinn.pt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "grad_227": {
                "outputs": {
                    "value": "y_all[:, i].sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_all",
                    "possible_values": [
                        [
                            "torch.cat([x_train, x_test], dim=0)",
                            "Call"
                        ],
                        [
                            "x_all + 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn/_utils.py": {
        "torch": {
            "set_default_tensor_type_16": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_nums",
                    "possible_values": []
                }
            },
            "numel_101": {
                "input": {
                    "value": "p.grad.data",
                    "possible_values": []
                }
            },
            "norm_67": {
                "variable": {
                    "value": "grad_norm[count]",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn/config.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "cuda",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_index)",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn/pinn_model.py": {
        "torch": {
            "set_default_tensor_type_5": {
                "t": {
                    "value": "default_tensor_type",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.slope",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).fill_(slope).to(device)",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.seq",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "self.n * self.slope * input",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.y0.shape[1]",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "x_rescale",
                    "possible_values": [
                        [
                            "x / self.x_scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "robertson_pinn/robertson_pinn.py": {
        "torch": {
            "from_numpy_51": {
                "variable": {
                    "value": "t_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_np",
                    "possible_values": [
                        [
                            "np.logspace(start=-8, stop=-2, num=n_steps, endpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_np",
                    "possible_values": [
                        [
                            "np.vstack(y_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_75": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "x_all",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, x_test]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_121": {
                "variable": {
                    "value": "y_jac_indice",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_total * n_var, 2]",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_11": {
                "t": {
                    "value": "default_tensor_type",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "Tensor_110": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                }
            },
            "Tensor_136": {
                "variable": {
                    "value": "I1",
                    "possible_values": []
                }
            },
            "Tensor_137": {
                "variable": {
                    "value": "I2",
                    "possible_values": []
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "I3",
                    "possible_values": []
                }
            },
            "ones_like_141": {
                "variable": {
                    "value": "lambda_hat",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_res_train",
                    "possible_values": [
                        [
                            "torch.Tensor(3).to(device=device)",
                            "Call"
                        ],
                        [
                            "I1 * criterion(dydt_train[:, 0] * w_res[0], rhs_train[:, 0] * w_res[0]) + I2 * criterion(dydt_train[:, 1] * w_res[1], rhs_train[:, 1] * w_res[1]) + I3 * criterion(dydt_train[:, 2] * w_res[2], rhs_train[:, 2] * w_res[2])",
                            "BinOp"
                        ],
                        [
                            "I1 * criterion(dydt_train[:, 0], rhs_train[:, 0]) + I2 * criterion(dydt_train[:, 1], rhs_train[:, 1]) + I3 * criterion(dydt_train[:, 2], rhs_train[:, 2])",
                            "BinOp"
                        ],
                        [
                            "loss_res_train * lambda_hat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_165": {
                "variable": {
                    "value": "rhs_all",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_66": {
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_95": {
                "*size": {
                    "value": "n_grid_train",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "n_grid_test",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "pow_99": {
                "input": {
                    "value": "10",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.rand(n_grid_train, device=device).unsqueeze(-1) * -6",
                    "possible_values": []
                }
            },
            "pow_100": {
                "input": {
                    "value": "10",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.rand(n_grid_test, device=device).unsqueeze(-1) * -6",
                    "possible_values": []
                }
            },
            "arange_123": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "n_total",
                    "possible_values": [
                        [
                            "n_grid_train + n_grid_test",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_130": {},
            "Tensor_131": {},
            "Tensor_132": {},
            "save_289": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss_list': loss_list, 'x_train': to_np(x_train), 'x_test': to_np(x_test)}",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "net",
                    "possible_values": [
                        [
                            "PINN_Model(nodes=15, layers=4, y0=y0, w_scale=w_scale, x_scale=x_scale).to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "'models/robertson_stiff.pt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_99": {
                "*size": {
                    "value": "n_grid_train",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "rand_100": {
                "*size": {
                    "value": "n_grid_test",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "grad_155": {
                "outputs": {
                    "value": "y_all_repeat[y_jac_indice[:, 0], y_jac_indice[:, 1]].sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_all_repeat",
                    "possible_values": [
                        [
                            "x_all.repeat(n_var, 1)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn_qssa/_utils.py": {
        "torch": {
            "set_default_tensor_type_10": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "numel_75": {
                "input": {
                    "value": "p.grad.data",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn_qssa/config.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "cuda",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_index)",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn_qssa/pinn_model.py": {
        "torch": {
            "set_default_tensor_type_6": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.seq",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gelu_27": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.y0.shape[1]",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "x / self.x_scale",
                    "possible_values": []
                }
            }
        }
    },
    "robertson_pinn_qssa/robertson_pinn_qssa.py": {
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "t_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_np",
                    "possible_values": [
                        [
                            "np.logspace(start=-2, stop=5, num=n_steps, endpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_np",
                    "possible_values": [
                        [
                            "np.vstack(y_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "y_scale",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                }
            },
            "MSELoss_138": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "4e-05",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "grad_mean_res",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_168": {
                "variable": {
                    "value": "alpha_res",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "logspace_171": {
                "variable": {
                    "value": "pinn_t_list",
                    "possible_values": []
                },
                "start": {
                    "value": "-2",
                    "possible_values": []
                },
                "end": {
                    "value": "np.log10(t_end)",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_grid_train",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "pinn_t_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "pinn_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pinn_data",
                    "possible_values": [
                        [
                            "MyDataSet(data=pinn_t_list, label=pinn_t_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_pinn",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "OneCycleLR_183": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), lr=learning_rate, weight_decay=4e-05)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "0.001",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "1",
                    "possible_values": []
                },
                "epochs": {
                    "value": "num_epochs",
                    "possible_values": [
                        [
                            "30000",
                            "Constant"
                        ]
                    ]
                }
            },
            "logspace_185": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "start": {
                    "value": "-2",
                    "possible_values": []
                },
                "end": {
                    "value": "np.log10(t_end)",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_grid_test",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_13": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "possible_values": []
                }
            },
            "load_159": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "Tensor_164": {
                "variable": {
                    "value": "x_train_all",
                    "possible_values": []
                }
            },
            "Tensor_165": {
                "variable": {
                    "value": "x_test_all",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "n_var",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "x_all",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, x_test]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_like_202": {
                "variable": {
                    "value": "rhs_all",
                    "possible_values": []
                },
                "input": {
                    "value": "y_all",
                    "possible_values": [
                        [
                            "net(x_all).abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_203": {
                "variable": {
                    "value": "dydt_all",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs_all",
                    "possible_values": [
                        [
                            "torch.empty_like(y_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_212": {
                "variable": {
                    "value": "B",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_all.shape[0]",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss_list': loss_list, 'x_train': to_np(x_train), 'x_test': to_np(x_test)}",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path + '.tar'",
                    "possible_values": []
                }
            },
            "sqrt_215": {
                "input": {
                    "value": "delta",
                    "possible_values": [
                        [
                            "K[2] * K[2] * y_all[:, 1] * y_all[:, 1] + 4 * K[0] * y_all[:, 0] * K[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_206": {
                "outputs": {
                    "value": "y_all[:, i].sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_all",
                    "possible_values": [
                        [
                            "torch.cat([x_train, x_test], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    }
}