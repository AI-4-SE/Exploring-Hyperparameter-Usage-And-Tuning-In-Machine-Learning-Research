{
    "preprocessing.py": {
        "sklearn": {}
    },
    "run.py": {
        "tensorflow": {
            "ConfigProto_108": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "variable": {
                    "value": "h1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "board",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.orthogonal",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "h2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=board, filters=8, kernel_size=[2, 2], kernel_initializer=tf.initializers.orthogonal, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.orthogonal",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "flatten_142": {
                "variable": {
                    "value": "h3",
                    "possible_values": []
                },
                "structure": {
                    "value": "h2",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=h1, filters=16, kernel_size=[2, 2], kernel_initializer=tf.initializers.orthogonal, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_144": {
                "variable": {
                    "value": "h4",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h3",
                    "possible_values": [
                        [
                            "tf.layers.flatten(h2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            }
        }
    }
}