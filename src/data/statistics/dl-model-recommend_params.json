{
    "code/accuracy_predict_resources/retrieval.py": {
        "sklearn": {
            "Normalizer_39": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_129": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LinearSVR_132": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SVR_135": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "poly",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                },
                "degree": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPRegressor_138": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(256, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_141": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_144": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_147": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaBoostRegressor_150": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_153": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/dataset_similarity_resources/retrieval.py": {
        "sklearn": {
            "Normalizer_205": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_222": {
                "variable": {
                    "value": "self.cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.YDVal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "YPred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(self.XVal)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_224": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "YPred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(self.XVal)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "self.YDVal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "f1_score_226": {
                "variable": {
                    "value": "self.f1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "YPred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(self.XVal)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "self.YDVal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearSVC_234": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaBoostClassifier_237": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultinomialNB_240": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_243": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_246": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/data.py": {
        "torch": {}
    },
    "code/dataset_similarity_resources/datasetList.py": {
        "torch": {
            "WeightedRandomSampler_27": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_weights_for_balanced_classes(dataset_train.imgs, len(dataset_train.classes))",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(weights, len(weights))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "self.dataLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(dataDir, dataTransforms['train'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "self.dataLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(self.newdirname, dataTransforms['train'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(opt['dataDir'] + 'mnist/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: x.repeat(3, 1, 1))]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(opt['dataDir'] + 'mnist/', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: x.repeat(3, 1, 1))]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(opt['dataDir'] + 'cifar10/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(opt['dataDir'] + 'cifar10/', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(opt['dataDir'] + 'cifar100/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(opt['dataDir'] + 'cifar100/', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.STL10(root=opt['dataDir'] + 'stl10/', split='train', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.STL10(root=opt['dataDir'] + 'stl10/', split='test', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(opt['dataDir'] + 'svhn/', split='train', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(opt['dataDir'] + 'svhn/', split='test', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(root=opt['dataDir'] + 'fmnist/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: x.repeat(3, 1, 1))]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "self.valLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(root=opt['dataDir'] + 'fmnist/', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: x.repeat(3, 1, 1))]))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_276": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, corpus.dictionary, dropout=args.dropout, tie_weights=args.tied).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/match_word2vecs.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "emb[dictionary.word2idx[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word2vec[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code/model.py": {
        "torch": {
            "Dropout_9": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_10": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RNN_19": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/model2vec.py": {
        "torch": {
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if opt.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "rnn_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}