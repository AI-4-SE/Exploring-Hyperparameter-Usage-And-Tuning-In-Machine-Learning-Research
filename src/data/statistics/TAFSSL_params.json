{
    "src/utils/proto.py": {
        "sklearn": {
            "FastICA_83": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.opt.reduced_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FactorAnalysis_98": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.opt.reduced_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_43": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - torch.mean(z_all, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_support, z_query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_54": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - torch.mean(z_all, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - torch.from_numpy(self.train_mean).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mean_func(z_all)",
                            "Call"
                        ],
                        [
                            "mean_func(z_all)",
                            "Call"
                        ],
                        [
                            "self.project_and_norm(x, basis)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.sigma * pair_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "svd_71": {
                "variable": {
                    "value": "(_, _, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, x.shape[-1]).cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "ica",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "FastICA(n_components=self.opt.reduced_dim).fit_transform(x_np).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "FactorAnalysis(n_components=self.opt.reduced_dim).fit_transform(x_np).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "fa",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "FastICA(n_components=self.opt.reduced_dim).fit_transform(x_np).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "FactorAnalysis(n_components=self.opt.reduced_dim).fit_transform(x_np).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - torch.mean(z_all, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_107": {
                "input": {
                    "value": "x @ base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_42": {
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - torch.mean(z_all, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "self.train_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/proto_multi.py": {
        "sklearn": {
            "KMeans_27": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kmeans.cluster_centers_.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(kmeans.cluster_centers_.astype(np.float32)).to(self.device)",
                            "Call"
                        ],
                        [
                            "F.normalize(centers, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "centers.view(self.k, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "prob_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.sigma * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "prob_query",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prob[self.n_way * self.n_support:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_58": {
                "variable": {
                    "value": "pair_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.sigma * pair_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_124": {
                "variable": {
                    "value": "center_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_support_factored.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.normalize(center_support, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_125": {
                "variable": {
                    "value": "center_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_query_factored.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.normalize(center_query, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_support, z_query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/proto_semi.py": {
        "sklearn": {
            "KMeans_71": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_24": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.index_select(z_semi, 0, idi) for idi in idx]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "supp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_support, pseudo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[supp, z_semi, z_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_support, z_semi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_53": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - x.mean(dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_semi, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.project_and_norm(x, basis)",
                            "Call"
                        ],
                        [
                            "concat(z_support, z_semi, z_query, idx)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_support, z_semi, z_query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_all - x.mean(dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_support, z_semi, z_query), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_all, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.project_and_norm(x, basis)",
                            "Call"
                        ],
                        [
                            "concat(z_support, z_semi, z_query, idx)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kmeans.cluster_centers_.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_74": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(kmeans.cluster_centers_.astype(np.float32)).to(self.device)",
                            "Call"
                        ],
                        [
                            "F.normalize(centers, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_77": {
                "variable": {
                    "value": "prob_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.sigma * dist_supp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "variable": {
                    "value": "prob_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.sigma * dist_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "prob_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_query / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_support, z_query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_24": {
                "input": {
                    "value": "z_semi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[self.n_support * self.n_way:self.n_support * self.n_way + self.n_semi * self.n_way]",
                            "Subscript"
                        ],
                        [
                            "z_semi.contiguous().view(self.n_way * self.n_semi, -1)",
                            "Call"
                        ],
                        [
                            "z_semi - z_semi.mean(dim=0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "(z_support, z_semi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "(z_support, z_semi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(z_support, z_semi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(z_support, z_semi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/sampler.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argwhere(label == i).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_39": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_gallery + batch_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_36": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "l.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_33": {
                "n": {
                    "value": "len(self.m_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/exp_noise_semi.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(z_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/exp_semi.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(z_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/exp_unbalanced.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(z_all)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/Conv4.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/DenseNet.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_45": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/MobileNet.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/ProtoNet.py": {
        "torch": {
            "norm_10": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_11": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_8": {
                "x1": {
                    "value": "query[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "gallery[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/ResNet.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_101": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/WideResNet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](num_classes=args.num_classes, remove_linear=args.do_meta_train)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_60": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_163": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_metric(metric_type)(gallery, query)",
                            "Call"
                        ],
                        [
                            "LA.norm(subtract, 2, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "take_164": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:args.meta_val_way * args.meta_val_shot]",
                            "Subscript"
                        ],
                        [
                            "train_label[::args.meta_val_shot]",
                            "Subscript"
                        ],
                        [
                            "train_label[::shot]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_label + [each_class] * len(samples[:shot])",
                            "BinOp"
                        ]
                    ]
                },
                "index": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(distance, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.take(train_label, predict)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + '/' + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_426": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.DatasetFolder(args.data, args.split_dir, split, transform, out_name=out_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CategoriesSampler(sets.labels, *sample)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_429": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.DatasetFolder(args.data, args.split_dir, split, transform, out_name=out_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_454": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/model_best.pth.tar'.format(args.save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pretrain + '/checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_221": {
                "variable": {
                    "value": "rand_index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_341": {
                "optimizer": {
                    "value": "optimiter",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "args.lr_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_342": {
                "optimizer": {
                    "value": "optimiter",
                    "type": "variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[int(0.5 * args.epochs), int(0.75 * args.epochs)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_344": {
                "optimizer": {
                    "value": "optimiter",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "batches * args.epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_349": {
                "params": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_351": {
                "params": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_456": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/checkpoint.pth.tar'.format(args.save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_153": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_154": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_151": {
                "x1": {
                    "value": "query[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "gallery[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_213": {
                "start": {
                    "value": "args.meta_train_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/misc.py": {
        "torch": {
            "from_numpy_105": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(z_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_132": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(n_way), n_query)",
                            "Call"
                        ],
                        [
                            "np.take(y, perm, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(n_way), n_query)",
                            "Call"
                        ],
                        [
                            "np.take(y, perm, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_162": {
                "variable": {
                    "value": "(confidence, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(y, -1, -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(y, -1, -2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/proto_msp.py": {
        "torch": {
            "stack_21": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.index_select(z_query, 0, idi) for idi in idx]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "supp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_support, pseudo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "[supp, z_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sub_train_mean(z_all)",
                            "Call"
                        ],
                        [
                            "concat(z_support, z_query, idx)",
                            "Call"
                        ],
                        [
                            "self.project_and_norm(x, basis)",
                            "Call"
                        ],
                        [
                            "concat(z_support, z_query, idx)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_21": {
                "input": {
                    "value": "z_query",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idi",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}