{
    "common/metrics.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "filters",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.257, 0.504, 0.098]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "diff.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "diff.device",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "sr - hr",
                            "BinOp"
                        ],
                        [
                            "sr - hr",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(diff, filters.view([1, -1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filters.view([1, -1, 1, 1])",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/_isr.py": {
        "torch": {
            "ImageSuperResolutionDataset_48": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": []
                },
                "self.lr_files": {
                    "value": "lr_files",
                    "possible_values": []
                },
                "self.hr_files": {
                    "value": "hr_files",
                    "possible_values": []
                }
            }
        }
    },
    "models/scn.py": {
        "torch": {
            "MODEL_75": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_120": {
                    "variable": {
                        "value": "self.body",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*body",
                        "possible_values": []
                    }
                },
                "Sequential_133": {
                    "variable": {
                        "value": "self.skip",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*skip",
                        "possible_values": []
                    }
                },
                "Sequential_138": {
                    "variable": {
                        "value": "self.shuf",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*shuf",
                        "possible_values": []
                    }
                }
            },
            "Head_163": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_scales": {
                    "value": "num_scales",
                    "possible_values": []
                },
                "Sequential_171": {
                    "variable": {
                        "value": "self.down",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*down",
                        "possible_values": []
                    }
                }
            },
            "Block_180": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_210": {
                    "variable": {
                        "value": "self.body",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*body",
                        "possible_values": []
                    }
                },
                "Sequential_216": {
                    "variable": {
                        "value": "self.down",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*down",
                        "possible_values": []
                    }
                },
                "Sequential_221": {
                    "variable": {
                        "value": "self.up",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*up",
                        "possible_values": []
                    }
                }
            },
            "Tail_234": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.learning_rate",
                    "possible_values": []
                }
            },
            "MultiStepLR_63": {
                "variable": {
                    "value": "lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), params.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "params.learning_rate_milestones",
                    "possible_values": []
                },
                "gamma": {
                    "value": "params.learning_rate_decay",
                    "possible_values": []
                }
            },
            "L1Loss_66": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pad_150": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view([x.shape[0], -1, x.shape[3], x.shape[4]])",
                            "Call"
                        ],
                        [
                            "x + self.image_mean",
                            "BinOp"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_w, 0, pad_h), 'replicate')",
                            "Call"
                        ],
                        [
                            "self.body(x)",
                            "Call"
                        ],
                        [
                            "x[..., :x_shape[-2], :x_shape[-1]]",
                            "Subscript"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.shuf(x)",
                            "Call"
                        ],
                        [
                            "x.view([x.shape[0], -1, 1, x.shape[2], x.shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "num_inputs",
                    "possible_values": [
                        [
                            "params.num_channels",
                            "Attribute"
                        ],
                        [
                            "num_inputs * self.temporal_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "params.num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "params.num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "params.scale * params.scale * params.num_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_170": {
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(num_residual_units * width_multiplier)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "int(num_residual_units * width_multiplier)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_215": {
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_220": {
                "scale_factor": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "num_inputs",
                    "possible_values": [
                        [
                            "params.num_channels",
                            "Attribute"
                        ],
                        [
                            "num_inputs * self.temporal_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "params.scale * params.scale * params.num_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "skip_kernel_size",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "skip_kernel_size // 2",
                    "possible_values": []
                }
            },
            "PixelShuffle_137": {
                "upscale_factor": {
                    "value": "params.scale",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/wdsr.py": {
        "torch": {
            "MODEL_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_112": {
                    "variable": {
                        "value": "self.body",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*body",
                        "possible_values": []
                    }
                },
                "Sequential_125": {
                    "variable": {
                        "value": "self.skip",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*skip",
                        "possible_values": []
                    }
                },
                "Sequential_130": {
                    "variable": {
                        "value": "self.shuf",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*shuf",
                        "possible_values": []
                    }
                }
            },
            "Block_144": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_174": {
                    "variable": {
                        "value": "self.body",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*body",
                        "possible_values": []
                    }
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.learning_rate",
                    "possible_values": []
                }
            },
            "MultiStepLR_58": {
                "variable": {
                    "value": "lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), params.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "params.learning_rate_milestones",
                    "possible_values": []
                },
                "gamma": {
                    "value": "params.learning_rate_decay",
                    "possible_values": []
                }
            },
            "L1Loss_61": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "num_inputs",
                    "possible_values": [
                        [
                            "params.num_channels",
                            "Attribute"
                        ],
                        [
                            "num_inputs * self.temporal_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "params.num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "params.num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "params.scale * params.scale * params.num_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(num_residual_units * width_multiplier)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "int(num_residual_units * width_multiplier)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "num_inputs",
                    "possible_values": [
                        [
                            "params.num_channels",
                            "Attribute"
                        ],
                        [
                            "num_inputs * self.temporal_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "params.scale * params.scale * params.num_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "skip_kernel_size",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "skip_kernel_size // 2",
                    "possible_values": []
                }
            },
            "PixelShuffle_129": {
                "upscale_factor": {
                    "value": "params.scale",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DataLoader_145": {
                "variable": {
                    "value": "train_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_module.get_dataset(common.modes.TRAIN, params)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "params.num_data_threads",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.train_batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_166": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DistributedSampler_139": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_module.get_dataset(common.modes.TRAIN, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_174": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "params.ckpt or os.path.join(params.job_dir, 'latest.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda()",
                    "possible_values": []
                }
            },
            "SummaryWriter_191": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "params.job_dir",
                    "possible_values": []
                }
            },
            "set_device_122": {
                "device": {
                    "value": "params.local_rank",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_data_threads",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.eval_batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict() if params.distributed else model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'lr_scheduler_state_dict': lr_scheduler.state_dict(), 'epoch': epoch}",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.job_dir, 'epoch_{}.pth'.format(epoch))",
                    "possible_values": []
                }
            }
        }
    }
}