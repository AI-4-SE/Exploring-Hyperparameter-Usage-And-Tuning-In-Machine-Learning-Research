{
    "code/data/LRHR_dataset.py": {
        "torch": {
            "from_numpy_120": {
                "variable": {
                    "value": "img_HR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(img_HR, (2, 0, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "img_LR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(img_LR, (2, 0, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/data/LR_dataset.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "img_LR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(img_LR, (2, 0, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/data/__init__.py": {
        "torch": {}
    },
    "code/data/util.py": {
        "torch": {
            "abs_215": {
                "variable": {
                    "value": "absx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(1, out_length, out_length)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_236": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u - kernel_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "weights_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale * cubic(distance_to_center * scale)",
                            "BinOp"
                        ],
                        [
                            "cubic(distance_to_center)",
                            "Call"
                        ],
                        [
                            "weights / weights_sum.expand(out_length, P)",
                            "BinOp"
                        ],
                        [
                            "weights.narrow(1, 1, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.narrow(1, 0, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "weights_zero_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_308": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_326": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_331": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread('test.png')",
                            "Call"
                        ],
                        [
                            "img * 1.0 / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(np.transpose(img[:, :, [2, 1, 0]], (2, 0, 1))).float()",
                            "Call"
                        ],
                        [
                            "img_flat.reshape(H, W, C)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "_read_lmdb_img(env, path)",
                            "Call"
                        ],
                        [
                            "img.astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(img, axis=2)",
                            "Call"
                        ],
                        [
                            "img[:, :, :3]",
                            "Subscript"
                        ],
                        [
                            "img[:, ::-1, :]",
                            "Subscript"
                        ],
                        [
                            "img[::-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "img.transpose(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "np.copy(img_in)",
                            "Call"
                        ],
                        [
                            "img[:H - H_r, :W - W_r]",
                            "Subscript"
                        ],
                        [
                            "img[:H - H_r, :W - W_r, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_373": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_378": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_396": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_401": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_421": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(img[:, :, [2, 1, 0]], (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_246": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(kernel_width) + 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/SPSR_model.py": {
        "torch": {
            "unsqueeze_28": {
                "variable": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0, 0], [-1, 0, 1], [0, 0, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_h).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[[0, 0, 0], [-1, 0, 1], [0, 0, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_h).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, -1, 0], [0, 0, 0], [0, 1, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_v).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[[0, -1, 0], [0, 0, 0], [0, 1, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_v).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "x0_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "x0_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "x1_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "x1_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "x2_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "x2_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x0_v, 2) + torch.pow(x0_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x1_v, 2) + torch.pow(x1_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x2_v, 2) + torch.pow(x2_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0, 0], [-1, 0, 1], [0, 0, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_h).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[[0, 0, 0], [-1, 0, 1], [0, 0, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_h).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, -1, 0], [0, 0, 0], [0, 1, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_v).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[[0, -1, 0], [0, 0, 0], [0, 1, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_v).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "x0_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "x0_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_75": {
                "variable": {
                    "value": "x1_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "x1_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "x2_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "x2_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_81": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x0_v, 2) + torch.pow(x0_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x1_v, 2) + torch.pow(x1_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x2_v, 2) + torch.pow(x2_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_367": {
                "variable": {
                    "value": "self.log_dict[D_real]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_real.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_368": {
                "variable": {
                    "value": "self.log_dict[D_fake]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_fake.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_371": {
                "variable": {
                    "value": "self.log_dict[D_real_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_real_grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_372": {
                "variable": {
                    "value": "self.log_dict[D_fake_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_fake_grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_191": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "train_opt['lr_G']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt['train']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opt['weight_decay_G'] if train_opt['weight_decay_G'] else 0",
                            "IfExp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(train_opt['beta1_G'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "train_opt['lr_D']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt['train']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opt['weight_decay_D'] if train_opt['weight_decay_D'] else 0",
                            "IfExp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(train_opt['beta1_D'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "self.optimizer_D_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD_grad.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "train_opt['lr_D']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt['train']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opt['weight_decay_D'] if train_opt['weight_decay_D'] else 0",
                            "IfExp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(train_opt['beta1_D'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_147": {
                "variable": {
                    "value": "self.random_pt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "variable": {
                    "value": "self.cri_pix_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_110": {
                "variable": {
                    "value": "self.cri_pix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_124": {
                "variable": {
                    "value": "self.cri_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_170": {
                "variable": {
                    "value": "self.cri_pix_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_306": {
                "input": {
                    "value": "pred_d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.fake_H.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_307": {
                "input": {
                    "value": "pred_d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.var_ref)",
                            "Call"
                        ],
                        [
                            "self.netD(self.var_ref).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_335": {
                "input": {
                    "value": "pred_d_fake_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD_grad(self.fake_H_grad.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_336": {
                "input": {
                    "value": "pred_d_real_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD_grad(self.var_ref_grad).detach()",
                            "Call"
                        ],
                        [
                            "self.netD_grad(self.var_ref_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_46": {
                "input": {
                    "value": "x0_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x0.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x0.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_47": {
                "input": {
                    "value": "x1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x1.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x1.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_48": {
                "input": {
                    "value": "x2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x2.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x2.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_81": {
                "input": {
                    "value": "x0_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x0.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x0.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_82": {
                "input": {
                    "value": "x1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x1.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x1.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "x2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x2.unsqueeze(1), self.weight_h, padding=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x2.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_112": {
                "variable": {
                    "value": "self.cri_pix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_126": {
                "variable": {
                    "value": "self.cri_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_172": {
                "variable": {
                    "value": "self.cri_pix_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_212": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimizers",
                            "Attribute"
                        ]
                    ]
                },
                "milestones": {
                    "value": "train_opt['lr_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "train_opt['lr_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_281": {
                "input": {
                    "value": "pred_g_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.fake_H)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_282": {
                "input": {
                    "value": "pred_d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.var_ref)",
                            "Call"
                        ],
                        [
                            "self.netD(self.var_ref).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_291": {
                "input": {
                    "value": "pred_g_fake_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD_grad(self.fake_H_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_292": {
                "input": {
                    "value": "pred_d_real_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD_grad(self.var_ref_grad).detach()",
                            "Call"
                        ],
                        [
                            "self.netD_grad(self.var_ref_grad)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/base_model.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if opt[gpu_ids] is not None else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_59": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.opt['path']['models'], save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.opt['path']['training_state'], save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_80": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'iter': iter_step, 'schedulers': [], 'optimizers': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.opt['path']['models'], save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.opt['path']['training_state'], save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/modules/architecture.py": {
        "torch": {
            "unsqueeze_19": {
                "variable": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0, 0], [-1, 0, 1], [0, 0, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_h).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, -1, 0], [0, 0, 0], [0, 1, 0]]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(kernel_v).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "x_cat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_b_fea, x_fea1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "x_cat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_cat_1, x_fea2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "x_cat_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_cat_2, x_fea3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "x_cat_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_cat_3, x_fea4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x_f_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_branch_d, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 4 * 4, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 6 * 6, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 4 * 4, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_350": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_397": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_471": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_554": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[:feature_layer + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_578": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_593": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_594": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_595": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_596": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_597": {
                "variable": {
                    "value": "self.conv21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_598": {
                "variable": {
                    "value": "self.conv22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_599": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_600": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_601": {
                "variable": {
                    "value": "self.conv32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_602": {
                "variable": {
                    "value": "self.conv33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_603": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_604": {
                "variable": {
                    "value": "self.conv41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_605": {
                "variable": {
                    "value": "self.conv42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_606": {
                "variable": {
                    "value": "self.conv43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_607": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_608": {
                "variable": {
                    "value": "self.conv51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_609": {
                "variable": {
                    "value": "self.conv52",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_610": {
                "variable": {
                    "value": "self.conv53",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "x_i_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_i.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "x_i_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_i.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_i_v, 2) + torch.pow(x_i_h, 2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_540": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_548": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_550": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_567": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_572": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_574": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_635": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_236": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_276": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_316": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_351": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_351": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_381": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_403": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_416": {
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_417": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_472": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_522": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_640": {
                "f": {
                    "value": "../experiments/pretrained_models/VGG16minc_53.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_31": {
                "input": {
                    "value": "x_i_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x_i.unsqueeze(1), self.weight_h, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/modules/block.py": {
        "torch": {
            "Conv2d_124": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_nc",
                            "Method Argument"
                        ],
                        [
                            "in_nc",
                            "Method Argument"
                        ],
                        [
                            "in_nc",
                            "Method Argument"
                        ],
                        [
                            "in_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_nc",
                            "Method Argument"
                        ],
                        [
                            "out_nc",
                            "Method Argument"
                        ],
                        [
                            "out_nc",
                            "Method Argument"
                        ],
                        [
                            "out_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PixelShuffle_250": {
                "variable": {
                    "value": "pixel_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_261": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CNA'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'CNA'",
                            "Method Argument"
                        ],
                        [
                            "'CNA'",
                            "Method Argument"
                        ],
                        [
                            "'CNA'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_49": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.sub(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_36": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_51": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_24": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/modules/loss.py": {
        "torch": {
            "BCEWithLogitsLoss_14": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_16": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_31": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_33": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_54": {
                "outputs": {
                    "value": "interp_crit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interp_crit",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interp",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_grad_outputs(interp_crit)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/modules/sampler.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_map[start_y:end_y, start_x:end_x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/modules/spectral_norm.py": {
        "torch": {
            "dot_38": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "self.compute_weight(module)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_35": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_36": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_47": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / sigma",
                            "BinOp"
                        ],
                        [
                            "getattr(module, self.name)",
                            "Call"
                        ],
                        [
                            "self.compute_weight(module)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_35": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "self.compute_weight(module)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_36": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/networks.py": {
        "torch": {
            "DataParallel_136": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arch.Discriminator_VGG_128(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_96(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_192(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128_SN()",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_96(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_192(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128_SN()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arch.Discriminator_VGG_128(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_96(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_192(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128_SN()",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_96(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_192(in_nc=opt_net['in_nc'], base_nf=opt_net['nf'], norm_type=opt_net['norm_type'], mode=opt_net['mode'], act_type=opt_net['act_type'])",
                            "Call"
                        ],
                        [
                            "arch.Discriminator_VGG_128_SN()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_171": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if gpu_ids else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "netF",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arch.VGGFeatureExtractor(feature_layer=feature_layer, use_bn=use_bn, use_input_norm=True, device=device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netF)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arch.SPSRNet(in_nc=opt_net['in_nc'], out_nc=opt_net['out_nc'], nf=opt_net['nf'], nb=opt_net['nb'], gc=opt_net['gc'], upscale=opt_net['scale'], norm_type=opt_net['norm_type'], act_type='leakyrelu', mode=opt_net['mode'], upsample_mode='upconv')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netG.to(device))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "resume_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt['path']['resume_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "(visuals['SR'], visuals['HR'], visuals['SR_branch'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/util.py": {
        "torch": {
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/LPIPS/__init__.py": {
        "torch": {
            "sqrt_46": {
                "variable": {
                    "value": "norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/LPIPS/base_model.py": {
        "torch": {
            "save_41": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/LPIPS/dist_model.py": {
        "torch": {
            "Adam_96": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_165": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_132": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/LPIPS/networks_basic.py": {
        "torch": {
            "Sequential_117": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_144": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_25": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_167": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_129": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/LPIPS/pretrained_networks.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/evaluate_sr_results.py": {
        "torch": {
            "Tensor_58": {
                "variable": {
                    "value": "imageA",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "imageB",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/generate_dataset.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "absx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(1, out_length, out_length)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_35": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u - kernel_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "weights_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale * cubic(distance_to_center * scale)",
                            "BinOp"
                        ],
                        [
                            "cubic(distance_to_center)",
                            "Call"
                        ],
                        [
                            "weights / weights_sum.expand(out_length, P)",
                            "BinOp"
                        ],
                        [
                            "weights.narrow(1, 1, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.narrow(1, 0, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "weights_zero_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_103": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_45": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(kernel_width) + 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}