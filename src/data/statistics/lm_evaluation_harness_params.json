{
    "lm_eval/metrics.py": {
        "sklearn": {}
    },
    "lm_eval/tasks/superglue.py": {
        "sklearn": {
            "f1_score_147": {
                "variable": {
                    "value": "f11",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "f1_score_148": {
                "variable": {
                    "value": "f12",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "f1_score_149": {
                "variable": {
                    "value": "f13",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lm_eval/base.py": {
        "torch": {
            "cat_293": {
                "variable": {
                    "value": "batched_inps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_294": {
                "variable": {
                    "value": "multi_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._model_call(batched_inps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "context_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tok_encode(context)[self.max_gen_toks - self.max_length:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(context_enc + continuation_enc)[-(self.max_length + 1):][:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, torch.zeros(padding_length - inplen, dtype=torch.long).to(inp.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "cont_toks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cont_toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(cont_toks, dtype=torch.long).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_310": {
                "variable": {
                    "value": "cont_toks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_317": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[inplen - contlen:inplen].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.gather(logits, 2, cont_toks.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cont_toks.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_317": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "padding_length - inplen",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lm_eval/models/gpt2.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/make_gpt2_test_cases.py": {
        "torch": {
            "log_softmax_34": {
                "input": {
                    "value": "model(toks)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_36": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(model(toks)[0], dim=-1)[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "toks[:, 1:].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}