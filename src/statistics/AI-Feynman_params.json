{
    "aifeynman/S_gradient_decomposition.py": {
        "sklearn": {
            "KernelDensity_128": {
                "variable": {
                    "value": "kde",
                    "possible_values": []
                },
                "kernel": {
                    "value": "tophat",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "KernelDensity_129": {
                "variable": {
                    "value": "kde2",
                    "possible_values": []
                },
                "kernel": {
                    "value": "tophat",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "KernelDensity_143": {
                "variable": {
                    "value": "kde",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "'tophat'",
                            "MethodArgument"
                        ]
                    ]
                },
                "bandwidth": {
                    "value": "bandwidth",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "outs",
                    "possible_values": []
                },
                "*size": {
                    "value": "pts.shape",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if model.is_cuda else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda' if is_cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "grad_weights",
                    "possible_values": []
                },
                "*size": {
                    "value": "pts.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "TrueModel_69": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "randint_88": {
                "variable": {
                    "value": "pts",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "X.shape[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(NUM_SAMPLES, X.shape[1])",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "actual_pts",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_SAMPLES",
                    "possible_values": [
                        [
                            "60",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "X.shape[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "is_available_180": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_231": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_255": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                }
            },
            "Tensor_256": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "randint_85": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "X.shape[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "data": {
                    "value": "[point]",
                    "possible_values": []
                }
            },
            "grad_65": {
                "outputs": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "torch.zeros(pts.shape, device=device)",
                            "Call"
                        ],
                        [
                            "model(pts)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "pts",
                    "possible_values": [
                        [
                            "pts.clone().detach()",
                            "Call"
                        ],
                        [
                            "pts.to(device=device)",
                            "Call"
                        ],
                        [
                            "pts.clone().detach()",
                            "Call"
                        ],
                        [
                            "pts.cuda()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, X.shape[0], (NUM_SAMPLES, X.shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_weights",
                    "possible_values": [
                        [
                            "torch.ones(pts.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "grad_weights.cuda()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/RPN_to_pytorch.py": {
        "torch": {
            "from_numpy_95": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, -1]",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "(yy - y) ** 2",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "vars()[i]",
                    "possible_values": []
                },
                "data": {
                    "value": "unsnapped_param_dict[i]",
                    "possible_values": []
                }
            },
            "isnan_106": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.mean((yy - y) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "data[:, i]",
                    "possible_values": []
                }
            },
            "isnan_110": {
                "input": {
                    "value": "trainable_parameters[nan_i]",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_NN_eval.py": {
        "torch": {
            "is_available_15": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MultDataset_19": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.factors": {
                    "value": "factors",
                    "possible_values": [
                        [
                            "torch.from_numpy(variables[0:int(5 * len(variables) / 6)])",
                            "Call"
                        ],
                        [
                            "factors.cuda()",
                            "Call"
                        ],
                        [
                            "factors",
                            "Name"
                        ],
                        [
                            "factors.float()",
                            "Call"
                        ]
                    ]
                },
                "self.product": {
                    "value": "product",
                    "possible_values": [
                        [
                            "torch.from_numpy(f_dependent[0:int(5 * len(f_dependent) / 6)])",
                            "Call"
                        ],
                        [
                            "product.cuda()",
                            "Call"
                        ],
                        [
                            "product",
                            "Name"
                        ],
                        [
                            "product.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_38": {
                "variable": {
                    "value": "denom",
                    "possible_values": []
                },
                "input": {
                    "value": "denom.sum() / len(denom)",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables[0:int(5 * len(variables) / 6)]",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent[0:int(5 * len(f_dependent) / 6)]",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "factors_val",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables[int(5 * len(variables) / 6):int(len(variables))]",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "product_val",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent[int(5 * len(variables) / 6):int(len(variables))]",
                    "possible_values": []
                }
            },
            "SimpleNet_86": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_89": {
                    "variable": {
                        "value": "self.linear1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "ni",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_90": {
                    "variable": {
                        "value": "self.linear2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_91": {
                    "variable": {
                        "value": "self.linear3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_92": {
                    "variable": {
                        "value": "self.linear4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_93": {
                    "variable": {
                        "value": "self.linear5",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "F.mse_loss(pred, targ)",
                    "possible_values": []
                }
            },
            "mse_loss_40": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "targ",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "results/NN_trained_models/models/ + filename + .h5",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_NN_get_gradients.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "pts",
                    "possible_values": []
                },
                "data": {
                    "value": "pts",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename)[:, 0:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pts)",
                            "Call"
                        ],
                        [
                            "pts.clone().detach()",
                            "Call"
                        ],
                        [
                            "pts.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_20": {
                "variable": {
                    "value": "grad_weights",
                    "possible_values": []
                },
                "*size": {
                    "value": "pts.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_28": {
                "outputs": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "model(pts)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "pts",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename)[:, 0:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pts)",
                            "Call"
                        ],
                        [
                            "pts.clone().detach()",
                            "Call"
                        ],
                        [
                            "pts.float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_weights",
                    "possible_values": [
                        [
                            "torch.ones(pts.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "grad_weights.cuda()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_NN_train.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MultDataset_21": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.factors": {
                    "value": "factors",
                    "possible_values": [
                        [
                            "torch.from_numpy(variables)",
                            "Call"
                        ],
                        [
                            "factors.cuda()",
                            "Call"
                        ],
                        [
                            "factors",
                            "Name"
                        ],
                        [
                            "factors.float()",
                            "Call"
                        ]
                    ]
                },
                "self.product": {
                    "value": "product",
                    "possible_values": [
                        [
                            "torch.from_numpy(f_dependent)",
                            "Call"
                        ],
                        [
                            "product.cuda()",
                            "Call"
                        ],
                        [
                            "product",
                            "Name"
                        ],
                        [
                            "product.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_40": {
                "variable": {
                    "value": "denom",
                    "possible_values": []
                },
                "input": {
                    "value": "denom.sum() / len(denom)",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "SimpleNet_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_90": {
                    "variable": {
                        "value": "self.linear1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "ni",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_91": {
                    "variable": {
                        "value": "self.linear2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_92": {
                    "variable": {
                        "value": "self.linear3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_93": {
                    "variable": {
                        "value": "self.linear4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_94": {
                    "variable": {
                        "value": "self.linear5",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "TensorDataset_104": {
                "variable": {
                    "value": "my_dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "factors",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "my_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "my_dataset",
                    "possible_values": [
                        [
                            "utils.TensorDataset(factors, product)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "F.mse_loss(pred, targ)",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer_feynman",
                    "possible_values": []
                },
                "params": {
                    "value": "model_feynman.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrs",
                    "possible_values": [
                        [
                            "lrs / 10",
                            "BinOp"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mse_loss_41": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "targ",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "possible_values": []
                }
            },
            "tanh_100": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "pretrained_path",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "model_feynman.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "results/NN_trained_models/models/ + filename + .h5",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_add_bf_on_numbers_on_pareto.py": {
        "torch": {}
    },
    "aifeynman/S_add_snap_expr_on_pareto.py": {
        "torch": {}
    },
    "aifeynman/S_compositionality.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "data": {
                    "value": "dt",
                    "possible_values": [
                        [
                            "test_points.get_test_point(obj, data[i][:-1])",
                            "Call"
                        ],
                        [
                            "torch.tensor(dt).float().cuda().view(1, len(dt))",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.tensor([np.zeros(len(dt[0]))]).float().cuda(), dt), 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dt).float().view(1, len(dt))",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.tensor([np.zeros(len(dt[0]))]).float(), dt), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tensor([np.zeros(len(dt[0]))]).float().cuda(), dt)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "data": {
                    "value": "dt",
                    "possible_values": [
                        [
                            "test_points.get_test_point(obj, data[i][:-1])",
                            "Call"
                        ],
                        [
                            "torch.tensor(dt).float().cuda().view(1, len(dt))",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.tensor([np.zeros(len(dt[0]))]).float().cuda(), dt), 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dt).float().view(1, len(dt))",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.tensor([np.zeros(len(dt[0]))]).float(), dt), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_56": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tensor([np.zeros(len(dt[0]))]).float(), dt)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "data[:, -1][i]",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "data[:, -1][i]",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[np.zeros(len(dt[0]))]",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[np.zeros(len(dt[0]))]",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_final_gd.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, -1]",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "(yy - y) ** 2",
                    "possible_values": []
                }
            },
            "mean_110": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "(yy - y) ** 2",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "vars()[i]",
                    "possible_values": []
                },
                "data": {
                    "value": "unsnapped_param_dict[i]",
                    "possible_values": []
                }
            },
            "isnan_104": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.mean((yy - y) ** 2)",
                            "Call"
                        ],
                        [
                            "torch.mean((yy - y) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_116": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.mean((yy - y) ** 2)",
                            "Call"
                        ],
                        [
                            "torch.mean((yy - y) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "data[:, i]",
                    "possible_values": []
                }
            },
            "isnan_120": {
                "input": {
                    "value": "trainable_parameters[nan_i]",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_gen_sym.py": {
        "torch": {
            "is_available_15": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "data": {
                    "value": "dt_",
                    "possible_values": [
                        [
                            "data_all[i]",
                            "Subscript"
                        ],
                        [
                            "data_all[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_58": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tensor([np.zeros(len(dt[0]))]).float().cuda(), dt)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "data": {
                    "value": "dt_",
                    "possible_values": [
                        [
                            "data_all[i]",
                            "Subscript"
                        ],
                        [
                            "data_all[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "dt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tensor([np.zeros(len(dt[0]))]).float(), dt)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "data[:, -1][i]",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "data[:, -1][i]",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[np.zeros(len(dt[0]))]",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[np.zeros(len(dt[0]))]",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_remove_input_neuron.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "net.linear1.weight",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "data": {
                    "value": "t[preserved_ids, :]",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "net.linear1.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.transpose(t, 0, 1)",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "net.linear1.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "net.linear1.bias + torch.tensor(ct_median * removed_weights).float().cuda()",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "net.linear1.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "net.linear1.bias + torch.tensor(ct_median * removed_weights).float()",
                    "possible_values": []
                }
            },
            "save_32": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_filename",
                    "possible_values": []
                }
            },
            "transpose_26": {
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "torch.transpose(net.linear1.weight, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(t[preserved_ids, :])",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "ct_median * removed_weights",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "ct_median * removed_weights",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_separability.py": {
        "torch": {
            "is_available_17": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SimpleNet_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_22": {
                    "variable": {
                        "value": "self.linear1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "ni",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_23": {
                    "variable": {
                        "value": "self.linear2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_24": {
                    "variable": {
                        "value": "self.linear3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_25": {
                    "variable": {
                        "value": "self.linear4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_26": {
                    "variable": {
                        "value": "self.linear5",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "sqrt_38": {
                "variable": {
                    "value": "denom",
                    "possible_values": []
                },
                "input": {
                    "value": "denom.sum() / len(denom)",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "variables[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "f_dependent[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "variables[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "f_dependent[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "variables[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "f_dependent[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "variables[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "f_dependent[use_idx]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_39": {
                "input": {
                    "value": "F.mse_loss(pred, targ)",
                    "possible_values": []
                }
            },
            "full_180": {
                "variable": {
                    "value": "fact_vary[:, k]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, k])",
                    "possible_values": []
                }
            },
            "full_184": {
                "variable": {
                    "value": "fact_vary_one[:, t1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t1])",
                    "possible_values": []
                }
            },
            "full_186": {
                "variable": {
                    "value": "fact_vary_rest[:, t2]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t2])",
                    "possible_values": []
                }
            },
            "full_358": {
                "variable": {
                    "value": "fact_vary[:, k]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, k])",
                    "possible_values": []
                }
            },
            "full_362": {
                "variable": {
                    "value": "fact_vary_one[:, t1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t1])",
                    "possible_values": []
                }
            },
            "full_364": {
                "variable": {
                    "value": "fact_vary_rest[:, t2]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t2])",
                    "possible_values": []
                }
            },
            "mse_loss_39": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "targ",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "full_91": {
                "variable": {
                    "value": "fact_vary[:, k]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, k])",
                    "possible_values": []
                }
            },
            "load_171": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_259": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "full_269": {
                "variable": {
                    "value": "fact_vary[:, k]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, k])",
                    "possible_values": []
                }
            },
            "load_349": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "median_114": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "2 * abs(product - sm + model(fact_vary))",
                            "BinOp"
                        ],
                        [
                            "2 * abs(product - pd / model(fact_vary))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_115": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_116": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "median_180": {
                "input": {
                    "value": "factors[:, k]",
                    "possible_values": []
                }
            },
            "median_184": {
                "input": {
                    "value": "factors[:, t1]",
                    "possible_values": []
                }
            },
            "median_186": {
                "input": {
                    "value": "factors[:, t2]",
                    "possible_values": []
                }
            },
            "median_292": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "2 * abs(product - sm + model(fact_vary))",
                            "BinOp"
                        ],
                        [
                            "2 * abs(product - pd / model(fact_vary))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_293": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_294": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "median_358": {
                "input": {
                    "value": "factors[:, k]",
                    "possible_values": []
                }
            },
            "median_362": {
                "input": {
                    "value": "factors[:, t1]",
                    "possible_values": []
                }
            },
            "median_364": {
                "input": {
                    "value": "factors[:, t2]",
                    "possible_values": []
                }
            },
            "median_91": {
                "input": {
                    "value": "factors[:, k]",
                    "possible_values": []
                }
            },
            "full_107": {
                "variable": {
                    "value": "fact_vary_one[:, t1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t1])",
                    "possible_values": []
                }
            },
            "full_109": {
                "variable": {
                    "value": "fact_vary_rest[:, t2]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t2])",
                    "possible_values": []
                }
            },
            "median_269": {
                "input": {
                    "value": "factors[:, k]",
                    "possible_values": []
                }
            },
            "full_285": {
                "variable": {
                    "value": "fact_vary_one[:, t1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t1])",
                    "possible_values": []
                }
            },
            "full_287": {
                "variable": {
                    "value": "fact_vary_rest[:, t2]",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(factors),)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.median(factors[:, t2])",
                    "possible_values": []
                }
            },
            "log2_115": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_116": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_293": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_294": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "median_107": {
                "input": {
                    "value": "factors[:, t1]",
                    "possible_values": []
                }
            },
            "median_109": {
                "input": {
                    "value": "factors[:, t2]",
                    "possible_values": []
                }
            },
            "median_285": {
                "input": {
                    "value": "factors[:, t1]",
                    "possible_values": []
                }
            },
            "median_287": {
                "input": {
                    "value": "factors[:, t2]",
                    "possible_values": []
                }
            }
        }
    },
    "aifeynman/S_symmetry.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SimpleNet_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_24": {
                    "variable": {
                        "value": "self.linear1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "ni",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_25": {
                    "variable": {
                        "value": "self.linear2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_26": {
                    "variable": {
                        "value": "self.linear3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_27": {
                    "variable": {
                        "value": "self.linear4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_28": {
                    "variable": {
                        "value": "self.linear5",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "sqrt_40": {
                "variable": {
                    "value": "denom",
                    "possible_values": []
                },
                "input": {
                    "value": "denom.sum() / len(denom)",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "possible_values": []
                }
            },
            "tanh_34": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_409": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_416": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_544": {
                "variable": {
                    "value": "factors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(0,))",
                            "Call"
                        ],
                        [
                            "np.column_stack((variables, v))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_551": {
                "variable": {
                    "value": "product",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_dependent",
                    "possible_values": [
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ],
                        [
                            "np.loadtxt(pathdir + '/%s' % filename, usecols=(n_variables,))",
                            "Call"
                        ],
                        [
                            "np.reshape(f_dependent, (len(f_dependent), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "F.mse_loss(pred, targ)",
                    "possible_values": []
                }
            },
            "median_162": {
                "variable": {
                    "value": "ct_median",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(variables[:, j])",
                    "possible_values": []
                }
            },
            "median_301": {
                "variable": {
                    "value": "ct_median",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(variables[:, j])",
                    "possible_values": []
                }
            },
            "median_437": {
                "variable": {
                    "value": "ct_median",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(variables[:, j])",
                    "possible_values": []
                }
            },
            "median_572": {
                "variable": {
                    "value": "ct_median",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(variables[:, j])",
                    "possible_values": []
                }
            },
            "mse_loss_41": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "targ",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_221": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_358": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_364": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_428": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_434": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_494": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_563": {
                "f": {
                    "value": "pathdir_weights + filename + '.h5'",
                    "possible_values": []
                }
            },
            "no_grad_569": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "variables[:, j]",
                    "possible_values": []
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "variables[:, j]",
                    "possible_values": []
                }
            },
            "from_numpy_437": {
                "ndarray": {
                    "value": "variables[:, j]",
                    "possible_values": []
                }
            },
            "from_numpy_572": {
                "ndarray": {
                    "value": "variables[:, j]",
                    "possible_values": []
                }
            },
            "median_105": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_106": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_107": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "median_242": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_243": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_244": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "median_379": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_380": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_381": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "median_514": {
                "variable": {
                    "value": "error",
                    "possible_values": []
                },
                "input": {
                    "value": "list_errs",
                    "possible_values": [
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ],
                        [
                            "abs(product - model(fact_translate))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_515": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "std_516": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(1 + list_errs * 2 ** 30)",
                    "possible_values": []
                }
            },
            "log2_106": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_107": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_243": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_244": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_380": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_381": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_515": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "log2_516": {
                "input": {
                    "value": "1 + list_errs * 2 ** 30",
                    "possible_values": []
                }
            },
            "std_101": {
                "input": {
                    "value": "fact_translate[:, j]",
                    "possible_values": []
                }
            },
            "std_510": {
                "input": {
                    "value": "fact_translate[:, j]",
                    "possible_values": []
                }
            }
        }
    }
}