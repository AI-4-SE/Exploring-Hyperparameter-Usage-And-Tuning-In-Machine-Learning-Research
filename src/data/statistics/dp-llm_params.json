{
    "src/llm_mnist_main.py": {
        "torch": {
            "Adam_27": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(args.device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data.to(args.device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/llm_mnist_model.py": {
        "torch": {
            "log_softmax_64": {
                "variable": {
                    "value": "log_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_class_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.sum(z_softmax * self.z, dim=2)",
                            "Call"
                        ],
                        [
                            "pt.sum(z_softmax * self.z, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "w_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_samplewise_grads()",
                            "Call"
                        ],
                        [
                            "per_sample_grads * n_facs",
                            "BinOp"
                        ],
                        [
                            "per_sample_grads",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "s_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(load_dir, 'model_weights.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "pt.Tensor(self.d_in + 1, self.k, self.n_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "self.rand_filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "rf_mat.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "pt.Tensor(self.n_preds, self.d_rand_filt + 1, self.k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.view(-1, self.d_in), bias_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "z_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight.view(self.d_in + 1, self.k * self.n_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "z_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "per_class_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_softmax * self.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "rand_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, self.d_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "rf_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rand_filt.view(self.d_in, self.n_preds * self.d_rand_filt)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rand_proj.view(bs, self.n_preds, self.d_rand_filt), bias_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "z_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z / self.sm_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "per_class_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_softmax * self.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "variable": {
                    "value": "grad_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt.sum(per_sample_grads ** 2, dim=sum_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_90": {
                "variable": {
                    "value": "norm_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_norm / grad_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_98": {
                "mean": {
                    "value": "pt.zeros_like(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "sigma * max_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'model_weights.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "rand_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(load_dir, 'model_random_filters.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pt.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_38": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pt.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_79": {
                "input": {
                    "value": "self.h[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "z_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z.grad.view(-1, 1, self.k * self.n_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "input": {
                    "value": "self.h[:, :, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.z.grad[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "self.rand_filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'model_random_filters.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "per_sample_grads ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "sum_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "grad_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.sqrt(pt.sum(per_sample_grads ** 2, dim=sum_dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/mnist_cnn.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnf.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnf.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnf.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "nnf.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "nnf.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'softmax_mnist_cnn{}.pt'.format('_fashion' if args.fashion else '')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_eval/filter_visualization.py": {
        "torch": {
            "Parameter_85": {
                "variable": {
                    "value": "fake_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pt.Tensor(1, 1, im_hw, im_hw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "fake_batch.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "img_choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_choices[l, m:m + 1, :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_124": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_170": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "effective_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_filt.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights_l[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_eval/gradient_attribution.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "fake_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pt.Tensor(batch_size, 1, im_hw, im_hw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "fake_batch.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "img_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_fun(img_lm)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "fake_batch.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_out[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "grad_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_batch.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_15": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved-models/baseline-cnns/mnist_cnn{}.pt'.format('_fashion' if fashion else '')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trn_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST('../data/fmnist', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('../data/mnist', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tst_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST('../data/fmnist', train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('../data/mnist', train=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trn_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST('../data/fmnist', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('../data/mnist', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tst_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST('../data/fmnist', train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('../data/mnist', train=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}