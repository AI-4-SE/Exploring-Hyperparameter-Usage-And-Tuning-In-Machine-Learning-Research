{
    "alfworld/agents/semantic_graph/semantic_graph.py": {
        "sklearn": {
            "cosine_similarity_483": {
                "X": {
                    "value": "feature1.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "feature2.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_98": {
                "variable": {
                    "value": "tensor_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[node_src], [node_dst]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, word_embed]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "unique_obj_index_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[unique_obj_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, unique_obj_index_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "tensor_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[node_src], [node_dst]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.x, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "self.edge_obj_to_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.edge_obj_to_obj, tensor_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "node_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node_feature, feature_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.x, node_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.attributes, attr_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "self.edge_obj_to_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.edge_obj_to_obj, tensor_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "rgb_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rgb_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[rgb_features[str(k)]]",
                            "List"
                        ],
                        [
                            "torch.tensor(rgb_feature).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "attribute",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attributes[str(k)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_395": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._cat_feature_and_wore_embed(obj_cls, feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self._cat_feature_and_wore_embed(obj_cls, feature)",
                            "Call"
                        ],
                        [
                            "feature.clone().detach()",
                            "Call"
                        ],
                        [
                            "feature.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, word_embed])",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, unique_obj_index_tensor]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature.to(self.device)",
                            "Call"
                        ],
                        [
                            "[csv_nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_395": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_87": {
                "input": {
                    "value": "self.x[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._cat_feature_and_wore_embed(obj_cls, feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self._cat_feature_and_wore_embed(obj_cls, feature)",
                            "Call"
                        ],
                        [
                            "feature.clone().detach()",
                            "Call"
                        ],
                        [
                            "feature.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, word_embed])",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, unique_obj_index_tensor]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature.to(self.device)",
                            "Call"
                        ],
                        [
                            "[csv_nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_205": {
                "input": {
                    "value": "self.attributes[ind][:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "attr_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attr_feature.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_532": {
                "variable": {
                    "value": "obj_attribute",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_attribute, obj_angle_of_view]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_590": {
                "input": {
                    "value": "obj_relations_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sgg_results['obj_relations_scores']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/utils.py": {
        "sklearn": {
            "TSNE_42": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_53": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_123": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_28": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_125": {
                "variable": {
                    "value": "tsne_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[10, 20, 30, 40, 50]",
                            "List"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_tensor_27": {
                "obj": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TSNE(n_components=2).fit_transform(h.detach().cpu().numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/data/preprocess.py": {
        "torch": {
            "save_84": {
                "obj": {
                    "value": "self.vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_dout_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.dout, '%s.vocab' % self.args.pp_folder)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "self.vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_data_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.data, '%s.vocab' % self.args.pp_folder)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/eval/eval.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval/eval_graph.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/eval/eval_seq2seq.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_57": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval/leaderboard.py": {
        "torch": {}
    },
    "alfred/models/eval_moca/eval.py": {
        "torch": {
            "device_58": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_moca/eval_semantic.py": {
        "torch": {}
    },
    "alfred/models/eval_moca/eval_seq2seq.py": {
        "torch": {}
    },
    "alfred/models/eval_moca/eval_subgoals.py": {
        "torch": {
            "zeros_114": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_moca/eval_task.py": {
        "torch": {
            "zeros_94": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_moca/leaderboard.py": {
        "torch": {
            "zeros_88": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_thirdparty/eval.py": {
        "torch": {
            "device_57": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_thirdparty/eval_semantic.py": {
        "torch": {}
    },
    "alfred/models/eval_thirdparty/eval_subgoals.py": {
        "torch": {
            "zeros_114": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_thirdparty/eval_task.py": {
        "torch": {
            "zeros_94": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/eval_thirdparty/leaderboard.py": {
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "prev_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "weight_maskrcnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "cur_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.nonzero().double().mean(dim=0) for m in masks.squeeze(dim=1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/HeteG_noDepth_im.py": {
        "torch": {
            "LSTM_28": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_69": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_235": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_344": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_308": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_88": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_128": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_169": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_172": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_219": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_324": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_264": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_sequence_182": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_188": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_140": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/contrastive_pretrain.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_418": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_423": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_94": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_129": {
                "variable": {
                    "value": "total_loss_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss_neg * contrastive_loss_wt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_222": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/contrastive_pretrain_im.py": {
        "torch": {
            "CosineSimilarity_32": {
                "variable": {
                    "value": "fn_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogSoftmax_33": {
                "variable": {
                    "value": "fn_logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "LSTM_49": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_52": {
                "variable": {
                    "value": "self.LSTM_visual_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.dframe + 300",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.mlp_nlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.mlp_vis_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_90": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_91": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "feature_visal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_feature_visal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_264": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "feature_visal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_feature_visal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_278": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature_visal, embedding_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "all_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_388": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ],
                        [
                            "[trans_color(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[trans_normalize(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames, dim=0)",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_424": {
                "variable": {
                    "value": "feature_visal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_feature_visal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[self.visual_encoder(frame, self.device) for frame in frames]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_482": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_501": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_313": {
                "variable": {
                    "value": "i_cos_compare",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_cos_compare",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[fn_cos(feature[current], feature[pos_samples])]",
                            "List"
                        ],
                        [
                            "torch.stack(i_cos_compare)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_371": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, name_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_464": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_51": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "'cuda:%d' % self.args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_118": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_194": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device).clone().detach() for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_196": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ],
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ],
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_480": {
                "type": {
                    "value": "'cuda:%d' % self.args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_481": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_414": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_206": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device).clone().detach() for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_212": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device).clone().detach() for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/dgl_gcn_hete.py": {
        "torch": {
            "tensor_67": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[csv_nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h['object'], h['subgoal'], h['lowaction']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.final_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_object * h_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "o_feats_dgcn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.final_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_object * h_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "o_feats_dgcn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/dgl_pretrain_hete.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.pred_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "o_feats_dgcn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_node_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(list_predict_node)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_46": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_edge",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(g.edges('eid', etype=c_etype))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_edge",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(g.edges('eid', etype=c_etype))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_47": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_53": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_node",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g.nodes(node).shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_node",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g.nodes(node).shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_54": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_95": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "node_labels[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[train_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "[h_u, h_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/fast_embedding.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_341": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_150": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_170": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/fast_embedding_im.py": {
        "torch": {
            "LSTM_28": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_69": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_238": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_347": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_311": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_88": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_173": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_175": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ],
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ],
                        [
                            "pad_sequence(seqs, batch_first=True, padding_value=self.pad)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_222": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_327": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_267": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_185": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_191": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_faxtText_embedding(vv).to(device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_145": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/gcn.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "A_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/gcn/adjmat_83.dat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "A_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "A_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load('./data/gcn/adjmat_83.dat')",
                            "Call"
                        ],
                        [
                            "np.asarray(np.genfromtxt('./data/gcn/A_108.csv', delimiter=','))",
                            "Call"
                        ],
                        [
                            "torch.tensor(A_raw)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "word_embeddings.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.final_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutfeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(word_embed, self.A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "WEh5.word_embeddings.keys()",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(word_embed, self.A))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc2(x, self.A))",
                            "Call"
                        ],
                        [
                            "x.view(batch_ex_size, -1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(word_embed, self.A))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.repeat(encode_frames.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((encode_frames, x), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc2(x, self.A))",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, self.A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(word_embed, self.A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "WEh5.word_embeddings.keys()",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(word_embed, self.A))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc2(x, self.A))",
                            "Call"
                        ],
                        [
                            "x.view(batch_ex_size, -1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(word_embed, self.A))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.repeat(encode_frames.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((encode_frames, x), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc2(x, self.A))",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encode_frames, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, self.A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.expand(input.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj.expand(support.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(input, self.weight.expand(input.shape[0], -1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_44": {}
        }
    },
    "alfred/models/model/gcn_depth_im.py": {
        "torch": {
            "LSTM_28": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_72": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_296": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat['frames_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_408": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, frames_depth[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_264": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_depth_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_372": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_91": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_175": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_179": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(frame_path, 0)",
                            "Call"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.int).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_251": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_279": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_388": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_load_with_pt()",
                            "Call"
                        ],
                        [
                            "_load_with_path()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat([frames_depth, frames_depth[-1].unsqueeze(0)], dim=0)",
                            "Call"
                        ],
                        [
                            "img_depth",
                            "Name"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(root, self.feat_depth_pt))",
                            "Call"
                        ],
                        [
                            "self.enc_depth(feat['frames_depth'])",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat['frames_depth'], dtype=torch.float, device=self.device)",
                            "Call"
                        ],
                        [
                            "frames_depth.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_depth(frames_depth)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root, self.feat_depth_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_325": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_sequence_189": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_195": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/gcn_im.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_68": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_231": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_341": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_305": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_125": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_165": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_168": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_321": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_260": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_sequence_178": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_184": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.args.gpu_id) if torch.cuda.is_available() and self.args.gpu else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/hete_pretrain_im.py": {
        "torch": {
            "LSTM_28": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_64": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_65": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_287": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat['frames_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_399": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, frames_depth[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_255": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_depth_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_363": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_167": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_170": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(frame_path, 0)",
                            "Call"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.int).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_242": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_270": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_379": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_load_with_pt()",
                            "Call"
                        ],
                        [
                            "_load_with_path()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat([frames_depth, frames_depth[-1].unsqueeze(0)], dim=0)",
                            "Call"
                        ],
                        [
                            "img_depth",
                            "Name"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(root, self.feat_depth_pt))",
                            "Call"
                        ],
                        [
                            "self.enc_depth(feat['frames_depth'])",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat['frames_depth'], dtype=torch.float, device=self.device)",
                            "Call"
                        ],
                        [
                            "frames_depth.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_depth(frames_depth)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root, self.feat_depth_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_316": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_sequence_180": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_186": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda:%d' % self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/heteprtrain.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_343": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_153": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_173": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/merge_meta.py": {
        "torch": {
            "Embedding_50": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_255": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_258": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/merge_meta_im.py": {
        "torch": {
            "cat_370": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_165": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_279": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_282": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_320": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_321": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_342": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_347": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_295": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_302": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "im['instance']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_340": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_177": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/seq2seq_contrastive.py": {
        "torch": {
            "Embedding_33": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_381": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_388": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_165": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_185": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/seq2seq_decomposed.py": {
        "torch": {
            "Embedding_41": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_407": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_410": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "sum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "sum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_232": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_argument.py": {
        "torch": {
            "LSTM_40": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_73": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_74": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[trans_color(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[trans_normalize(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames, dim=0)",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_272": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_378": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, name_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_343": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_157": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_160": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(frame_path)",
                            "Call"
                        ],
                        [
                            "img_depth.resize((224, 224))",
                            "Call"
                        ],
                        [
                            "np.asarray(img_depth) / 255",
                            "BinOp"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "img_depth.view(3, 224, 224)",
                            "Call"
                        ],
                        [
                            "img_depth.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_169": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_174": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_contrastive.py": {
        "torch": {
            "CosineSimilarity_29": {
                "variable": {
                    "value": "fn_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogSoftmax_30": {
                "variable": {
                    "value": "fn_logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.mlp_vis_enc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "25088",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.LSTM_visual_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.dframe + 300",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.mlp_nlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.mlp_vis_enc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_81": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_82": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_244": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[trans_color(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[trans_normalize(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames, dim=0)",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_284": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_296": {
                "variable": {
                    "value": "feature_visal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_feature_visal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.mlp_vis_enc1(frame.view(frame.shape[0], -1)) for frame in frames]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_298": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature_visal, embedding_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "all_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_426": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_445": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_453": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, name_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_333": {
                "variable": {
                    "value": "i_cos_compare",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_cos_compare",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[fn_cos(feature[current], feature[pos_samples])]",
                            "List"
                        ],
                        [
                            "torch.stack(i_cos_compare)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_410": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_47": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_169": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_172": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(frame_path)",
                            "Call"
                        ],
                        [
                            "img_depth.resize((224, 224))",
                            "Call"
                        ],
                        [
                            "np.asarray(img_depth) / 255",
                            "BinOp"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "img_depth.view(3, 224, 224)",
                            "Call"
                        ],
                        [
                            "img_depth.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_369": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_181": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_186": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k or 'embedding_action_low' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_decomposed.py": {
        "torch": {
            "LSTM_50": {
                "variable": {
                    "value": "self.enc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.enc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_95": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_96": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_97": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "exporlation_ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_exploration_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_356": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_374": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_475": {
                "variable": {
                    "value": "out_action_low",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_action_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[out_action_oper[i:i + 1] if is_o else out_action_navi[i:i + 1] for (i, is_o) in enumerate(out_action_navi_or_operation.max(1)[1].tolist())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(out_action_low, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_557": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.action_low_word_to_index[action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_641": {
                "variable": {
                    "value": "alow_navi_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow_navi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_navi_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ],
                        [
                            "p_alow_navi[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow_navi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_navi_low'].view(-1)",
                            "Call"
                        ],
                        [
                            "l_alow_navi[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_649": {
                "variable": {
                    "value": "alow_oper_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow_oper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_operation_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ],
                        [
                            "p_alow_oper[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow_oper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_operation_low'].view(-1)",
                            "Call"
                        ],
                        [
                            "l_alow_oper[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_657": {
                "variable": {
                    "value": "alow_navi_or_operation_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow_navi_or_operation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_navi_or_operation'].view(-1, self.num_action_navi_or_operation)",
                            "Call"
                        ],
                        [
                            "p_alow_navi_or_operation[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow_navi_or_operation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_navi_or_operation'].view(-1)",
                            "Call"
                        ],
                        [
                            "l_alow_navi_or_operation[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.mlp_goal_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.mlp_inst_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.mlp_dec_lstm_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.mlp_graph_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "IMPORTENT_NDOES_FEATURE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config['semantic_cfg'].SCENE_GRAPH.EMBED_FEATURE_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.dhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_82": {
                "variable": {
                    "value": "self.fn_cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogSoftmax_83": {
                "variable": {
                    "value": "self.fn_logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_168": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_257": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_278": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.long) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_281": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_337": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_338": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_556": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_413": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_418": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_269": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_294": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.long) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_298": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.long) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_308": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.long) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_depth.py": {
        "torch": {
            "LSTM_40": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.depth_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dframe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dframedepth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_75": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_76": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[trans_color(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[trans_normalize(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames, dim=0)",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_281": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_387": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, name_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_352": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_164": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_167": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(frame_path)",
                            "Call"
                        ],
                        [
                            "img_depth.resize((224, 224))",
                            "Call"
                        ],
                        [
                            "np.asarray(img_depth) / 255",
                            "BinOp"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "img_depth.view(3, 224, 224)",
                            "Call"
                        ],
                        [
                            "img_depth.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_265": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_311": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_176": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_181": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k or 'depth_images' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_mask.py": {
        "torch": {
            "LSTM_23": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_56": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_217": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_324": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_289": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_149": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_152": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_248": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_161": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_166": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_124": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca.py": {
        "torch": {
            "LSTM_31": {
                "variable": {
                    "value": "self.enc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.enc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_60": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_packed_sequence_243": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_260": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_399": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_174": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_177": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_226": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_379": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_299": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_304": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_165": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_190": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_197": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_graph_map.py": {
        "torch": {
            "tensor_75": {
                "variable": {
                    "value": "feat[frames_instance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(feat['frame_instance'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "feat[frames_instance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "feat[frames_depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(feat['frame_depth'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "feat[frames_depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "feat_graph_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_graph_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_graph_map, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "exporlation_ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_exploration_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_318": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_47": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_152": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequence_230": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_233": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_261": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(img_depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_314": {
                "obj": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_load_with_pt()",
                            "Call"
                        ],
                        [
                            "_load_with_path()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "img_depth",
                            "Name"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.load(path_pt)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path_pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_65": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_246": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_253": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_252": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_importent_nodes.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_mini_mask_depth.py": {
        "torch": {
            "cat_103": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_180": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_270": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_273": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_301": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_262": {
                "tensors": {
                    "value": "[im['depth'], im['depth'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "[im['instance'], im['instance'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_286": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_293": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_mini_mask_depth_big_change.py": {
        "torch": {
            "cat_89": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_66": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_mini_test.py": {
        "torch": {
            "cat_90": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_144": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_234": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_237": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_265": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[im['depth'], im['depth'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "[im['instance'], im['instance'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_250": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_257": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_semantic.py": {
        "torch": {
            "LSTM_50": {
                "variable": {
                    "value": "self.enc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.enc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_81": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_82": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_146": {
                "variable": {
                    "value": "exporlation_ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_exploration_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_311": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_328": {
                "variable": {
                    "value": "(enc_lang, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_semantic_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cross_entropy_485": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ],
                        [
                            "p_alow[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ],
                        [
                            "l_alow[pad_valid]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_37": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_221": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_242": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_245": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_294": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_295": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_370": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_375": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_258": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_265": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_moca_sgg.py": {
        "torch": {
            "cat_101": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_325": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_45": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_238": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_241": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_270": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_load_with_pt()",
                            "Call"
                        ],
                        [
                            "_load_with_path()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "img_depth",
                            "Name"
                        ],
                        [
                            "torch.cat([frames_depth, img_depth], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.load(path_pt)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path_pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_63": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_254": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_261": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_260": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(self.args.gpu_id) if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_semantic.py": {
        "torch": {
            "LSTM_63": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.depth_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dframe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dframedepth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.lang_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_98": {
                "variable": {
                    "value": "self.bce_with_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[trans_color(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[trans_normalize(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames, dim=0)",
                            "Call"
                        ],
                        [
                            "self.vis_dropout(feat['frames'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_358": {
                "variable": {
                    "value": "(enc_lang_goal_instr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "enc_lang_goal_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_semantic_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_466": {
                "variable": {
                    "value": "action_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vocab['action_low'].word2index(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_485": {
                "variable": {
                    "value": "alow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['out_action_low'].view(-1, len(self.vocab['action_low']))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "l_alow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat['action_low'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "flat_alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat['action_low_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, name_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_450": {
                "variable": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alow_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alow_mask[:pad_start_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(alow_mask)",
                            "Call"
                        ],
                        [
                            "alow_mask[:stop_start_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_65": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_195": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_198": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(frame_path)",
                            "Call"
                        ],
                        [
                            "img_depth.resize((224, 224))",
                            "Call"
                        ],
                        [
                            "np.asarray(img_depth) / 255",
                            "BinOp"
                        ],
                        [
                            "np.zeros(img_depth.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.tensor(img_depth, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "img_depth.view(3, 224, 224)",
                            "Call"
                        ],
                        [
                            "img_depth.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_344": {
                "input": {
                    "value": "cont_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_388": {
                "input": {
                    "value": "self.r_state['cont_lang']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_207": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(ex['plan']['low_actions'])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[im, im[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_214": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=self.device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=self.device, dtype=torch.float if 'frames' in k or 'depth_images' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k or 'depth_images' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_im_thirdpartyview.py": {
        "torch": {
            "cat_347": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_171": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, self.feat_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_263": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_266": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_word(pad_seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, v)))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_294": {
                "input": {
                    "value": "cont_lang_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_295": {
                "input": {
                    "value": "cont_lang_instr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_319": {
                "input": {
                    "value": "self.r_state['cont_lang_goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_324": {
                "input": {
                    "value": "self.r_state['cont_lang_instr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vvv for vv in v for vvv in vv]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_250": {
                "tensors": {
                    "value": "im['feat_conv'][keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_251": {
                "tensors": {
                    "value": "im['feat_conv_1'][keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_252": {
                "tensors": {
                    "value": "im['feat_conv_2'][keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "[im['feat_conv'], im['feat_conv'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "[im['feat_conv_1'], im['feat_conv_1'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[im['feat_conv_2'], im['feat_conv_2'][-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_279": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_286": {
                "variable": {
                    "value": "pad_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(vv, device=device) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([vvv for vv in v for vvv in vv], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float) for vv in v]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(vv, device=device, dtype=torch.float if 'frames' in k else torch.long) for vv in v]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if self.args.gpu else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float if 'frames' in k else torch.long",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/model/seq2seq_moca.py": {
        "torch": {
            "Embedding_50": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_379": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_187": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_207": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/seq2seq_moca_semantic.py": {
        "torch": {
            "Embedding_50": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_388": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_393": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_215": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/model/seq2seq_semantic.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.emb_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "self.emb_action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['action_low'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.demb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_352": {
                "variable": {
                    "value": "save",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_359": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_162": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_182": {
                "obj": {
                    "value": "{'metric': stats, 'model': self.state_dict(), 'optim': optimizer.state_dict(), 'args': self.args, 'vocab': self.vocab}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fsave",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dout, 'best_seen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'best_unseen.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'net_epoch_%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.dout, 'latest.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfred/models/nn/resnet.py": {
        "torch": {
            "stack_109": {
                "variable": {
                    "value": "images_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(i) for i in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_16": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_114": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_68": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_137": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_140": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_141": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_142": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.shape[2], x.shape[3], x.shape[4])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(len_batch, len_traj, x.shape[1])",
                            "Call"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_189": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_191": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_192": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_194": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_279": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_283": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_284": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_334": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_335": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_396": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_398": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_399": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_401": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_402": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_403": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_447": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_448": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_515": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_516": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_517": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_518": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_519": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_523": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_524": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_525": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_527": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn + dframedepth + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_529": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_530": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_531": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_532": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_563": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_566": {
                "variable": {
                    "value": "action_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ],
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ],
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ],
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_t)",
                            "Call"
                        ],
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ],
                        [
                            "action_emb_t.mm(self.emb.weight.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_571": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_572": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_658": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_661": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_662": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_663": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_664": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_665": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_666": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_669": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_670": {
                "variable": {
                    "value": "self.h_tm1_fc_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_672": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_673": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn + dframedepth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_702": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_709": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_710": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_769": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_772": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_773": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_774": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_775": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_776": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_777": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_780": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_781": {
                "variable": {
                    "value": "self.h_tm1_fc_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_783": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_784": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + dgcn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_804": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_813": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t, inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_820": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_821": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_872": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_873": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_874": {
                "variable": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.h_tm1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_875": {
                "variable": {
                    "value": "self.h_tm1_fc_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.h_tm1_fc_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_16": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "DataParallelDevice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding, vis_depth_feat_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, vis_depth_feat_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding, vis_depth_feat_t, feat_semantic_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, vis_depth_feat_t, feat_semantic_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_semantic_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, gcn_embedding, frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t, weighted_lang_t, e_t, frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_255": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_257": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_370": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_371": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_372": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_374": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_483": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_484": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_485": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_486": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_487": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_632": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_633": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_634": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_635": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_636": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_742": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_743": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_744": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_745": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_746": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_853": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_854": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_855": {
                "tensors": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_856": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_857": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_606": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.semantic_graph_implement.RESULT_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn2.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_77": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_key_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_key_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_query_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_query_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_112": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_key(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_query(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "weighted_lang_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_wise_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value * softmax",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_175": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_184": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_211": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_212": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_215": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_218": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_284": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_347": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_348": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_351": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_352": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_353": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_354": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_355": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_366": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + SEMANTIC_GRAPH_RESULT_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_semantic_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_semantic_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_419": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_420": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_508": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_509": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_516": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_517": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_518": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_519": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_520": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_521": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_523": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_528": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_529": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_531": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_583": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_586": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_590": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_591": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_720": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_721": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_728": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_729": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_730": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_731": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_732": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_733": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_735": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_740": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_741": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_743": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_744": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_773": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_777": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_795": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_799": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_802": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_806": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_807": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_936": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_937": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_943": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_944": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_945": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_946": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_947": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_948": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_950": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_955": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_956": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_958": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_959": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1000": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1004": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1022": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1026": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1029": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1033": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1034": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1185": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1186": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1192": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1193": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1194": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1195": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1196": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1197": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1199": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1204": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1205": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1207": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1208": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1249": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1253": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1271": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1275": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1278": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1282": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1283": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1419": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1420": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1426": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1427": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1428": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1429": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1430": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1431": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1433": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1438": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1439": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1441": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1442": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1478": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1482": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1500": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1504": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1507": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1511": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1512": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1666": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1667": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1673": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1674": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1675": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1676": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1677": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1678": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1680": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1685": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1686": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1688": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1689": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1728": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1732": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1752": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1756": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1759": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1763": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1764": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1914": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + demb + self.IMPORTENT_NDOES_FEATURE + self.IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1915": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1921": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1922": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1923": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1924": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1925": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1926": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1928": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1934": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1935": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1971": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weighted_lang_t_goal, e_t, feat_history_changed_nodes_graph, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1975": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1995": {
                "variable": {
                    "value": "cont_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_goal, h_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2006": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2007": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_2158": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_2159": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2165": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2166": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2167": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2168": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_2169": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2170": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_2172": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2177": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2178": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2180": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2181": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2223": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2227": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2245": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2249": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2252": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2256": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2257": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_semantic_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_semantic_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_659": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_873": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_874": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_875": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1085": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1086": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1087": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1088": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1356": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1357": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1358": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1359": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1565": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1566": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1567": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1568": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1815": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1816": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1817": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1818": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2058": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2059": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2060": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2061": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2192": {
                "tensors": {
                    "value": "[vis_feat_t, vis_feat_t_1, vis_feat_t_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2302": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2303": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2304": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_goal)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2305": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_key(value))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_query(h)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_163": {
                "input": {
                    "value": "frame.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "node_feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_319": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_320": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_321": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_322": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_323": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_324": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_359": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_360": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_479": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_480": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_481": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_482": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_483": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_484": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_524": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_525": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_687": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_688": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_689": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_690": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_691": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_692": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_736": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_737": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_903": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_904": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_905": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_906": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_907": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_908": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_951": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_951": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_952": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1117": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1118": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1119": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1120": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1121": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1122": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1200": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1201": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1388": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1389": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1390": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1391": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1392": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1393": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1434": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1435": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1597": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1598": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1599": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1600": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1601": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1602": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1681": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1682": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1847": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1848": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1849": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1850": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1851": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1852": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1929": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1929": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1930": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2090": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2091": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2092": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2093": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2094": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2095": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2173": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_2173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_2174": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2334": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2335": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2336": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2337": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2338": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2339": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_650": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_652": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_866": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_868": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1073": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1075": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1077": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1079": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1344": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1346": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1348": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1350": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1553": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1555": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1557": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1559": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1803": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1805": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1807": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1809": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2046": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2048": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2050": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2052": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2290": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2292": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2294": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2296": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_456": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.semantic_graph_implement.RESULT_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn3.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.maskConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(attention)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_94": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_97": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_100": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "input * attention",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.attentions(x)",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "input * attention",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.attentions(x)",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_key_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_key_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_query_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_query_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_133": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_key(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_query(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "weighted_lang_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_wise_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value * softmax",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_154": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_168": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_196": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_205": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_241": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_242": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_252": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_253": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.actor_navi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.actor_oper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.action_navi_or_operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_action_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.mask_dec_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_351": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_352": {
                "variable": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_499": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_526": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_527": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_534": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_535": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_536": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_537": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_540": {
                "variable": {
                    "value": "self.actor_navi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.actor_oper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_542": {
                "variable": {
                    "value": "self.action_navi_or_operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_action_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "variable": {
                    "value": "self.mask_dec_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_551": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_595": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_599": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_635": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_636": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_637": {
                "variable": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_783": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_810": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_811": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_818": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_819": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_820": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_821": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_822": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_824": {
                "variable": {
                    "value": "self.actor_navi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_825": {
                "variable": {
                    "value": "self.actor_oper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_826": {
                "variable": {
                    "value": "self.action_navi_or_operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_action_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_829": {
                "variable": {
                    "value": "self.mask_dec_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_835": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_837": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_838": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_879": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_883": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_900": {
                "variable": {
                    "value": "mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_905": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_912": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_915": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_919": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_920": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_921": {
                "variable": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_navi_or_operation_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "self.action_navi_or_operation(self.actor_dropout(cont_t_instr))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(action_navi_or_operation_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1088": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ],
                        [
                            "gold[:, t]",
                            "Subscript"
                        ],
                        [
                            "self.chose_embed_index(action_navi_t, action_oper_t, action_navi_or_operation_t)",
                            "Call"
                        ],
                        [
                            "[w_t_oper[i] if is_o else w_t_navi[i] for (i, is_o) in enumerate(navi_or_operation_t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(w_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_406": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_694": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_984": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_global_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_985": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_current_state_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_986": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_history_changed_nodes_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_987": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "self.dynamic_node(feat_priori_graph, weighted_lang_t_instr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1029": {
                "variable": {
                    "value": "contrastive_data[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_140": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_key(value))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_query(h)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_184": {
                "input": {
                    "value": "frame.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_211": {
                "input": {
                    "value": "node_feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_262": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_443": {
                "tensors": {
                    "value": "actions_navi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_444": {
                "tensors": {
                    "value": "actions_oper",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_445": {
                "tensors": {
                    "value": "actions_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_446": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_447": {
                "tensors": {
                    "value": "masks_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_448": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_449": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_450": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_451": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_547": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_728": {
                "tensors": {
                    "value": "actions_navi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_729": {
                "tensors": {
                    "value": "actions_oper",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_730": {
                "tensors": {
                    "value": "actions_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_731": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_732": {
                "tensors": {
                    "value": "masks_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_733": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_734": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_735": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_736": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_830": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_831": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1031": {
                "tensors": {
                    "value": "actions_navi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1032": {
                "tensors": {
                    "value": "actions_oper",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1033": {
                "tensors": {
                    "value": "actions_navi_or_operation",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1034": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1035": {
                "tensors": {
                    "value": "masks_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1036": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1037": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1038": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1039": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_394": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_679": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_681": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_683": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_685": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_972": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_974": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_976": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_978": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn4.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_77": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_key_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_key_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_query_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_query_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_112": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_key(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_query(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "weighted_lang_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_wise_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value * softmax",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_175": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_184": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_212": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_213": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_218": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_290": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_355": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_356": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_359": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_360": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_362": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_363": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_431": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_432": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_582": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_583": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_589": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_590": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_591": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_592": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_596": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_601": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_602": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_604": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_605": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_frames_conv, vis_feat_t_goal_frames_conv_1, vis_feat_t_goal_frames_conv_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_650": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_frames_conv, vis_feat_t_instr_frames_conv_1, vis_feat_t_instr_frames_conv_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "cont_t_instr_with_subgoal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_682": {
                "variable": {
                    "value": "cont_t_instr_with_progress",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_history_changed_nodes_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_686": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr_with_subgoal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_687": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr_with_progress)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[vis_feat_t, vis_feat_t_1, vis_feat_t_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_484": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_616": {
                "tensors": {
                    "value": "[vis_feat_t, vis_feat_t_1, vis_feat_t_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_732": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_733": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_734": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_735": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_key(value))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_query(h)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_163": {
                "input": {
                    "value": "frame.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "node_feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_326": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_327": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_328": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_329": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_330": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_331": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_368": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_515": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_516": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_517": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_518": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_519": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_520": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_597": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_598": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_764": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_765": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_766": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_767": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_768": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_769": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_720": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_722": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_724": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_726": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn5.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_77": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_key_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_key_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_query_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_query_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_112": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_key(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_query(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "weighted_lang_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_wise_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value * softmax",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_175": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_184": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_215": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_216": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_296": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_402": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_403": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_406": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_407": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_409": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_410": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_413": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_419": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_421": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_480": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_481": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_714": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_715": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_717": {
                "variable": {
                    "value": "self.cell_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_719": {
                "variable": {
                    "value": "self.graph_hidden_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, graph_hidden_down)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_723": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_724": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_725": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_726": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_727": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_728": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + graph_hidden_down + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_730": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_736": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + graph_hidden_down + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_737": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + graph_hidden_down + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_768": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_772": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_778": {
                "variable": {
                    "value": "inp_t_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weighted_lang_t_graph, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_799": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_802": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, h_t_graph, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_807": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_808": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_902": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_903": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_906": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_907": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_908": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_909": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_910": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_911": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_913": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_918": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_919": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_921": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_922": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_951": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_952": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_955": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_959": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_976": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_979": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_984": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_985": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1058": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1060": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1062": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1064": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_1092": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1093": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1096": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1097": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1098": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1099": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1100": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1101": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1103": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1108": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1109": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1111": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1112": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1141": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1142": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1145": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1149": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1166": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1169": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1174": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1175": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1341": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1342": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1345": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1349": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1366": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1369": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1374": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1375": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1414": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1415": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1418": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1422": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1439": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1442": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1447": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1448": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1543": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1544": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1547": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1548": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1549": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1550": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1551": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1552": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1554": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1559": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1560": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1562": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1563": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1592": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1593": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1596": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1600": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1617": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1620": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1625": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1626": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1652": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1653": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1656": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1657": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1658": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1659": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1660": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1661": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1663": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1668": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1669": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1671": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1672": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1702": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1703": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1706": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1710": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1727": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1730": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1735": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1736": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1758": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1759": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1762": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1763": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1764": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1765": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1766": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1767": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1769": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1774": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1775": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1777": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1778": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1807": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1811": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1828": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1831": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1836": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1837": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_1985": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_1986": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1989": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1990": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1991": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1992": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1993": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1994": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1996": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2001": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2002": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2004": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2005": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2034": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2038": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2055": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2058": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2063": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2064": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_2212": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_2213": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2216": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2217": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2218": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2219": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_2220": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2221": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_2223": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2228": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2229": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2231": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2232": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2261": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2265": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2282": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2285": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2290": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2291": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_2439": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_2440": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2443": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2444": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2445": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2446": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_2447": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2448": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_2450": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2455": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2456": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2458": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2459": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2488": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph, feat_priori_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2492": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph, feat_priori_graph, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2509": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2512": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2517": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2518": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_2667": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_2668": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2671": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2672": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2673": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2674": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_2675": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2676": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_2678": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2683": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2684": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2686": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2687": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2716": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2720": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2737": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2740": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2745": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2746": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_2894": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_2895": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2898": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2899": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2900": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_2901": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_2902": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2903": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_2905": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_2910": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2911": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_2913": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2914": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2946": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2950": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2968": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2971": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2976": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_2977": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_3127": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_3128": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_3131": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_3132": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_3133": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_3134": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_3135": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_3136": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_3138": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_3143": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_3144": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_3146": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_3147": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3179": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3183": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_priori_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3201": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3204": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_3209": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_3210": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_513": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_594": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_596": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_598": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_600": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_651": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_652": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_654": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_839": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_841": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1014": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1015": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1016": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1017": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1207": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1208": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1209": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1210": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1290": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1292": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1294": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1296": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1478": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1479": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1480": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1481": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1888": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1889": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1890": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1891": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2115": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2116": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2117": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2118": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2342": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2343": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2344": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2345": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2569": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2570": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2571": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2572": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2797": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2798": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2799": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2800": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3030": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3031": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3032": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3033": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3263": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3264": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3265": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3266": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_key(value))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_query(h)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_163": {
                "input": {
                    "value": "frame.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "node_feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_357": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_358": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_359": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_360": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_361": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_362": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_415": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_543": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_544": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_545": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_546": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_547": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_548": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_683": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_684": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_685": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_686": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_687": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_688": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_720": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "graph_hidden_down",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_872": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_873": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_874": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_875": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_876": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_877": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_914": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_914": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_915": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1046": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1047": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1048": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1049": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1050": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1051": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1104": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1105": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1239": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1240": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1241": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1242": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1243": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1244": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1510": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1511": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1512": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1513": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1514": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1515": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1555": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1556": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1664": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1664": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1665": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1770": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1770": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1771": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1920": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1921": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1922": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1923": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1924": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1925": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1997": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1998": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2147": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2148": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2149": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2150": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2151": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2152": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2224": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_2224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_2225": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2374": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2375": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2376": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2377": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2378": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2379": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2451": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_2451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_2452": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2601": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2602": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2603": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2604": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2605": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2606": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2679": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_2679": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_2680": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2829": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2830": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2831": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2832": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2833": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2834": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_2906": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_2906": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_2907": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3062": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3063": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3064": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3065": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3066": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3067": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_3139": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_3139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_3140": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3295": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3296": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3297": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3298": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3299": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_3300": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1876": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1878": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1880": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1882": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2103": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2105": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2107": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2109": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2330": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2332": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2334": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2336": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2557": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2559": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2561": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2563": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2785": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2787": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2789": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2791": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3018": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3020": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3022": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3024": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3251": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3253": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3255": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3257": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/nn/vnn5_graph_map.py": {
        "torch": {}
    },
    "alfred/models/nn/vnn5_sgg.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flattened_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dframe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hshape[0] * hshape[1] * hshape[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_77": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.dconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.dconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "variable": {
                    "value": "self.dconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flattened_size)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.d1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, *self.hshape)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.dconv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.pframe, self.pframe), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.pframe, self.pframe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_key_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_key_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_query_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_query_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_112": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_key(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_query(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "weighted_lang_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_wise_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value * softmax",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_175": {
                "variable": {
                    "value": "self.filter_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[df1, df2, df3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_184": {
                "variable": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([df1, df2, df3]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.filter_activation(dynamic_filters)",
                            "Call"
                        ],
                        [
                            "F.normalize(dynamic_filters, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_217": {
                "variable": {
                    "value": "self.cell_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_218": {
                "variable": {
                    "value": "self.cell_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "dhid + dframe + demb + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE + IMPORTENT_NDOES_FEATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.hstate_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hstate_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_224": {
                "variable": {
                    "value": "self.actor_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "actor_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_225": {
                "variable": {
                    "value": "self.vis_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(demb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.mask_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dhid, dhid // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.h_tm1_fc_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.h_tm1_fc_instr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.subgoal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dhid + dhid + dframe + demb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_247": {
                "variable": {
                    "value": "self.conv_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "sgg_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "sgg_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "vis_feat_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal_instance, vis_feat_t_goal_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "vis_feat_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr_instance, vis_feat_t_instr_frames_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "inp_t_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_goal, weighted_lang_t_goal, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t, feat_current_state_graph, feat_priori_graph, feat_global_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "inp_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_feat_t_instr, weighted_lang_t_instr, e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "cont_t_instr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_instr, inp_t_instr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_307": {
                "variable": {
                    "value": "subgoal_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subgoal(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_308": {
                "variable": {
                    "value": "progress_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.progress(cont_t_instr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_global_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_global_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_current_state_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_current_state_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_history_changed_nodes_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_history_changed_nodes_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_priori_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_priori_graph, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "global_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "variable": {
                    "value": "current_state_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "history_changed_nodes_graph_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "priori_importent_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.IMPORTENT_NDOES_FEATURE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_key(value))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc_query(h)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_163": {
                "input": {
                    "value": "frame.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "node_feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dynamic_filters.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "in_features": {
                    "value": "dhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "dhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "119",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_371": {
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_372": {
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "tensors": {
                    "value": "attn_scores_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_374": {
                "tensors": {
                    "value": "attn_scores_instr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_375": {
                "tensors": {
                    "value": "subgoals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_376": {
                "tensors": {
                    "value": "progresses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/train/train_graph.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dout, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_83": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_124": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/train/train_parallel.py": {
        "torch": {
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dout, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_88": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_127": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_129": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/train/train_semantic.py": {
        "torch": {
            "manual_seed_161": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dout, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_188": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_207": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/train/train_seq2seq.py": {
        "torch": {
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dout, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_108": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data, '%s.vocab' % args.pp_folder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_85": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu_id if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_120": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "'cuda:%d' % args.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/utils/eval_debug.py": {
        "torch": {}
    },
    "alfred/models/utils/extract_resnet.py": {
        "torch": {
            "save_118": {
                "obj": {
                    "value": "feat_img_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root, args.str_save_ft_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "alfred/models/utils/helper_utils.py": {
        "torch": {}
    },
    "alfred/models/utils/save_video.py": {
        "torch": {}
    },
    "alfworld/agents/agent/base_agent.py": {
        "torch": {
            "Adam_114": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['general']['training']['optimizer']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "res_representations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_len(action_candidate_list)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.online_net.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "res_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_len(action_candidate_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "self.online_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_319": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_batch_cand_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp_batch_cand_mask.byte().any(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_320": {
                "variable": {
                    "value": "tmp_batch_cand_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_batch_cand_representation_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_321": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(tmp_batch_cand_mask, -1)",
                            "Call"
                        ],
                        [
                            "_mask + tmp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_263": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_265": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_146": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/butler_semantic_agent.py": {
        "torch": {
            "stack_77": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_77": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_vision_obs, aggregated_obs_representation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "obs_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_vision_obs.shape[1] + obs_mask.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_vision_obs, aggregated_obs_representation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "obs_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_vision_obs.shape[1] + obs_mask.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_221": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.vision_decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_225": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "le_222": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.vision_decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_223": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/oracle_sgg_dagger_agent.py": {
        "torch": {
            "stack_488": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_488": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_676": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_feat_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "graph_embed_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph_embed_feature, current_state_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "graph_embed_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph_embed_feature, history_changed_nodes_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_459": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_483": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__502": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_534": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_585": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_419": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_419": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_422": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_638": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.vision_decode(input_target, target_mask, vision_td, vision_td_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, vision_td, vision_td_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_642": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "le_639": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.vision_decode(input_target, target_mask, vision_td, vision_td_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "self.online_net.vision_decode(input_target, target_mask, vision_td, vision_td_mask, current_dynamics)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_640": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/text_dagger_agent.py": {
        "torch": {
            "log_softmax_29": {
                "variable": {
                    "value": "pred_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_30": {
                "variable": {
                    "value": "action_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(action_rank, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_95": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_146": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_146": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_185": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__75": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__104": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__152": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__194": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_321": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_325": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_25": {
                "input": {
                    "value": "action_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "le_322": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_323": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/text_dqn_agent.py": {
        "torch": {
            "argmax_48": {
                "variable": {
                    "value": "action_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_500": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_566": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_566": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_567": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_567": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_637": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_710": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_710": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_711": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_711": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_814": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_915": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_915": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_916": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_916": {
                "variable": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_562": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__585": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_706": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__729": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_911": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__933": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_655": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_233": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_237": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ],
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gt_371": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_375": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ],
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_441": {
                "tensors": {
                    "value": "current_dynamics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack(current_dynamics, 0) if self.recurrent else None",
                            "IfExp"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, prev_dynamics) if prev_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_587": {
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_664": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_680": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_731": {
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_861": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_935": {
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_44": {
                "input": {
                    "value": "action_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "le_234": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_235": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "le_372": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_373": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/vision_dagger_agent.py": {
        "torch": {
            "softmax_78": {
                "variable": {
                    "value": "pred_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_207": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_263": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_263": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_333": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_feat_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "class_logits.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_106": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > module.score_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__224": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_244": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_260": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__271": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "vision_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_294": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_48": {
                "variable": {
                    "value": "self.avg2dpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(13, 13)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "image_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.transform(i).cuda() if self.use_gpu else self.transform(i) for i in images]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(image_tensors, dim=0)",
                            "Call"
                        ],
                        [
                            "[self.transform(i).cuda() if self.use_gpu else self.transform(i) for i in images]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "(1, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/dagger/save_expert_data.py": {
        "torch": {
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/dagger/train_butler_semantic_dagger.py": {
        "torch": {
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/dagger/train_sgg_vision_dagger.py": {
        "torch": {
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/dagger/train_sgg_vision_dagger_without_env.py": {
        "torch": {
            "stack_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/dagger/train_vision_dagger.py": {
        "torch": {
            "cat_136": {
                "tensors": {
                    "value": "[ef, obs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_butler_semantic_dagger.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_dagger.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_dqn.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_semantic_graph_dagger.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_vision_dagger.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "[ef, obs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/algo/ppo.py": {
        "torch": {
            "Adam_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, actor_critic.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_72": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_log_probs - sample['old_action_log_probs']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__94": {
                "parameters": {
                    "value": "self.actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(action_log_probs - sample['old_action_log_probs'])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_77": {
                "input": {
                    "value": "surr1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ratio * adv_targ",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "value_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(values - returns).pow(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/arguments.py": {
        "torch": {
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_172": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_194": {
                "device": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(num_gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_device_properties_197": {
                "device": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(num_gpus)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/main.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_94": {
                "variable": {
                    "value": "g_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "l_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "full_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "full_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "full_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "local_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "local_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "local_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "local_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "poses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([infos[env_idx]['sensor_pose'] for env_idx in range(num_scenes)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "global_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "local_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "local_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "global_orientation",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "variable": {
                    "value": "local_rec_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "l_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_118": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_129": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_240": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_slam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_249": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_258": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_grad_enabled_326": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_289": {
                "kernel_size": {
                    "value": "args.global_downscaling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "variable": {
                    "value": "poses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([infos[env_idx]['sensor_pose'] for env_idx in range(num_scenes)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_468": {
                "variable": {
                    "value": "g_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([infos[env_idx]['exp_reward'] for env_idx in range(num_scenes)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_522": {
                "variable": {
                    "value": "g_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scenes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_processes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_grad_enabled_538": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_625": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "origins[e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_344": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_356": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_383": {
                "variable": {
                    "value": "env_poses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(infos[env_idx]['sensor_pose'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_386": {
                "variable": {
                    "value": "env_gt_fp_projs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(infos[env_idx]['fp_proj'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "env_gt_fp_projs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "env_gt_fp_explored",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(infos[env_idx]['fp_explored'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_389": {
                "variable": {
                    "value": "env_gt_fp_explored",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_392": {
                "variable": {
                    "value": "env_gt_pose_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(infos[env_idx]['pose_err'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_487": {
                "variable": {
                    "value": "exp_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([infos[env_idx]['exp_ratio'] for env_idx in range(num_scenes)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_452": {
                "kernel_size": {
                    "value": "args.global_downscaling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_561": {
                "variable": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_proj_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_fp_projs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_fp_projs.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_567": {
                "variable": {
                    "value": "exp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_fp_exp_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_fp_explored",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_fp_explored.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_698": {
                "obj": {
                    "value": "nslam_module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model_best.slam')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_705": {
                "obj": {
                    "value": "l_policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model_best.local')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_714": {
                "obj": {
                    "value": "g_policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model_best.global')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_723": {
                "obj": {
                    "value": "nslam_module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dump_dir, 'periodic_{}.slam'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_727": {
                "obj": {
                    "value": "l_policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dump_dir, 'periodic_{}.local'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_731": {
                "obj": {
                    "value": "g_policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dump_dir, 'periodic_{}.global'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_427": {
                "ndarray": {
                    "value": "origins[e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_445": {
                "ndarray": {
                    "value": "origins[e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/model.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * 32 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.orientation_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "72",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.resnet_l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[0:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*filter(bool, [nn.Conv2d(512, 64, (1, 1), stride=(1, 1)), nn.ReLU()])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "input_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.screen_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.screen_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.proj2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*filter(bool, [nn.ConvTranspose2d(64, 32, (4, 4), stride=(2, 2), padding=(1, 1)), nn.ReLU(), nn.ConvTranspose2d(32, 16, (4, 4), stride=(2, 2), padding=(1, 1)), nn.ReLU(), nn.ConvTranspose2d(16, 2, (4, 4), stride=(2, 2), padding=(1, 1))])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.pose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*filter(bool, [nn.Conv2d(4, 64, (4, 4), stride=(2, 2)), nn.ReLU(), nn.Conv2d(64, 32, (4, 4), stride=(2, 2)), nn.ReLU(), nn.Conv2d(32, 16, (3, 3), stride=(1, 1)), nn.ReLU()])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.pose_proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pose_conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.pose_proj2_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.pose_proj2_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.pose_proj2_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.pose_proj3_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.pose_proj3_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.pose_proj3_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "self.st_poses_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_processes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "self.st_poses_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.slam_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "self.grid_map_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_processes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vision_range * 2",
                            "BinOp"
                        ],
                        [
                            "vr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "grid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vision_range * 2",
                            "BinOp"
                        ],
                        [
                            "vr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "self.grid_map_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.slam_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vision_range * 2",
                            "BinOp"
                        ],
                        [
                            "vr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "grid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vision_range * 2",
                            "BinOp"
                        ],
                        [
                            "vr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "self.agent_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_processes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.map_size_cm // self.resolution",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.map_size_cm // self.resolution",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deconv_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.deconv(deconv_input)",
                            "Call"
                        ],
                        [
                            "self.deconv(deconv_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "pose_est_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred.detach(), pred_last_st.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "pose_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_dx, pred_dy, pred_do)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.resnet_l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[0:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*filter(bool, [nn.Conv2d(512, 64, (1, 1), stride=(1, 1)), nn.ReLU()])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_326": {
                "variable": {
                    "value": "input_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size - 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_337": {
                "variable": {
                    "value": "self.embedding_angle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "72",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_338": {
                "variable": {
                    "value": "self.embedding_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.policy_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_373": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(self.linear1(x))",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(self.linear2(x))",
                            "Call"
                        ],
                        [
                            "torch.zeros(extras.size(0), 3)",
                            "Call"
                        ],
                        [
                            "torch.cat((proj1, angle_emb, dist_emb), 1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(self.linear(x))",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=1)(self.policy_linear(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.pose_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_185": {
                "variable": {
                    "value": "pred_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deconv_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.deconv(deconv_input)",
                            "Call"
                        ],
                        [
                            "self.deconv(deconv_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_208": {
                "variable": {
                    "value": "translated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.grid_map_eval.detach_()",
                            "Call"
                        ],
                        [
                            "self.grid_map_train.detach_()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_209": {
                "variable": {
                    "value": "rotated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(grid_map, trans_mat)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(rotated, trans_mat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_333": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "extras.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj1, angle_emb, dist_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.vision_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.vision_range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_284": {
                "variable": {
                    "value": "rotated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.agent_view.detach_()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_285": {
                "variable": {
                    "value": "translated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(translated, rot_mat)",
                            "Call"
                        ],
                        [
                            "rotated[:, :, vr:, int(vr / 2):int(vr / 2 + vr)]",
                            "Subscript"
                        ],
                        [
                            "F.grid_sample(agent_view, rot_mat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "maps2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(maps.unsqueeze(1), translated[:, :1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "explored2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(explored.unsqueeze(1), translated[:, 1:, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_371": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_100": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_102": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fmod_266": {
                "input": {
                    "value": "pose[:, 2] - 180.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "360.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fmod_267": {
                "input": {
                    "value": "pose[:, 2] + 180.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "360.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_257": {
                "input": {
                    "value": "pose[:, 2] / 57.29577951308232",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_259": {
                "input": {
                    "value": "pose[:, 2] / 57.29577951308232",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_261": {
                "input": {
                    "value": "pose[:, 2] / 57.29577951308232",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_263": {
                "input": {
                    "value": "pose[:, 2] / 57.29577951308232",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/utils/distributions.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "action_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/utils/model.py": {
        "torch": {
            "stack_28": {
                "variable": {
                    "value": "theta11",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cos_t, -sin_t, torch.zeros(cos_t.shape).float().to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "theta12",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sin_t, cos_t, torch.zeros(cos_t.shape).float().to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "theta1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta11, theta12]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "theta21",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(x.shape).to(device), -torch.zeros(x.shape).to(device), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "theta22",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(x.shape).to(device), torch.ones(x.shape).to(device), y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "theta2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta21, theta22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_40": {
                "variable": {
                    "value": "rot_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([theta11, theta12], 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(grid_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_41": {
                "variable": {
                    "value": "trans_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([theta21, theta22], 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(grid_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_51": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pose[:, 0]",
                            "Subscript"
                        ],
                        [
                            "x.view(n, c, w * h).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, N, x.size(1))",
                            "Call"
                        ],
                        [
                            "torch.stack(outputs, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(T * N, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_88": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "recurrent_input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "cos_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "cos_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/Neural_SLAM/utils/optimization.py": {
        "torch": {}
    },
    "alfworld/agents/graph_map/Neural_SLAM/utils/storage.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "self.obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.rec_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "rec_state_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.value_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.returns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.action_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_steps, num_processes, self.n_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "action_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_36": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_103": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(range(batch_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "mini_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size // num_mini_batch",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_129": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_steps + 1, num_processes, extras_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(obs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "value_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(value_preds, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(returns, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "old_action_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "old_action_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(old_action_log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "adv_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_targ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(adv_targ, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_103": {
                "indices": {
                    "value": "range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "extras",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "extras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(extras, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "batch_size * [torch.zeros(self.batch_in_sizes[dim]).unsqueeze(0)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_247": {
                "tensors": {
                    "value": "batch_size * [torch.zeros(self.batch_out_sizes[dim]).unsqueeze(0)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_179": {
                "tensors": {
                    "value": "rec_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "self.batch_in_sizes[dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_242": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "*size": {
                    "value": "self.batch_out_sizes[dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/graph_map.py": {
        "torch": {
            "stack_194": {
                "variable": {
                    "value": "self.label_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_195": {
                "variable": {
                    "value": "self.label_to_attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "self.map.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.S * self.S * self.CLASSES, feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "self.map.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.S * self.S * self.CLASSES, attribute_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "self.map.edge_obj_to_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "self.map.edge_obj_to_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "rgb_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.priori_features['rgb_features'][str(k)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "attribute",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.priori_features['attributes'][str(k)] + [0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "[self.cfg.SCENE_GRAPH.NODE_INPUT_WORD_EMBED_SIZE + self.cfg.SCENE_GRAPH.NODE_INPUT_RGB_FEATURE_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "[self.cfg.SCENE_GRAPH.ATTRIBUTE_FEATURE_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "frames_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames_depth, img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[top_map, top_map + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[top_map + 1, top_map]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[top_map, top_map + self.S * (z + 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[top_map + self.S * (z + 1), top_map]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[src, dst]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "variable": {
                    "value": "img_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(img_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/graph_map/slam_map.py": {
        "torch": {
            "tensor_120": {
                "variable": {
                    "value": "map_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[self.map]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/modules/generic.py": {
        "torch": {
            "stack_114": {
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filter(inp)",
                            "Call"
                        ],
                        [
                            "[res]",
                            "List"
                        ],
                        [
                            "list(res)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/modules/layers.py": {
        "torch": {
            "ne_9": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_40": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.expand(-1, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "self.compute_mask(x)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size(0)))",
                            "Call"
                        ],
                        [
                            "mask.cuda() if x.is_cuda else mask",
                            "IfExp"
                        ],
                        [
                            "mask.repeat(self.n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_62": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=-1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, -1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_80": {
                "variable": {
                    "value": "gt_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_97": {
                "variable": {
                    "value": "e_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x, dim=axis, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.float()",
                            "Call"
                        ],
                        [
                            "torch.nn.ZeroPad2d((0, channels % 2, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_115": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=-1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, -1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_131": {
                "variable": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.expand(-1, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "self.compute_mask(x)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size(0)))",
                            "Call"
                        ],
                        [
                            "mask.cuda() if x.is_cuda else mask",
                            "IfExp"
                        ],
                        [
                            "mask.repeat(self.n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "mask_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "sum_masked_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_927": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_933": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_934": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, channels % 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.sum(log_P, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.sum(log_P, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "self.gamma * (x - mean) / (std + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pad_(output, n_zero)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, torch.autograd.Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "output.contiguous() * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pad_(output, n_zero)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, torch.autograd.Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "output.contiguous() * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(attn, v)",
                            "Call"
                        ],
                        [
                            "output.view(self.n_head, batch_size, len_q, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0, 3).contiguous().view(batch_size, len_q, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc(output))",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + residual)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, support)",
                            "Call"
                        ],
                        [
                            "self.weight(supports)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_152": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.var(dim=-1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_216": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.embedding_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_embedding_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_init()",
                            "Call"
                        ],
                        [
                            "init_embedding_matrix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "word_embedding_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_embedding_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=-0.05, high=0.05, size=(self.vocab_size, self.embedding_size))",
                            "Call"
                        ],
                        [
                            "embedding_initr.word_embedding_initialize(self.id2word, dim_size=self.embedding_size, oov_init=self.embedding_oov_init)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding_init).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ne_242": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_249": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_layer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(embeddings, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sort_294": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_295": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_315": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_382": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sort_402": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_403": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_423": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.pre_act_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_530": {
                "variable": {
                    "value": "(f, i, o, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pre_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_act_linear(torch.cat([input_, h_0], -1))",
                            "Call"
                        ],
                        [
                            "pre_act + torch.cat([self.bias_f, self.bias_iog]).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_566": {
                "variable": {
                    "value": "self.W_p_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "W_p_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.output_dim[i] + (self.input_p_dim if i == 0 else self.output_dim[i - 1]), self.output_dim[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_567": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "W_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.input_q_dim, self.output_dim[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterList_568": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.FloatTensor(self.output_dim[i])) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterList_569": {
                "variable": {
                    "value": "self.match_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "match_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.FloatTensor(1)) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tanh_584": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G_p_r + G_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_585": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(G_p_r + G_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w[depth]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_590": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(G, self.w[depth])",
                            "Call"
                        ],
                        [
                            "alpha + self.match_b[depth].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "masked_softmax(alpha, mask_q, axis=-1)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input_q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_592": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_p, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_623": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_656": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[h[0] for h in state_stp[-1][1:]]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(states, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_698": {
                "variable": {
                    "value": "input_p_inverted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_699": {
                "variable": {
                    "value": "mask_p_inverted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_702": {
                "variable": {
                    "value": "backward_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backward_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.backward_rnn(input_p_inverted, mask_p_inverted, input_q, mask_q)",
                            "Call"
                        ],
                        [
                            "torch.flip(backward_states, dims=[1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "concat_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_states, backward_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "concat_last_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_last_state, backward_last_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_733": {
                "variable": {
                    "value": "Fk_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.W_a(H_q)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Fk_prime)",
                            "Call"
                        ],
                        [
                            "self.W_a(H_q)",
                            "Call"
                        ],
                        [
                            "self.W_a(h_tm1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_756": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_775": {
                "variable": {
                    "value": "Fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk + Fk_prime.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_799": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_800": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_820": {
                "variable": {
                    "value": "Fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk + Fk_prime.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_822": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.V(H_r.view(-1, H_r.size(2)))",
                            "Call"
                        ],
                        [
                            "Fk.view(batch_size, time, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Fk + Fk_prime.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "Fk * mask_r.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.V(H_r.view(-1, H_r.size(2)))",
                            "Call"
                        ],
                        [
                            "Fk.view(batch_size, time, -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(Fk + Fk_prime.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_825": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta.view(beta.size(0), 1, beta.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "H_r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_868": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beta_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_884": {
                "variable": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_885": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_887": {
                "variable": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_888": {
                "variable": {
                    "value": "self.bias_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_901": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_943": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_ks(k).view(batch_size, len_k, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "k.permute(2, 0, 1, 3).contiguous().view(-1, len_k, self.block_hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_944": {
                "variable": {
                    "value": "self.pointwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_960": {
                "variable": {
                    "value": "self.att_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_966": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.att_weights.unsqueeze(0).repeat(batch_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_966": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_969": {
                "variable": {
                    "value": "weighted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attentions.unsqueeze(-1).expand_as(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_979": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_982": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(batch_size, len_q, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, self.block_hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_986": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "masked_softmax(attn, mask, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(batch_size, len_v, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, self.block_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_999": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1000": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1001": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1006": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1007": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1009": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_1045": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DepthwiseSeparableConv(ch_num, ch_num, k) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_1047": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1048": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_1049": {
                "variable": {
                    "value": "self.norm_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.LayerNorm(block_hidden_dim) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_1050": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1051": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_1070": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1078": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1081": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1105": {
                "variable": {
                    "value": "self.FFN_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1106": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1107": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1108": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1109": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_1123": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1128": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1135": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1163": {
                "variable": {
                    "value": "self.FFN_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1164": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1165": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1166": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_1167": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_1181": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1186": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_obs, out_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1188": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1195": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1198": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_1220": {
                "variable": {
                    "value": "w4C",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1221": {
                "variable": {
                    "value": "w4Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1222": {
                "variable": {
                    "value": "w4mlu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_1226": {
                "variable": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1227": {
                "variable": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1228": {
                "variable": {
                    "value": "self.w4mlu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4mlu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(1, 1, block_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_1230": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1232": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_1242": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ],
                        [
                            "S1 * Qmask * Cmask",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_1243": {
                "input": {
                    "value": "S1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ],
                        [
                            "S1 * Qmask * Cmask",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "S2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1244": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C, A, torch.mul(C, A), torch.mul(C, B)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1248": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1249": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1252": {
                "variable": {
                    "value": "subres0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1253": {
                "variable": {
                    "value": "subres1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1253": {
                "variable": {
                    "value": "subres1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1254": {
                "variable": {
                    "value": "subres2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C * self.w4mlu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1281": {
                "variable": {
                    "value": "X_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1282": {
                "variable": {
                    "value": "X_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1283": {
                "variable": {
                    "value": "X_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_head_1(X_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1284": {
                "variable": {
                    "value": "X_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_tail_1(X_tail)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_1302": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_1303": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_1318": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1321": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_emb_dim + block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_1329": {
                "variable": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1330": {
                "variable": {
                    "value": "(char_emb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1332": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[char_emb, word_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1349": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_1365": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_1394": {
                "variable": {
                    "value": "self.gcns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gcns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[GraphConvolution(self.input_dim if i == 0 else self.hidden_dims[i - 1], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[RelationalGraphConvolution(self.entity_input_dim if i == 0 else self.hidden_dims[i - 1], self.relation_input_dim, self.num_relations, self.hidden_dims[i], num_bases=self.num_bases) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_1408": {
                "variable": {
                    "value": "self.pointer_softmax_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1409": {
                "variable": {
                    "value": "self.pointer_softmax_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1410": {
                "variable": {
                    "value": "self.pointer_softmax_squash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1426": {
                "variable": {
                    "value": "switch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pointer_softmax_context(target_source_representations)",
                            "Call"
                        ],
                        [
                            "switch + self.pointer_softmax_target(target_target_representations)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax_squash(switch).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask",
                            "BinOp"
                        ],
                        [
                            "switch.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1429": {
                "variable": {
                    "value": "switch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pointer_softmax_context(target_source_representations)",
                            "Call"
                        ],
                        [
                            "switch + self.pointer_softmax_target(target_target_representations)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax_squash(switch).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask",
                            "BinOp"
                        ],
                        [
                            "switch.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1486": {
                "variable": {
                    "value": "supports",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "supports",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(supports, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_layer(supports)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1521": {
                "variable": {
                    "value": "self.highways",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "highways",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.hidden_dims[i], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_1522": {
                "variable": {
                    "value": "self.input_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.entity_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_1527": {
                "variable": {
                    "value": "self.gcns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gcns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[GraphConvolution(self.input_dim if i == 0 else self.hidden_dims[i - 1], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[RelationalGraphConvolution(self.entity_input_dim if i == 0 else self.hidden_dims[i - 1], self.relation_input_dim, self.num_relations, self.hidden_dims[i], num_bases=self.num_bases) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Bilinear_1552": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1563": {
                "variable": {
                    "value": "c_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1567": {
                "variable": {
                    "value": "sc_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_pl, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1568": {
                "variable": {
                    "value": "sc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_mi, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1575": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bilinear_1583": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "2 * n_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1600": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sc_1, sc_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1609": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1610": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "le_41": {
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "P + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "log_P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ],
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "le_81": {
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "P + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "log_P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ],
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.size(1) - output.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, torch.autograd.Variable(padding)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.size(1) - output.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, torch.autograd.Variable(padding)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_485": {
                "variable": {
                    "value": "self.bias_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_486": {
                "variable": {
                    "value": "self.bias_iog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_523": {
                "variable": {
                    "value": "mask_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(input_, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_722": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_754": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_seq_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_797": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_798": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_930": {
                "input": {
                    "value": "torch.arange(num_timescales).type(torch.float32) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1273": {
                "variable": {
                    "value": "self.w_head_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1274": {
                "variable": {
                    "value": "self.w_tail_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1275": {
                "variable": {
                    "value": "self.w_head_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1276": {
                "variable": {
                    "value": "self.w_tail_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1287": {
                "tensors": {
                    "value": "[Y_head, Y_tail]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_1308": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1310": {
                "variable": {
                    "value": "nonlinear",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonlinear",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear[i](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(nonlinear, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1351": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1399": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(P, -1)",
                            "Call"
                        ],
                        [
                            "res / mask_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=dim)",
                            "Call"
                        ],
                        [
                            "res / mask_sum.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(beta_list, 2)",
                            "Call"
                        ],
                        [
                            "res * x_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.depthwise_conv(x) * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(self.pointwise_conv(res)) * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "res.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "subres0 + subres1 + subres2",
                            "BinOp"
                        ],
                        [
                            "res + self.bias",
                            "BinOp"
                        ],
                        [
                            "res * Qmask.unsqueeze(1) * Cmask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.gcns[i](x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1400": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1462": {
                "variable": {
                    "value": "self.bottleneck_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.entity_input_dim + self.relation_input_dim) * self.num_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1463": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1465": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.entity_input_dim + self.relation_input_dim) * self.num_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1542": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1616": {
                "tensors": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[F.pad(input=o, pad=(0, 0, 0, max_feat_len - o.shape[0]), mode='constant', value=0) for o in obs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "e_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(x - torch.max(x, dim=axis, keepdim=True)[0])",
                            "Call"
                        ],
                        [
                            "e_x * m",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_270": {
                "*args": {
                    "value": "self.ninp if i == 0 else self.nhids[i - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor, zero_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_324": {
                "variable": {
                    "value": "dropout_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_327": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_378": {
                "*args": {
                    "value": "self.ninp if i == 0 else self.nhids[i - 1] * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor, zero_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_432": {
                "variable": {
                    "value": "dropout_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_435": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "last_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "tensors": {
                    "value": "[input_, h_0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_534": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_534": {
                "input": {
                    "value": "c_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(f) * c_0 + torch.sigmoid(i) * torch.tanh(g)",
                            "BinOp"
                        ],
                        [
                            "c_1 * expand_mask_ + c_0 * (1 - expand_mask_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_561": {
                "in_features": {
                    "value": "self.output_dim[i] + (self.input_p_dim if i == 0 else self.output_dim[i - 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_562": {
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_563": {
                "data": {
                    "value": "torch.FloatTensor(self.output_dim[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_564": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_858": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_884": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_885": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_886": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_887": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_888": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_889": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_912": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_mu + self.weight_sigma * self.weight_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu + self.bias_sigma * self.bias_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_914": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_933": {
                "input": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_933": {
                "input": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_951": {
                "input": {
                    "value": "self.pointwise_conv(res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1063": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1435": {
                "*size": {
                    "value": "batch_size * target_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "from_vocab.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1520": {
                "in_features": {
                    "value": "self.hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_1539": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_1541": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1544": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.highways[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_1615": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, max_feat_len - o.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "Name"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_338": {
                "sequence": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_446": {
                "sequence": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_523": {
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_529": {
                "tensors": {
                    "value": "[self.bias_f, self.bias_iog]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_529": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_532": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "range(self.n)",
                            "Call"
                        ],
                        [
                            "range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "range(self.nlayers)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_532": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_931": {
                "start": {
                    "value": "num_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LayerNorm_1049": {
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_1090": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1147": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1207": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_1244": {
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(S1, S2.transpose(1, 2)), C)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1302": {
                "in_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1303": {
                "in_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_1485": {
                "input": {
                    "value": "adj[:, relation_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.cat([node_features, _r_features], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "*size": {
                    "value": "(n,) + tensor.size()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "*size": {
                    "value": "(n,) + tensor.size()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_582": {
                "tensors": {
                    "value": "[input_p, h_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_649": {
                "input": {
                    "value": "curr_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_p[:, t]",
                            "Subscript"
                        ],
                        [
                            "state_stp[d - 1][t][0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1094": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1151": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1211": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1485": {
                "tensors": {
                    "value": "[node_features, _r_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/modules/memory.py": {
        "torch": {
            "sum_77": {
                "variable": {
                    "value": "game_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "count_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_count_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "novel_object_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_novel_object_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "reward_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(reward_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "game_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "count_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_count_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "novel_object_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_novel_object_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_267": {
                "variable": {
                    "value": "reward[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "accumulated_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + j + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_81": {
                "tensors": {
                    "value": "accumulated_count_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + i].count_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + j + i].count_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "accumulated_novel_object_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + i].novel_object_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + j + i].novel_object_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "accumulated_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + j + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_176": {
                "tensors": {
                    "value": "accumulated_count_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + i].count_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + j + i].count_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "accumulated_novel_object_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + i].novel_object_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + j + i].novel_object_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/modules/model.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.word_embedding_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderBlock(conv_num=self.encoder_conv_num, ch_num=self.block_hidden_dim, k=5, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.aggregation_attention_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderBlock(ch_num=self.block_hidden_dim, k=5, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.decoding_to_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.embedding_to_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.word_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_91": {
                "variable": {
                    "value": "self.vision_feat_seq_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.vision_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "variable": {
                    "value": "squared_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_word_masks.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_word_masks.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.aggregation_attention(h_obs, h_td, obs_mask, td_mask)",
                            "Call"
                        ],
                        [
                            "self.aggregation_attention_proj(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "torch.tanh(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation * obs_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.masked_mean(h_obs, obs_mask)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([aggregated_obs_representation, current_dynamics], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_153": {
                "variable": {
                    "value": "new_h_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregated_obs_representation] * num_candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_scorer_linear_1(torch.cat([candidate_representations, new_h_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_extra_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_linear_2(output).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "output * cand_mask",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax(target_target_representations, target_source_representations, trg_decoder_output, trg_mask, target_source_attention, obs_mask, input_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_174": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((length, length))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_185": {
                "variable": {
                    "value": "trg_mask_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trg_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "obs_mask_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "obs_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_199": {
                "variable": {
                    "value": "trg_decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trg_embeddings",
                            "Name"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "trg_embeddings",
                            "Name"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_210": {
                "variable": {
                    "value": "trg_mask_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trg_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_212": {
                "variable": {
                    "value": "obs_mask_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "obs_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_224": {
                "variable": {
                    "value": "trg_decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trg_embeddings",
                            "Name"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "trg_embeddings",
                            "Name"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_233": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "obs_representations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_235": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(obs_mask, -1)",
                            "Call"
                        ],
                        [
                            "_mask + tmp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_71": {
                "variable": {
                    "value": "self.rnncell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.dynamics_aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregated_obs_representation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.aggregation_attention(h_obs, h_td, obs_mask, td_mask)",
                            "Call"
                        ],
                        [
                            "self.aggregation_attention_proj(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "torch.tanh(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation * obs_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.masked_mean(h_obs, obs_mask)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([aggregated_obs_representation, current_dynamics], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_160": {
                "variable": {
                    "value": "cand_mask_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cand_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_scorer_linear_1(torch.cat([candidate_representations, new_h_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_extra_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_linear_2(output).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "output * cand_mask",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax(target_target_representations, target_source_representations, trg_decoder_output, trg_mask, target_source_attention, obs_mask, input_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_190": {
                "variable": {
                    "value": "current_dynamics_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_dynamics] * h_obs.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "h_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "current_dynamics_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_dynamics] * h_obs.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "h_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[candidate_representations, new_h_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "[aggregated_obs_representation, current_dynamics]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "[h_obs, current_dynamics_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "[h_obs, current_dynamics_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "(length, length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/gcn.py": {
        "torch": {
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone().detach()",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_obj_to_obj, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_obj_to_obj, edge_weight))",
                            "Call"
                        ],
                        [
                            "torch.zeros((1, self.cfg.SCENE_GRAPH.RESULT_FEATURE))",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, chose_nodes], dim=1)",
                            "Call"
                        ],
                        [
                            "x.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.cfg.SCENE_GRAPH.RESULT_FEATURE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/graph_embed.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.node_gating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.node_feature_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.node_to_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.node_feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_feature_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.node_to_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "INPUT_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "EMBED_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "INPUT_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scorer(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.bmm(h.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.hidden_state_to_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NODE_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "hidden_state.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.node_gating(features)",
                            "Call"
                        ],
                        [
                            "self.softmax(inp, h)",
                            "Call"
                        ],
                        [
                            "F.softmax(raw_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.hidden_state_to_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NODE_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.node_to_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NODE_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "EMBED_FEATURE_SIZE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "hidden_state.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.node_gating(features)",
                            "Call"
                        ],
                        [
                            "self.softmax(inp, h)",
                            "Call"
                        ],
                        [
                            "F.softmax(raw_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.bert_hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "tensor_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(chose_nodes.shape[0], self.OUTPUT_SHAPE - chose_nodes.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(chose_nodes, tensor_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.bert_hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "self.node_feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_34": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.node_gating(features)",
                            "Call"
                        ],
                        [
                            "self.softmax(inp, h)",
                            "Call"
                        ],
                        [
                            "F.softmax(raw_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_52": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(self.scorer(features), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_117": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.node_gating(features)",
                            "Call"
                        ],
                        [
                            "self.softmax(inp, h)",
                            "Call"
                        ],
                        [
                            "F.softmax(raw_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_176": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.node_gating(features)",
                            "Call"
                        ],
                        [
                            "self.softmax(inp, h)",
                            "Call"
                        ],
                        [
                            "F.softmax(raw_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softmax(nodes, hidden_state)",
                            "Call"
                        ],
                        [
                            "torch.matmul(nodes, hidden_state.T)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/hete_gan.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.node_word_embed_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.node_rgb_feature_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_RGB_FEATURE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_212": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_218": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.chose_node_feature_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.EMBED_FEATURE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.EMBED_FEATURE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/hete_gcn.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.node_word_embed_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.node_rgb_feature_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_RGB_FEATURE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_214": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.chose_node_feature_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.EMBED_FEATURE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.EMBED_FEATURE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, chose_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/semantic_graph/softmax_gcn.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.node_word_embed_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.node_rgb_feature_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.SCENE_GRAPH.NODE_INPUT_RGB_FEATURE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(subset)",
                            "Call"
                        ],
                        [
                            "list(subset.keys())",
                            "Call"
                        ],
                        [
                            "torch.tensor(subset, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "n_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_obj_to_obj, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_233": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "n_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index.device",
                            "Attribute"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_277": {
                "variable": {
                    "value": "n_idx[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.sum().item()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index.device",
                            "Attribute"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "variable": {
                    "value": "n_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index.device",
                            "Attribute"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_285": {
                "variable": {
                    "value": "n_idx[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index.device",
                            "Attribute"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.EMBED_FEATURE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, rgb_feature, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "chose_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.CHOSE_IMPORTENT_NODE_OUTPUT_SHAPE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/sgg/alfred_data_format.py": {
        "torch": {
            "from_numpy_120": {
                "ndarray": {
                    "value": "obj_relation_triplets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "obj_attribute",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "obj_angle_of_view",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "boxes_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_261": {
                "ndarray": {
                    "value": "obj_relations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sgg_data['pred_labels']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/sgg/graph-rcnn.pytorch/main.py": {
        "torch": {
            "set_device_58": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/sgg/graph-rcnn.pytorch/test_dataloader.py": {
        "torch": {
            "from_numpy_136": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "obj_relations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ],
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "obj_relation_triplets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ],
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_200": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_201": {
                "ndarray": {
                    "value": "obj_relations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ],
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "ndarray": {
                    "value": "obj_relation_triplets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ],
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "ndarray": {
                    "value": "boxes_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_boxes[im_to_first_box[i]:im_to_last_box[i] + 1, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/sgg/parser_scene.py": {
        "torch": {}
    },
    "alfworld/agents/sgg/sgg.py": {
        "torch": {
            "stack_142": {
                "variable": {
                    "value": "images_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transforms(i, None)[0] for i in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cfg.MODEL.WEIGHT_IMG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_144": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_161": {
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/alfred_dataset_vocab_analysis.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/pp.vocab",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/dgl_GNN_hete.py": {
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[csv_nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/dgl_GNN_homo.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "Ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes_data['Id'].to_list()",
                            "Call"
                        ],
                        [
                            "torch.tensor(Ids).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_25": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(g, in_feat)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.conv2(g, h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_apply_edges.py": {
        "torch": {
            "ones_5": {
                "variable": {
                    "value": "g.ndata[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "g.edges[user, plays, game].data[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/ai2thor_heterogeneous.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "Ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes_data['Id'].to_list()",
                            "Call"
                        ],
                        [
                            "torch.tensor(Ids).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_25": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(g, in_feat)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.conv2(g, h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/data/gen_data.py": {
        "torch": {}
    },
    "graph_analysis/example_dgl/example_github/example_Edge_Classification.py": {
        "torch": {
            "randn_32": {
                "variable": {
                    "value": "edge_pred_graph.ndata[feature]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "edge_pred_graph.edata[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "edge_pred_graph.edata[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_36": {
                "variable": {
                    "value": "edge_pred_graph.edata[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(graph, inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.conv2(graph, h)",
                            "Call"
                        ],
                        [
                            "self.sage(g, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/example_dgl_GNN.py": {
        "torch": {
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_149": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(g, features)",
                            "Call"
                        ],
                        [
                            "model(g, features)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_150": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(g, features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(g, features)",
                            "Call"
                        ],
                        [
                            "model(g, features)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/example_dgl_GNN2.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "node_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "g.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(net.parameters(), node_embed.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(g, inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(g, inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_57": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp[labeled_nodes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[labeled_nodes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(g, in_feat)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.conv2(g, h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/example_dgl_RGCN.py": {
        "torch": {
            "from_numpy_151": {
                "variable": {
                    "value": "edge_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data.edge_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "edge_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data.edge_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "edge_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.labels",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(labels).view(-1).to(dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cross_entropy_193": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[train_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[train_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[train_idx].argmax(dim=1) == labels[train_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cross_entropy_200": {
                "variable": {
                    "value": "val_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[val_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[val_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_201": {
                "variable": {
                    "value": "val_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[val_idx].argmax(dim=1) == labels[val_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_bases, self.in_feat, self.out_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.w_comp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_rels, self.num_bases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_comp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight.view(self.in_feat, self.num_bases, self.out_feat)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.w_comp, weight).view(self.num_rels, self.in_feat, self.out_feat)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "msg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges.src['h'].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[edges.data['rel_type']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "msg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/example_dgl_link_predict.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "node_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "g.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "train_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor(train_pos_u), torch.as_tensor(train_neg_u)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "train_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor(train_pos_v), torch.as_tensor(train_neg_v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "train_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(len(train_pos_u)), torch.ones(len(train_neg_u))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "test_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor(test_pos_u), torch.as_tensor(test_neg_u)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "test_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor(test_pos_v), torch.as_tensor(test_neg_v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "test_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(len(test_pos_u)), torch.ones(len(test_neg_u))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(net.parameters(), node_embed.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits[test_u] * logits[test_v]).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits[train_u] * logits[train_v]).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_81": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid((logits[train_u] * logits[train_v]).sum(dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid((logits[test_u] * logits[test_v]).sum(dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(train_pos_u)), torch.ones(len(train_neg_u))])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(g, in_feat)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.conv2(g, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_38": {
                "data": {
                    "value": "train_neg_u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_39": {
                "data": {
                    "value": "train_neg_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "len(train_pos_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "len(train_neg_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "data": {
                    "value": "test_neg_u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_44": {
                "data": {
                    "value": "test_neg_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "len(test_pos_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "len(test_neg_u)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/example_dgl_message_passing.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "h_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, h_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, h_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.linear(h_total)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "input": {
                    "value": "self.linear(h_total)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graph_analysis/example_dgl/example_github/tutorial_utils.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "club",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[c == 'Officer' for c in club]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "one_hot_16": {
                "variable": {
                    "value": "club_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "club",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes_data['Club'].to_list()",
                            "Call"
                        ],
                        [
                            "torch.tensor([c == 'Officer' for c in club]).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_analysis/example_networkx/analize_hete_graph.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[csv_nodes_data['feature'].to_list()]",
                            "List"
                        ],
                        [
                            "torch.tensor(feature).float().transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}