{
    "LRA/datasets/pathfinder.py": {
        "tensorflow": {
            "read_file_23": {
                "variable": {
                    "value": "img_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, metadata[0], metadata[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_28": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(img_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "read_file_20": {
                "filename": {
                    "value": "metadata_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metadata_file in enumerate(metadata_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_20": {
                "value": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/BERT/dataset.py": {
        "tensorflow": {},
        "torch": {}
    },
    "ImageNet/T2T-ViT/models/t2t_vit.py": {
        "torch": {
            "Parameter_121": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "get_sinusoid_encoding(n_position=num_patches + 1, d_hid=embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Unfold_48": {
                "variable": {
                    "value": "self.soft_split0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_49": {
                "variable": {
                    "value": "self.soft_split1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_50": {
                "variable": {
                    "value": "self.soft_split2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_dim * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Unfold_58": {
                "variable": {
                    "value": "self.soft_split0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_59": {
                "variable": {
                    "value": "self.soft_split1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_60": {
                "variable": {
                    "value": "self.soft_split2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_dim * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Unfold_70": {
                "variable": {
                    "value": "self.soft_split0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_71": {
                "variable": {
                    "value": "self.soft_split1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Unfold_72": {
                "variable": {
                    "value": "self.soft_split2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_dim * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_125": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.soft_split0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.soft_split1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ImageNet/T2T-ViT/models/token_nystromformer.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_35": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mat.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(q, keys_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(queries_landmarks, keys_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(queries_landmarks, k.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "input": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(queries_landmarks, k.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qkv[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.kernel_size // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "input": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "7 * I - KV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "keys_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(keys_landmarks_f, keys_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(queries_landmarks_f, queries_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qkv[0]",
                            "Subscript"
                        ],
                        [
                            "q / self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "keys_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "input": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.reshape(B, self.num_heads, self.landmarks, N // self.landmarks, keys_head_dim).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keys_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "input": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.reshape(B, self.num_heads, self.landmarks, N // self.landmarks, keys_head_dim).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_41": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/attention.py": {
        "torch": {
            "Dropout_11": {
                "variable": {
                    "value": "self.drop_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['attention_dropout']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_15": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_q(X))",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ],
                        [
                            "dot - 1000000.0 * (1 - mask[:, None, None, :])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.drop_attn(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_v(X))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.W_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_15": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_k(X))",
                            "Call"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_73": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_79": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/attention_linear.py": {
        "torch": {
            "matmul_16": {
                "input": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V * mask[:, None, :, None]",
                            "BinOp"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_12": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(Q) + 1) / math.sqrt(math.sqrt(Q.size(2)))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_16": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(K) + 1) * mask[:, None, :, None] / math.sqrt(math.sqrt(K.size(2)))",
                            "BinOp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "elu_13": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(K) + 1) * mask[:, None, :, None] / math.sqrt(math.sqrt(K.size(2)))",
                            "BinOp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "LRA/code/attention_linformer.py": {
        "torch": {
            "matmul_25": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "K * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "V * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, V * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "LinformerAttention.projection_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_head, self.linformer_k, self.seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, K * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/attention_nystrom.py": {
        "torch": {
            "eye_52": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mat.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config['conv_kernel_size'], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(config['conv_kernel_size'] // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "input": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "7 * I - KV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_56": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/attention_performer.py": {
        "torch": {
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/attention_reformer.py": {
        "torch": {}
    },
    "LRA/code/dataset.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "output[input_ids_0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['input_ids_0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "output[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "output[input_ids_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['input_ids_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/model.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_27": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.dim, 2, device=device) * -(math.log(10000.0) / self.dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(position * div_term), torch.cos(position * div_term)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_50": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['transformer_dim'], config['transformer_hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_26": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GELU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_27": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_37": {
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_28": {
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_28": {
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/model_wrapper.py": {
        "torch": {
            "ones_19": {
                "variable": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_id[:, None], inp[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_mask[:, None], mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['transformer_dim'], config['transformer_hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['transformer_dim'] * 4, config['transformer_hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "autocast_52": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "config['transformer_dim'] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "config['transformer_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[X_0, X_1, X_0 * X_1, X_0 - X_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_98": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_60": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "LRA/code/run_tasks.py": {
        "torch": {
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForSCDual(model_config)",
                            "Call"
                        ],
                        [
                            "ModelForSC(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "training_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "training_config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "OneCycleLR_68": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=training_config['learning_rate'], betas=(0.9, 0.999), eps=1e-06, weight_decay=training_config['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "training_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "pct_start": {
                    "value": "training_config['warmup'] / training_config['num_train_steps']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "anneal_strategy": {
                    "value": "training_config['lr_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "total_steps": {
                    "value": "training_config['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_197": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_f_path.replace('.log', '.model')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradScaler_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "dataset": {
                    "value": "LRADataset(f'../datasets/{task}.train.pickle', True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "dataset": {
                    "value": "LRADataset(f'../datasets/{task}.dev.pickle', True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "dataset": {
                    "value": "LRADataset(f'../datasets/{task}.test.pickle', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lra_config.config[task]['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "log_f_path.replace('.log', '.model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_92": {
                "input": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "accumu_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(training_config['batch_size'] // len(device_ids) // gpu_memory_config[attn_type], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_114": {
                "input": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "accumu_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(training_config['batch_size'] // len(device_ids) // gpu_memory_config[attn_type], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/attention.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.drop_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_14": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ],
                        [
                            "dot - 1000000.0 * (1 - mask[:, None, None, :])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.drop_attn(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_14": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/attention_linformer.py": {
        "torch": {
            "matmul_25": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "K * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "V * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, V * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "LinformerAttention.projection_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_head, self.linformer_k, self.seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, K * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/attention_nystrom.py": {
        "torch": {
            "eye_52": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mat.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config['conv_kernel_size'], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(config['conv_kernel_size'] // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.max(torch.sum(K, dim=-2), dim=-1).values[:, :, None, None] * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "input": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "7 * I - KV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_61": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/attention_reformer.py": {
        "torch": {}
    },
    "code/compile_model.py": {
        "torch": {}
    },
    "code/dataset.py": {
        "torch": {
            "tensor_73": {
                "data": {
                    "value": "inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[self.curr_idx]",
                            "Subscript"
                        ],
                        [
                            "inst in enumerate(wikihop)",
                            "Call"
                        ],
                        [
                            "inst in enumerate(batches)",
                            "Call"
                        ],
                        [
                            "inst",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "example['idx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['input_ids'] + [1] * (self.max_seq_len - len(example['input_ids']))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "data": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(example['input_ids']) + [0] * (self.max_seq_len - len(example['input_ids']))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * self.max_seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/generate_insts.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='train.json', option=config['dataset'], files_per_batch=64)",
                            "Call"
                        ],
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='train.json', option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/get_QKV.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='dev.json', files_per_batch=16, option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{args.checkpoint:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_seq_len'] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['num_sen_type']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.W_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_128": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.ff1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.ff2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_135": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_169": {
                "variable": {
                    "value": "sentence_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_14": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_88": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_94": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint(self.func, x)",
                            "Call"
                        ],
                        [
                            "self.func(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/model_wrapper.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_13": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.mlm_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.qahead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.qahead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['transformer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mlm_scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mlm_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "mlm_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "autocast_37": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_95": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "sen_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sen_loss_fct(sent_scores, labels)",
                            "Call"
                        ],
                        [
                            "torch.mean(sen_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_115": {
                "variable": {
                    "value": "sen_accu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sent_scores.argmax(dim=-1) == labels).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_136": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_179": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels != -100).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "mlm_loss * label_mask.reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "mlm_correct * label_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "self.dense(self.dropout_0(sen_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "input": {
                    "value": "start_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_155": {
                "input": {
                    "value": "end_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_185": {
                "input": {
                    "value": "attention_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/run_glue.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(data_args, tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForSequenceClassification(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_69": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{args.checkpoint:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamW_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneCycleLR_81": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=args.lr, betas=(0.9, 0.999), eps=1e-06, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pct_start": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "epochs": {
                    "value": "args.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "num_steps_per_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data_loader)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_91": {
                "variable": {
                    "value": "amp_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(data_args, tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_datasets[partition_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/run_pretrain.py": {
        "torch": {
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForMaskedLM(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "pretraining_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneCycleLR_108": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=pretraining_config['learning_rate'], betas=(0.9, 0.999), eps=1e-06, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "pretraining_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "pct_start": {
                    "value": "pretraining_config['warmup']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "epochs": {
                    "value": "pretraining_config['epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "steps_per_epoch": {
                    "value": "pretraining_config['batches_per_epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='train.json', option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_67": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "from_cp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['from_cp']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "checkpoint[model_state_dict][model.embeddings.position_embeddings.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cp_pos_encoding[:2, :]] + [cp_pos_encoding[2:, :]] * num_copy, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.cp')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path.replace('.cp', '.model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'lr_scheduler_state_dict': lr_scheduler.state_dict(), 'epoch': epoch, 'inst_pass': inst_pass}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.cp')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code/run_validation.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='dev.json', files_per_batch=128, option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForMaskedLM(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "torch": {
            "chunk_56": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_partitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_partitions",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/BERT/model.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['num_sen_type']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_34": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "sentence_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pooler(X[:, 0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GELU_90": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_91": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.mlm_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.sen_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(sent_scores.size(0), dtype=torch.float, device=sent_scores.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_65": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.reshape(-1, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "global_index.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x.reshape(-1, dim), 0, global_index.reshape(-1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(selected, [batch_size, -1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sent_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "mlm_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "autocast_141": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_165": {
                "variable": {
                    "value": "sen_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sen_loss_fct(sent_scores, sentence_label)",
                            "Call"
                        ],
                        [
                            "torch.mean(sen_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_170": {
                "variable": {
                    "value": "sen_accu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sent_scores.argmax(dim=-1) == sentence_label).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_151": {
                "input": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['label_mask'].to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_157": {
                "input": {
                    "value": "mlm_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlm_loss_fct(mlm_scores.reshape(-1, self.vocab_size), mask_label.reshape(-1))",
                            "Call"
                        ],
                        [
                            "mlm_loss * label_mask.reshape(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mlm_loss) / valid_count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_160": {
                "input": {
                    "value": "mlm_correct * label_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/BERT/run_glue.py": {
        "torch": {
            "load_79": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, args.checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelWrapper(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "downsteam_task_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "all_downsteam_task_config['task'][downsteam_task]",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "train_downsteam_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_downsteam_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertDownsteamDatasetWrapper(data, downsteam_task_config['file_path'], downsteam_task_config['task'], train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "downsteam_task_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "all_downsteam_task_config['task'][downsteam_task]",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradScaler_292": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "val_downsteam_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_downsteam_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertDownsteamDatasetWrapper(data, downsteam_task_config['file_path'], downsteam_task_config['task'], val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/BERT/run_pretrain.py": {
        "torch": {
            "DataParallel_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelWrapper(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "pretraining_task_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "pretrain_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pretrain_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPreTrainDatasetWrapper(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_task_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneCycleLR_86": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=pretraining_task_config['learning_rate'], betas=(0.9, 0.999), eps=1e-06, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "pretraining_task_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "pct_start": {
                    "value": "pretraining_task_config['warmup']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "epochs": {
                    "value": "pretraining_task_config['epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "steps_per_epoch": {
                    "value": "pretraining_task_config['batches_per_epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_63": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(curr_path, 'models', args.model, config['from_cp'])",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_last_checkpoint(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradScaler_113": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path.replace('.cp', '.model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'lr_scheduler_state_dict': lr_scheduler.state_dict(), 'epoch': epoch, 'inst_pass': inst_pass}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.cp')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_135": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "accumu_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretraining_task_config['accumu_steps']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/BERT/run_validation.py": {
        "torch": {
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelWrapper(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "pretrain_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pretrain_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPreTrainDatasetWrapper(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_task_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/LRA/dataset.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "output[input_ids_0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['input_ids_0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "output[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "output[input_ids_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "inst['input_ids_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/LRA/model.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_51": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_54": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['dim'], config['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GELU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/LRA/model_wrapper.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_id[:, None], inp[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_mask[:, None], mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['dim'], config['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.mlpblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['dim'] * 4, config['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "autocast_58": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "config['dim'] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[X_0, X_1, X_0 * X_1, X_0 - X_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_104": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_66": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/LRA/run_tasks.py": {
        "torch": {
            "DataParallel_55": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForSCDual(model_config)",
                            "Call"
                        ],
                        [
                            "ModelForSC(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "training_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "training_config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "OneCycleLR_70": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=training_config['learning_rate'], betas=(0.9, 0.999), eps=1e-06, weight_decay=training_config['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "training_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "pct_start": {
                    "value": "training_config['warmup'] / training_config['num_train_steps']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "anneal_strategy": {
                    "value": "training_config['lr_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "total_steps": {
                    "value": "training_config['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_199": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_f_path.replace('.log', '.model')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradScaler_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "dataset": {
                    "value": "LRADataset(os.path.join(curr_path, f'datasets/{dataset_file}.train.pickle'), True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "dataset": {
                    "value": "LRADataset(os.path.join(curr_path, f'datasets/{dataset_file}.dev.pickle'), True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "dataset": {
                    "value": "LRADataset(os.path.join(curr_path, f'datasets/{dataset_file}.test.pickle'), False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "training_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "log_f_path.replace('.log', '.model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_94": {
                "input": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "accumu_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(training_config['batch_size'] // len(device_ids) // inst_per_gpu, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_116": {
                "input": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "accumu_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(training_config['batch_size'] // len(device_ids) // inst_per_gpu, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/dataset.py": {
        "torch": {
            "tensor_69": {
                "data": {
                    "value": "inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[self.curr_idx]",
                            "Subscript"
                        ],
                        [
                            "inst in enumerate(wikihop)",
                            "Call"
                        ],
                        [
                            "inst in enumerate(batches)",
                            "Call"
                        ],
                        [
                            "inst",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "example['idx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['input_ids'] + [1] * (self.max_seq_len - len(example['input_ids']))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(example['input_ids']) + [0] * (self.max_seq_len - len(example['input_ids']))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * self.max_seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/model.py": {
        "torch": {
            "Embedding_19": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_seq_len'] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['num_sen_type']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "sentence_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/model_wrapper.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GELU_12": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_13": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.mlm_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.qahead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.qahead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mlm_scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mlm_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "mlm_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "autocast_37": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_95": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "sen_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sen_loss_fct(sent_scores, labels)",
                            "Call"
                        ],
                        [
                            "torch.mean(sen_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_115": {
                "variable": {
                    "value": "sen_accu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sen_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sent_scores.argmax(dim=-1) == labels).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_136": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_179": {
                "enabled": {
                    "value": "self.enable_amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels != -100).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "mlm_loss * label_mask.reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "mlm_correct * label_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "self.dense(self.dropout_0(sen_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "input": {
                    "value": "start_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_155": {
                "input": {
                    "value": "end_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_185": {
                "input": {
                    "value": "attention_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/run_glue.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(data_args, tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForSequenceClassification(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{args.checkpoint:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamW_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneCycleLR_85": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=args.lr, betas=(0.9, 0.999), eps=1e-06, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pct_start": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "epochs": {
                    "value": "args.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "num_steps_per_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data_loader)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_95": {
                "variable": {
                    "value": "amp_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(data_args, tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_datasets[partition_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "default_data_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/run_pretrain.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='train.json', option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForMaskedLM(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "pretraining_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneCycleLR_108": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(model.parameters(), lr=pretraining_config['learning_rate'], betas=(0.9, 0.999), eps=1e-06, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "pretraining_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "pct_start": {
                    "value": "pretraining_config['warmup']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "epochs": {
                    "value": "pretraining_config['epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "steps_per_epoch": {
                    "value": "pretraining_config['batches_per_epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_67": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "from_cp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['from_cp']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "checkpoint[model_state_dict][model.embeddings.position_embeddings.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cp_pos_encoding[:2, :]] + [cp_pos_encoding[2:, :]] * num_copy, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.cp')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path.replace('.cp', '.model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'model_state_dict': model.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'lr_scheduler_state_dict': lr_scheduler.state_dict(), 'epoch': epoch, 'inst_pass': inst_pass}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.cp')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/run_validation.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorpusDataset(folder_path=data_folder, file_json='dev.json', option=config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pretraining_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['pretraining_setting']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=True, mlm_probability=0.15)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelForMaskedLM(model_config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_89": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'cp-{epoch:04}.model')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/RoBERT/utils.py": {
        "torch": {
            "chunk_56": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_partitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_partitions",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/efficiency/profile_seq_len.py": {
        "torch": {
            "randint_39": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_40": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "batch_size * 2",
                            "BinOp"
                        ],
                        [
                            "batch_size // 2",
                            "BinOp"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(2 ** log_seq_len)",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_peak_memory_stats_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/encoders/backbone.py": {
        "torch": {}
    },
    "reorganized_code/encoders/backbones/efficient_attention.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.drop_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_q(X))",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ],
                        [
                            "dot - 1000000.0 * (1 - mask[:, None, None, :])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.drop_attn(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_v(X))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.W_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_111": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_120": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_20": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_k(X))",
                            "Call"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_76": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_83": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/encoders/backbones/efficient_attentions/attention_linear.py": {
        "torch": {
            "matmul_16": {
                "input": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V * mask[:, None, :, None]",
                            "BinOp"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_12": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(Q) + 1) / math.sqrt(math.sqrt(Q.size(2)))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_16": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(K) + 1) * mask[:, None, :, None] / math.sqrt(math.sqrt(K.size(2)))",
                            "BinOp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "elu_13": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn.functional.elu(K) + 1) * mask[:, None, :, None] / math.sqrt(math.sqrt(K.size(2)))",
                            "BinOp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "reorganized_code/encoders/backbones/efficient_attentions/attention_linformer.py": {
        "torch": {
            "matmul_25": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "K * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "V * mask[:, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(dot, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, V * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "projection_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_head, self.linformer_k, self.seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.E, K * mask[:, None, :, None])",
                            "Call"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/encoders/backbones/efficient_attentions/attention_nystrom.py": {
        "torch": {
            "eye_47": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mat.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config['conv_kernel_size'], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(config['conv_kernel_size'] // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_30": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (torch.max(torch.sum(torch.abs(K), dim=-2)) * torch.max(torch.sum(torch.abs(K), dim=-1))) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1000000000.0 * (1 - mask[:, None, None, :]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (torch.max(torch.sum(torch.abs(K), dim=-2)) * torch.max(torch.sum(torch.abs(K), dim=-1))) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (torch.max(torch.sum(torch.abs(K), dim=-2)) * torch.max(torch.sum(torch.abs(K), dim=-1))) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "input": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "7 * I - KV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "input": {
                    "value": "Q_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "torch.sum(torch.abs(K), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.abs(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))",
                            "BinOp"
                        ],
                        [
                            "mat",
                            "variable"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "reorganized_code/encoders/backbones/efficient_attentions/attention_performer.py": {
        "torch": {
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reorganized_code/encoders/backbones/efficient_attentions/attention_reformer.py": {
        "torch": {}
    },
    "reorganized_code/encoders/backbones/vanila_transformer.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.W_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_head * self.head_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_q(X))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(K, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_66": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout_prob']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_75": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(F.softmax(dot, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(self.W_k(X))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_35": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, torch.transpose(K, -2, -1))",
                            "Call"
                        ],
                        [
                            "dot / math.sqrt(self.head_dim)",
                            "BinOp"
                        ],
                        [
                            "dot.float() - 1000000.0 * (1 - mask.float()[:, None, None, :])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}