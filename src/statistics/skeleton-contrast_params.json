{
    "action_classification.py": {
        "sklearn": {},
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_count_206": {
                "variable": {
                    "value": "ngpus_per_node",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_273": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_279": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "possible_values": [
                        [
                            "list(filter(lambda p: p.requires_grad, model.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "DataLoader_317": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "get_finetune_training_set(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_322": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "get_finetune_validation_set(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_470": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_weights",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_493": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_weights",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "DataParallel_270": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BIGRU(**opts.bi_gru_model_args)",
                            "Call"
                        ],
                        [
                            "AGCN(**opts.agcn_model_args)",
                            "Call"
                        ],
                        [
                            "HCN(**opts.hcn_model_args)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "save_459": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_563": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_291": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "load_295": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "action_retrieval.py": {
        "sklearn": {
            "normalize_183": {
                "variable": {
                    "value": "Xtr_Norm",
                    "possible_values": []
                },
                "X": {
                    "value": "data_train",
                    "possible_values": []
                }
            },
            "normalize_184": {
                "variable": {
                    "value": "Xte_Norm",
                    "possible_values": []
                },
                "X": {
                    "value": "data_test",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_186": {
                "variable": {
                    "value": "knn",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "nn",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "possible_values": []
                }
            },
            "accuracy_score_190": {
                "variable": {
                    "value": "acc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "knn.predict(Xte_Norm)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "label_test",
                    "possible_values": [
                        [
                            "np.asarray(label_test)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "autoencoder_322": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_325": {
                    "variable": {
                        "value": "self.encoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(input_size, 1024)",
                        "possible_values": []
                    }
                },
                "Sequential_334": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(middle_size, 512)",
                        "possible_values": []
                    }
                }
            },
            "MSELoss_258": {
                "variable": {
                    "value": "criterion_auto",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_381": {
                "variable": {
                    "value": "ngpus_per_node",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_448": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "get_finetune_training_set(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_453": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "get_finetune_validation_set(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MSELoss_458": {
                "variable": {
                    "value": "auto_criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "DataParallel_438": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BIGRU(**opts.bi_gru_model_args)",
                            "Call"
                        ],
                        [
                            "AGCN(**opts.agcn_model_args)",
                            "Call"
                        ],
                        [
                            "HCN(**opts.hcn_model_args)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_369": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "in_features": {
                    "value": "input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "Tanh_327": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_328": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "Tanh_329": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "middle_size",
                    "possible_values": [
                        [
                            "125",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_331": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "in_features": {
                    "value": "middle_size",
                    "possible_values": [
                        [
                            "125",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "Tanh_336": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "Tanh_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "possible_values": []
                }
            }
        }
    },
    "feeder/augmentations.py": {
        "torch": {
            "tensor_66": {
                "variable": {
                    "value": "temporal_context",
                    "possible_values": []
                },
                "data": {
                    "value": "temporal_context",
                    "possible_values": [
                        [
                            "input_data[:, start:start + temporal_crop_length, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(temporal_context, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_context.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_context[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_context, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_context.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_context.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "temporal_context",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_context",
                    "possible_values": [
                        [
                            "input_data[:, start:start + temporal_crop_length, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(temporal_context, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_context.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_context[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_context, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_context.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_context.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_size, 1)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "temporal_crop",
                    "possible_values": []
                },
                "data": {
                    "value": "temporal_crop",
                    "possible_values": [
                        [
                            "input_data[:, start:start + temporal_crop_length, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(temporal_crop, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "temporal_crop",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_crop",
                    "possible_values": [
                        [
                            "input_data[:, start:start + temporal_crop_length, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(temporal_crop, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_size, 1)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "temporal_crop",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "possible_values": [
                        [
                            "input_data[:, start:num_of_frames - start, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "temporal_crop",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_crop",
                    "possible_values": [
                        [
                            "input_data[:, start:start + temporal_crop_length, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(temporal_crop, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temporal_crop.permute(0, 2, 3, 1).contiguous().view(C * V * M, temporal_crop_length)",
                            "Call"
                        ],
                        [
                            "temporal_crop[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(temporal_crop, size=(output_size, 1), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "temporal_crop.squeeze(dim=3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "temporal_crop.contiguous().view(C, V, M, output_size).permute(0, 3, 1, 2).contiguous().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_size, 1)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "feeder/feeder_downstream.py": {
        "torch": {
            "Feeder_17": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.data_path": {
                    "value": "data_path",
                    "possible_values": []
                },
                "self.label_path": {
                    "value": "label_path",
                    "possible_values": []
                },
                "self.num_frame_path": {
                    "value": "num_frame_path",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": []
                },
                "self.input_representation": {
                    "value": "input_representation",
                    "possible_values": []
                },
                "self.l_ratio": {
                    "value": "l_ratio",
                    "possible_values": []
                }
            }
        }
    },
    "feeder/feeder_pretraining_inter.py": {
        "torch": {
            "Feeder_18": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.data_path": {
                    "value": "data_path",
                    "possible_values": []
                },
                "self.num_frame_path": {
                    "value": "num_frame_path",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": []
                },
                "self.input_representations": {
                    "value": "input_representations",
                    "possible_values": []
                },
                "self.l_ratio": {
                    "value": "l_ratio",
                    "possible_values": []
                }
            }
        }
    },
    "feeder/feeder_pretraining_intra.py": {
        "torch": {
            "Feeder_18": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.data_path": {
                    "value": "data_path",
                    "possible_values": []
                },
                "self.num_frame_path": {
                    "value": "num_frame_path",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": []
                },
                "self.input_representation": {
                    "value": "input_representation",
                    "possible_values": []
                },
                "self.l_ratio": {
                    "value": "l_ratio",
                    "possible_values": []
                }
            }
        }
    },
    "main_moco_inter_skeleton.py": {
        "torch": {
            "device_count_94": {
                "variable": {
                    "value": "ngpus_per_node",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_138": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "get_pretraining_set_inter(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SummaryWriter_174": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.checkpoint_path",
                    "possible_values": []
                }
            },
            "DataParallel_130": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "moco.builder_inter.MoCo(args.skeleton_representation, opts.bi_gru_model_args, opts.agcn_model_args, opts.hcn_model_args, args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "load_152": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "empty_cache_159": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "main_moco_intra_skeleton.py": {
        "torch": {
            "device_count_95": {
                "variable": {
                    "value": "ngpus_per_node",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "get_pretraining_set_intra(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SummaryWriter_172": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.checkpoint_path",
                    "possible_values": []
                }
            },
            "DataParallel_131": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "moco.builder_intra.MoCo(args.skeleton_representation, opts.bi_gru_model_args, opts.agcn_model_args, opts.hcn_model_args, args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "moco/AGCN.py": {
        "torch": {
            "unit_tcn_37": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_41": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "3",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(kernel_size, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(pad, 0)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(stride, 1)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_44": {
                    "variable": {
                        "value": "self.bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": []
                    }
                },
                "ReLU_45": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "unit_gcn_54": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inter_c": {
                    "value": "inter_channels",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "Parameter_59": {
                    "variable": {
                        "value": "self.PA",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.from_numpy(A.astype(np.float32))",
                        "possible_values": []
                    }
                },
                "self.num_subset": {
                    "value": "num_subset",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_64": {
                    "variable": {
                        "value": "self.conv_a",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_65": {
                    "variable": {
                        "value": "self.conv_b",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_66": {
                    "variable": {
                        "value": "self.conv_d",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_80": {
                    "variable": {
                        "value": "self.bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": []
                    }
                },
                "Softmax_81": {
                    "variable": {
                        "value": "self.soft",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "-2",
                        "possible_values": []
                    }
                },
                "ReLU_82": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "TCN_GCN_unit_113": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_118": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Model_133": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm1d_145": {
                    "variable": {
                        "value": "self.data_bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "num_person * in_channels * num_point",
                        "possible_values": []
                    }
                },
                "Linear_158": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "60",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.down",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "input": {
                    "value": "A2",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_102": {
                "input": {
                    "value": "A1",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "moco/GRU.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "EncoderRNN_23": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "GRU_27": {
                    "variable": {
                        "value": "self.gru",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "num_layers": {
                        "value": "num_layers",
                        "possible_values": []
                    },
                    "bidirectional": {
                        "value": "True",
                        "possible_values": []
                    },
                    "batch_first": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                }
            },
            "BIGRU_51": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.en_num_layers": {
                    "value": "en_num_layers",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_56": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2 * en_hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "60",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.en_input_size": {
                    "value": "en_input_size",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "encoder_hidden",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_43": {
                "variable": {
                    "value": "hidden",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, len(seq_len), encoder_hidden.shape[-1])",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "encoder_hidden",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_hidden, enout_tmp)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "input_tensor.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "possible_values": []
                }
            }
        }
    },
    "moco/HCN.py": {
        "torch": {
            "HCN_60": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_person": {
                    "value": "num_person",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_class": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_82": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=in_channel, out_channels=out_channel, kernel_size=1, stride=1, padding=0)",
                        "possible_values": []
                    }
                },
                "Conv2d_86": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channel",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "window_size",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "(3, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "Sequential_88": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=num_joint, out_channels=out_channel // 2, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv4",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=out_channel // 2, out_channels=out_channel, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_96": {
                    "variable": {
                        "value": "self.conv1m",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=in_channel, out_channels=out_channel, kernel_size=1, stride=1, padding=0)",
                        "possible_values": []
                    }
                },
                "Conv2d_100": {
                    "variable": {
                        "value": "self.conv2m",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channel",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "window_size",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "(3, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "Sequential_102": {
                    "variable": {
                        "value": "self.conv3m",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=num_joint, out_channels=out_channel // 2, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_105": {
                    "variable": {
                        "value": "self.conv4m",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=out_channel // 2, out_channels=out_channel, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_111": {
                    "variable": {
                        "value": "self.conv5",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=out_channel * 2, out_channels=out_channel * 2, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_117": {
                    "variable": {
                        "value": "self.conv6",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=out_channel * 2, out_channels=out_channel * 4, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Linear_124": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "out_channel * 4 * (window_size // 16) * (window_size // 16)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "60",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "motion",
                    "possible_values": []
                },
                "input": {
                    "value": "motion",
                    "possible_values": [
                        [
                            "x[:, :, 1:, :, :] - x[:, :, 0:-1, :, :]",
                            "BinOp"
                        ],
                        [
                            "motion.permute(0, 1, 4, 2, 3).contiguous().view(N, C * M, T - 1, V)",
                            "Call"
                        ],
                        [
                            "F.interpolate(motion, size=(T, V), mode='bilinear', align_corners=False).contiguous().view(N, C, M, T, V).permute(0, 1, 3, 4, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(T, V)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "permute_135": {
                "variable": {
                    "value": "motion",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_167": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[0]",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_p, out_m)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "num_joint",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel // 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "out_channel // 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout2d_93": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MaxPool2d_94": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "num_joint",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel // 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_104": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "out_channel // 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout2d_107": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "out_channel * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout2d_114": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "out_channel * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout2d_120": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "orthogonal_34": {
                "module": {
                    "value": "param",
                    "possible_values": []
                }
            },
            "orthogonal_49": {
                "module": {
                    "value": "param",
                    "possible_values": []
                }
            }
        }
    },
    "moco/builder_inter.py": {
        "torch": {
            "MoCo_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.K": {
                    "value": "K",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.m": {
                    "value": "m",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.T": {
                    "value": "T",
                    "possible_values": [
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                },
                "mlp": {
                    "value": "mlp",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "normalize_99": {
                    "variable": {
                        "value": "self.Queue_S1",
                        "possible_values": []
                    },
                    "input": {
                        "value": "self.Queue_S1",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "normalize_105": {
                    "variable": {
                        "value": "self.Queue_S2",
                        "possible_values": []
                    },
                    "input": {
                        "value": "self.Queue_S2",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "normalize_162": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self.encoder_q(input_s1_v1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normalize_165": {
                "variable": {
                    "value": "r",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "possible_values": [
                        [
                            "self.encoder_r(input_s2_v1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(r, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_182": {
                "variable": {
                    "value": "l_pos_seq",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, l]",
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "l_pos_seq",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "einsum_183": {
                "variable": {
                    "value": "l_pos_graph",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[r, k]",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "l_pos_graph",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "l_neg_seq",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.Queue_S2.clone().detach()]",
                    "possible_values": []
                }
            },
            "einsum_189": {
                "variable": {
                    "value": "l_neg_graph",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[r, self.Queue_S1.clone().detach()]",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "logits_seq",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos_seq, l_neg_seq]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "logits_graph",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos_graph, l_neg_graph]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "labels_seq",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits_seq.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "labels_graph",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits_graph.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "no_grad_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.encoder_r.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp_2, dim_mlp_2)",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.encoder_l.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp_2, dim_mlp_2)",
                    "possible_values": []
                }
            },
            "normalize_172": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "possible_values": [
                        [
                            "self.encoder_k(input_s1_v2)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normalize_175": {
                "variable": {
                    "value": "l",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "possible_values": [
                        [
                            "self.encoder_l(input_s2_v2)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(l, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "dim_mlp_2",
                    "possible_values": [
                        [
                            "self.encoder_r.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp_2",
                    "possible_values": [
                        [
                            "self.encoder_r.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "dim_mlp_2",
                    "possible_values": [
                        [
                            "self.encoder_r.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp_2",
                    "possible_values": [
                        [
                            "self.encoder_r.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "moco/builder_intra.py": {
        "torch": {
            "MoCo_18": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.K": {
                    "value": "K",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.m": {
                    "value": "m",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.T": {
                    "value": "T",
                    "possible_values": [
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                },
                "mlp": {
                    "value": "mlp",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "normalize_66": {
                    "variable": {
                        "value": "self.queue",
                        "possible_values": []
                    },
                    "input": {
                        "value": "self.queue",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "normalize_103": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_115": {
                "variable": {
                    "value": "l_pos",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, k]",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "l_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "einsum_117": {
                "variable": {
                    "value": "l_neg",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.queue.clone().detach()]",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}