{
    "main.py": {
        "sklearn": {
            "KMeans_63": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(config.num_protos, len(sample_set))",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': encoder.parameters(), 'lr': 1e-05}, {'params': classifier.parameters(), 'lr': 0.001}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': encoder.parameters(), 'lr': 1e-05}, {'params': classifier.parameters(), 'lr': 0.001}, {'params': memory_network.parameters(), 'lr': 0.0001}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_260": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_261": {
                "variable": {
                    "value": "config.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(config.device) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "temp_protos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp_protos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(temp_protos, dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "protos4eval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "protos4eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(protos4eval, dim=0).detach()",
                            "Call"
                        ],
                        [
                            "protos4eval.expand(data_loader.batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "protos4eval.expand(data_loader.batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "protos4eval",
                            "Method Argument"
                        ],
                        [
                            "protos4eval",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__99": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__100": {
                "parameters": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__140": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__141": {
                "parameters": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__142": {
                "parameters": {
                    "value": "memory_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set(data, config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(config.batch_size_per_step, len(data))",
                            "Call"
                        ],
                        [
                            "min(batch_size, len(data))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[item['relation'] for item in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "item['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/base_model.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.zero_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.pi_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([3.141592653589793])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_16": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_10": {},
            "Tensor_12": {},
            "load_19": {
                "f": {
                    "value": "os.path.join(path)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/classifier/softmax_classifier.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/encoder/bert_encoder.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_34": {
                "variable": {
                    "value": "self.layer_normalization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=0)",
                            "Call"
                        ],
                        [
                            "output.view(output.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ],
                        [
                            "self.linear_transform(output)",
                            "Call"
                        ],
                        [
                            "F.gelu(output)",
                            "Call"
                        ],
                        [
                            "self.layer_normalization(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gelu_78": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=0)",
                            "Call"
                        ],
                        [
                            "output.view(output.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ],
                        [
                            "self.linear_transform(output)",
                            "Call"
                        ],
                        [
                            "F.gelu(output)",
                            "Call"
                        ],
                        [
                            "self.layer_normalization(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_67": {
                "variable": {
                    "value": "instance_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(i).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_68": {
                "variable": {
                    "value": "instance_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(tokens_output, 0, torch.tensor(i).cuda())",
                            "Call"
                        ],
                        [
                            "torch.index_select(instance_output, 1, torch.tensor([e11[i], e21[i]]).cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([e11[i], e21[i]]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(inputs.size()[0])",
                            "Call"
                        ],
                        [
                            "i in range(len(e11))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[e11[i], e21[i]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model/memory_network/attention_memory_simplified.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.q_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_heads * self.query_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_24": {
                "variable": {
                    "value": "self.q_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.num_heads, self.query_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.kv_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_heads * (self.key_size + self.value_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_27": {
                "variable": {
                    "value": "self.k_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.num_heads, self.key_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_28": {
                "variable": {
                    "value": "self.v_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.num_heads, self.value_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.concatnate_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_heads * self.value_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_32": {
                "variable": {
                    "value": "self.concatnate_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_33": {
                "variable": {
                    "value": "self.attention_output_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.output_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_36": {
                "variable": {
                    "value": "self.output_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_47": {
                "variable": {
                    "value": "(k_reshape, v_reshape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kv_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kv.view(kv.shape[0], kv.shape[1], self.num_heads, self.key_size + self.value_size)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.key_size, self.value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_reshape.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "q_transpose * self.key_size ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k_transpose.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q_transpose, k_transpose.permute(0, 1, 3, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "weighted_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(dot_product, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_reshape.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_74": {
                "variable": {
                    "value": "memory_plus_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory, input_reshape]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gelu_81": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_mlp(attention_output)",
                            "Call"
                        ],
                        [
                            "F.gelu(output)",
                            "Call"
                        ],
                        [
                            "self.output_layernorm(output + attention_output)",
                            "Call"
                        ],
                        [
                            "self.attention_over_memory(input, memory)",
                            "Call"
                        ],
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sampler.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}