{
    "evaluation/metrics/kernel_inception_distance.py": {
        "sklearn": {
            "polynomial_kernel_34": {
                "variable": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "codes_g",
                            "Name"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_35": {
                "variable": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "codes_r",
                            "Name"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_36": {
                "variable": {
                    "value": "K_XY",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "codes_g",
                            "Name"
                        ]
                    ]
                },
                "Y": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "codes_r",
                            "Name"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "evaluation/train_inception_model.py": {
        "sklearn": {
            "confusion_matrix_141": {
                "variable": {
                    "value": "cm",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[i] for l in true_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[i] for l in pred_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "att_dict[c]['values']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loader.header['attributes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "classification_report_150": {
                "variable": {
                    "value": "crep",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[i] for l in true_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[i] for l in pred_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[str(v) for v in att_dict[c]['values']]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "target_names",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[str(v) for v in att_dict[c]['values']]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loader_module(name=dbname + '_' + transform, preprocessing=processor, **loader_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "inception_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "SpectrogramInception3(num_classes, aux_logits=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, inception_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0, 0.99]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "mag_input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "vdata",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_data[k * batch_size:batch_size * (k + 1)]",
                            "Subscript"
                        ],
                        [
                            "mel(vdata.float())",
                            "Call"
                        ],
                        [
                            "F.interpolate(vdata, (299, 299))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "inception_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "join(output_path, f\"{name}_{datetime.now().strftime('%Y-%m-%d')}.pt\")",
                            "Call"
                        ]
                    ]
                }
            },
            "save_105": {
                "obj": {
                    "value": "inception_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "join(output_path, f\"{name}_{datetime.now().strftime('%Y-%m-%d')}.pt\")",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "visualization/visualization.py": {
        "sklearn": {
            "precision_recall_fscore_support_118": {
                "variable": {
                    "value": "(p, r, fs, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "confusion_matrix_119": {
                "variable": {
                    "value": "cm",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.att_val_dict[att]['values']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "visualization/visualization_tools.py": {
        "sklearn": {
            "precision_recall_fscore_support_354": {
                "variable": {
                    "value": "(p, r, fs, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "confusion_matrix_355": {
                "variable": {
                    "value": "cm",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "class_list",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_46": {
                "variable": {
                    "value": "outdata",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(data.size(0), data.size(1), size[0], size[1])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "clamp_47": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "colors",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "colors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(colors, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "activeData",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(data_batch, min=-1, max=1)",
                            "Call"
                        ],
                        [
                            "data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.clamp(data, min=-1, max=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_281": {
                "variable": {
                    "value": "outdata",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_data_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(data.size()[0], data.size()[1], out_size_image[0], out_size_image[1])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "clamp_282": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(data_batch, min=-1, max=1)",
                            "Call"
                        ],
                        [
                            "data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.clamp(data, min=-1, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_257": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "data/audio_transforms.py": {
        "torch": {
            "stack_241": {
                "variable": {
                    "value": "ifreq_inv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0], torch.cumsum(x[1], dim=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "mag2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(mag[hf:]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "ph2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(ph[hf:]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "mag2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(x[1]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "ph2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(x[3]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "mag",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mag1, mag2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "ph",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ph1, ph2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "x + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_164": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(image).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mag, ph)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_235": {},
            "from_numpy_239": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_387": {
                "variable": {
                    "value": "mel_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "librosa.filters.mel(sample_rate, fft_size, n_mels=n_mel, norm=norm)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_matrix).float()",
                            "Call"
                        ],
                        [
                            "mel_matrix / mel_matrix.max()",
                            "BinOp"
                        ],
                        [
                            "mel_matrix / mel_norm",
                            "BinOp"
                        ],
                        [
                            "mel_matrix[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_402": {
                "variable": {
                    "value": "self.mel_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mel_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "librosa.filters.mel(sample_rate, fft_size, n_mels=n_mel, norm=norm)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_matrix).float()",
                            "Call"
                        ],
                        [
                            "mel_matrix / mel_matrix.max()",
                            "BinOp"
                        ],
                        [
                            "mel_matrix / mel_norm",
                            "BinOp"
                        ],
                        [
                            "mel_matrix[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_11": {
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "[mag1, mag2, ph1, ph2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "mag_r",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "[mag, ph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "mag2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(x[1]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "[mlog, ph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "[elog, ph]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_124": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "mag_to_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_131": {},
            "stack_63": {
                "tensors": {
                    "value": "[mag_l, mag_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[mag1, mag2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_241": {
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_164": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/loaders/base_loader.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, len(self.metadata[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_226": {
                "variable": {
                    "value": "val_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.getitem_processing(v) for v in val_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "val_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(v) for v in val_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "multinomial_115": {
                "variable": {
                    "value": "labels[:, shift]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(list(att_dict['count'].values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_123": {
                "variable": {
                    "value": "labels[:, shift:shift + len(att_dict[values])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(list(att_dict['count'].values())) / self.header['size']",
                            "BinOp"
                        ],
                        [
                            "norm_hist.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_116": {},
            "Tensor_126": {
                "variable": {
                    "value": "_min",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "_max",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "rand",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(att_dict['values'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_120": {}
        }
    },
    "data/preprocessing.py": {
        "torch": {}
    },
    "evaluation/gen_tests/generation_tests.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "input_z[:, -self.att_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.att_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ref_rand_z.clone()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "get_rand_gaussian_outlier(self.latent_noise_dim)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_96": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ref_rand_z.clone()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "get_rand_gaussian_outlier(self.latent_noise_dim)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "z[-self.att_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.att_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "z[:, -self.att_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.att_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ref_rand_z.clone()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "get_rand_gaussian_outlier(self.latent_noise_dim)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_z, torch.zeros((input_z.size(0), self.att_dim)).double()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ref_rand_z.clone()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z)",
                            "Call"
                        ],
                        [
                            "get_rand_gaussian_outlier(self.latent_noise_dim)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_z).double()",
                            "Call"
                        ],
                        [
                            "torch.cat([input_z, torch.zeros((input_z.size(0), self.att_dim)).double()], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_z, torch.zeros((input_z.size(0), self.att_dim)).double()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "zi.astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "ndarray": {
                    "value": "np.multiply(i, vector).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "(input_z.size(0), self.att_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "(input_z.size(0), self.att_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/gen_tests/radial_interpolation.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "fixed_point",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "z_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_20": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "8.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/gen_tests/random.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "data_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_batch, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_57": {
                "variable": {
                    "value": "perm",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "val_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/gen_tests/spherical_interpolation.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "acos_19": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.dot(x, y) / (x.norm() * y.norm())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "z_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dot_18": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(z_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(z_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_23": {
                "input": {
                    "value": "t * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/gen_tests/true_sample.py": {
        "torch": {}
    },
    "evaluation/inception_network.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_59": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_65": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_95": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/metrics/inception_score.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "self.sumSoftMax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_26": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_22": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_22": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "x / self.nItems + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/metrics/is.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "config['path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda' if GPU_is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "is_data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "fake_data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "is_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "is_data[i * args.batch_size:args.batch_size * (i + 1)].to(device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/metrics/kid.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "config['path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda' if GPU_is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "real_batch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "fake_batch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "real_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(real_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "fake_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "real_input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "real_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_batch[i * args.batch_size:args.batch_size * (i + 1)].to(device)",
                            "Call"
                        ],
                        [
                            "mel(real_input)",
                            "Call"
                        ],
                        [
                            "real_input[:, 0:1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(real_input, (299, 299))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "variable": {
                    "value": "fake_input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_batch[i * args.batch_size:args.batch_size * (i + 1)].to(device)",
                            "Call"
                        ],
                        [
                            "mel(fake_input)",
                            "Call"
                        ],
                        [
                            "fake_input[:, 0:1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(fake_input, (299, 299))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/metrics/maximum_mean_discrepancy.py": {
        "torch": {
            "exp_16": {
                "input": {
                    "value": "-d / var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/metrics/test_D.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_data_loader(dbname)(name=dbname + '_' + transform_config['transform'], preprocessing=processor, **loader_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(args.batch_size, len(loader))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "D_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "D_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(D_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gans/ac_criterion.py": {
        "torch": {
            "tensor_89": {
                "variable": {
                    "value": "self.labelWeights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 for x in range(self.getInputDim())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_171": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(targetCat)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "targetCat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "targetOut",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batchSize, total_att_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "targetCat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_215": {
                "variable": {
                    "value": "outIdx",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(outputD.size(0), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "vect",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((n, C), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((sizeBatch, C), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attribSize[i]",
                            "Subscript"
                        ],
                        [
                            "self.attribSize[i]",
                            "Subscript"
                        ],
                        [
                            "self.attribSize[i]",
                            "Subscript"
                        ],
                        [
                            "self.attribSize[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((n, C), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((sizeBatch, C), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "inputLatent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "locPred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_225": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locPred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(locInput, dim=1)",
                            "Call"
                        ],
                        [
                            "locInput",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "outIdx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outIdx, tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_237": {
                "*size": {
                    "value": "pred.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(0, C, n)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, C, sizeBatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_229": {
                "variable": {
                    "value": "locPred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "outIdx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outIdx, locPred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "variable": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_276": {
                "variable": {
                    "value": "locLoss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "locTarget",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target[:, shiftTarget:shiftTarget + C]",
                            "Subscript"
                        ],
                        [
                            "locTarget.reshape(locInput.size())",
                            "Call"
                        ],
                        [
                            "target[:, shiftTarget:shiftTarget + C]",
                            "Subscript"
                        ],
                        [
                            "target[:, shiftTarget]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_239": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_280": {
                "variable": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_281": {
                "variable": {
                    "value": "locLoss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "locTarget",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target[:, shiftTarget:shiftTarget + C]",
                            "Subscript"
                        ],
                        [
                            "locTarget.reshape(locInput.size())",
                            "Call"
                        ],
                        [
                            "target[:, shiftTarget:shiftTarget + C]",
                            "Subscript"
                        ],
                        [
                            "target[:, shiftTarget]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_285": {
                "variable": {
                    "value": "locLoss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "locInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "outputD[:, shiftInput:shiftInput + C]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(locInput)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "locTarget.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.labelWeights[shiftInput:shiftInput + C]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gans/base_GAN.py": {
        "torch": {
            "randn_384": {
                "variable": {
                    "value": "inputLatent",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.real_input.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.config.noiseVectorDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_410": {
                "variable": {
                    "value": "inputLatent",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, self.config.noiseVectorDim, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_521": {
                "variable": {
                    "value": "in_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda if self.useGPU else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_93": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_94": {
                "variable": {
                    "value": "self.n_devices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_135": {
                "variable": {
                    "value": "self.lossCriterion.generationActivation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_175": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "self.avgG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.avgG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_363": {
                "variable": {
                    "value": "self.netD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.netD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_365": {
                "variable": {
                    "value": "self.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "inputLatent",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputLatent, latentRandCat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_412": {
                "tensors": {
                    "value": "(inputLatent, constrainPart)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_492": {
                "obj": {
                    "value": "self.getStateDict(saveTrainTmp=saveTrainTmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_611": {
                "obj": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * self.ClassificationCriterion.getCriterion(outputD, target, skipAtts=skipAtts)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gans/base_loss_criterions.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_48": {
                "input": {
                    "value": "F.sigmoid(input[:, :self.sizeDecisionLayer])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([value]).expand(size, 1).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([value], dtype=torch.float).expand(size).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_86": {
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_106": {
                "input": {
                    "value": "torch.sigmoid(input[:, :self.sizeDecisionLayer])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([value]).expand(size, 1).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([value], dtype=torch.float).expand(size).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "input[:, :self.sizeDecisionLayer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_85": {
                "input": {
                    "value": "-input[:, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "input[:, :self.sizeDecisionLayer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gans/custom_layers.py": {
        "torch": {
            "Sequential_146": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualizedConv2d(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_166": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_232": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, channel, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size[0], size[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_148": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_151": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "nChannelsPrevious",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_101": {
                "in_channels": {
                    "value": "nChannelsPrevious",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernelSize",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "nChannelsPrevious",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernelSize",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_217": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_219": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.weight.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ZeroPad2d_266": {
                "padding": {
                    "value": "(outputShape[1] - 1, outputShape[1] - 1, outputShape[0] - 1, outputShape[0] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LeakyReLU_278": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_286": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_15": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gans/gan_trainer.py": {
        "torch": {
            "device_97": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.useGPU else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.getDataset(scale)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.getMiniBatchSize(scale)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "getattr(self, 'num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gans/gradient_losses.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_40": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "decisionInterpolate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(interpolates, False)",
                            "Call"
                        ],
                        [
                            "decisionInterpolate[:, -1].sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * input + (1 - alpha) * fake",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gans/mini_batch_stddev_module.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "var_31": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(subGroupSize, -1, size[1], size[2])",
                            "Call"
                        ],
                        [
                            "x.view(subGroupSize, -1, size[1], size[2], size[3])",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.size(0), 1, x.size(2), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.size(0), 1, x.size(2), x.size(3), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.var(y, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "y.view(G, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, 1).view(G, 1)",
                            "Call"
                        ],
                        [
                            "y.expand(G, size[2]).view((G, 1, 1, size[2]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, subGroupSize, -1, -1)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view((-1, 1, size[2]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, size[2] * size[3]).view((G, 1, 1, size[2], size[3]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, subGroupSize, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view((-1, 1, size[2], size[3]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_34": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(subGroupSize, -1, size[1], size[2])",
                            "Call"
                        ],
                        [
                            "x.view(subGroupSize, -1, size[1], size[2], size[3])",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.size(0), 1, x.size(2), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.size(0), 1, x.size(2), x.size(3), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.var(y, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "y.view(G, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, 1).view(G, 1)",
                            "Call"
                        ],
                        [
                            "y.expand(G, size[2]).view((G, 1, 1, size[2]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, subGroupSize, -1, -1)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view((-1, 1, size[2]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, size[2] * size[3]).view((G, 1, 1, size[2], size[3]))",
                            "Call"
                        ],
                        [
                            "y.expand(G, subGroupSize, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view((-1, 1, size[2], size[3]))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gans/progressive_conv_net.py": {
        "torch": {
            "ModuleList_67": {
                "variable": {
                    "value": "self.scaleLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "self.toRGBLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "variable": {
                    "value": "self.leakyRelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "leakyReluLeak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.groupScale0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_327": {
                "variable": {
                    "value": "self.scaleLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_329": {
                "variable": {
                    "value": "self.mergeLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.groupScaleZero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_338": {
                "variable": {
                    "value": "self.fromRGBLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_346": {
                "variable": {
                    "value": "self.leakyRelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "leakyReluLeak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_202": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, num_flat_features(x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.formatLayer(x))",
                            "Call"
                        ],
                        [
                            "self.tensor_view(x)",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(convLayer(x))",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.upscale(x, self.scaleSizes[scale + 1])",
                            "Call"
                        ],
                        [
                            "self.toRGBLayers[-1](x)",
                            "Call"
                        ],
                        [
                            "self.alpha * y + (1.0 - self.alpha) * x",
                            "BinOp"
                        ],
                        [
                            "self.leakyRelu(convLayer(x))",
                            "Call"
                        ],
                        [
                            "self.generationActivation(x)",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.fromRGBLayers[-1](x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(layer(x))",
                            "Call"
                        ],
                        [
                            "self.downScale(x, size=self.inputSizes[shift])",
                            "Call"
                        ],
                        [
                            "miniBatchStdDev(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.groupScaleZero[0](x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, num_flat_features(x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(x_lin)",
                            "Call"
                        ],
                        [
                            "self.alpha * y + (1 - self.alpha) * x",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_421": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, num_flat_features(x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.formatLayer(x))",
                            "Call"
                        ],
                        [
                            "self.tensor_view(x)",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(convLayer(x))",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.upscale(x, self.scaleSizes[scale + 1])",
                            "Call"
                        ],
                        [
                            "self.toRGBLayers[-1](x)",
                            "Call"
                        ],
                        [
                            "self.alpha * y + (1.0 - self.alpha) * x",
                            "BinOp"
                        ],
                        [
                            "self.leakyRelu(convLayer(x))",
                            "Call"
                        ],
                        [
                            "self.generationActivation(x)",
                            "Call"
                        ],
                        [
                            "self.normalizationLayer(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.fromRGBLayers[-1](x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(layer(x))",
                            "Call"
                        ],
                        [
                            "self.downScale(x, size=self.inputSizes[shift])",
                            "Call"
                        ],
                        [
                            "miniBatchStdDev(x)",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(self.groupScaleZero[0](x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, num_flat_features(x))",
                            "Call"
                        ],
                        [
                            "self.leakyRelu(x_lin)",
                            "Call"
                        ],
                        [
                            "self.alpha * y + (1 - self.alpha) * x",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gans/progressive_gan.py": {
        "torch": {
            "Adam_143": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.netD.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0, 0.99]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lrD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.netG.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0, 0.99]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lrG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_237": {
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true_b.size(0)",
                            "Call"
                        ],
                        [
                            "self.real_input.size(0)",
                            "Call"
                        ],
                        [
                            "self.real_input.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gans/progressive_gan_trainer.py": {
        "torch": {
            "adaptive_avg_pool2d_190": {
                "variable": {
                    "value": "low_res_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * low_res_real + (1 - alpha) * input_real",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.outputShapes[scale - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_191": {
                "variable": {
                    "value": "low_res_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "low_res_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(input_real, output_size=self.outputShapes[scale - 1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(low_res_real, size=input_real.size()[-2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_real.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gans/utils.py": {
        "torch": {
            "interpolate_33": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "utils/utils.py": {
        "torch": {
            "Linear_110": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inFeatures",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outFeatures",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_398": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_403": {
                "type": {
                    "value": "cuda if GPU_is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_477": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(image).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_477": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_541": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 9999)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_544": {
                "seed": {
                    "value": "rand_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_477": {
                "ndarray": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_477": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}