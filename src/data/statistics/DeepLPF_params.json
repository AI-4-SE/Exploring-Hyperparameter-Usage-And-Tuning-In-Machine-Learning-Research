{
    "data.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "SummaryWriter_50": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "inference_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "inference_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_dict=inference_data_dict, transform=transforms.Compose([transforms.ToTensor()]), normaliser=1, is_inference=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "training_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_dict=training_data_dict, normaliser=1, is_valid=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "testing_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testing_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_dict=testing_data_dict, normaliser=1, is_valid=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "validation_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_dict=validation_data_dict, normaliser=1, is_valid=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_323": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_prefix + '_' + str(num_epoch)",
                            "BinOp"
                        ],
                        [
                            "snapshot_prefix + '_validpsnr_{}_validloss_{}_testpsnr_{}_testloss_{}_epoch_{}_model.pt'.format(valid_psnr, valid_loss.tolist()[0], test_psnr, test_loss.tolist()[0], epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_144": {
                "f": {
                    "value": "checkpoint_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint_filepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_227": {
                "variable": {
                    "value": "net_img_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_img_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input_img_batch)",
                            "Call"
                        ],
                        [
                            "torch.clamp(net_img_batch, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_prefix + '_' + str(num_epoch)",
                            "BinOp"
                        ],
                        [
                            "snapshot_prefix + '_validpsnr_{}_validloss_{}_testpsnr_{}_testloss_{}_epoch_{}_model.pt'.format(valid_psnr, valid_loss.tolist()[0], test_psnr, test_loss.tolist()[0], epoch)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "metric.py": {
        "torch": {
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_89": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_img_batch[i, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(img, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Tensor_73": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(num_channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.create_window(self.ssim_window_size, num_channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.ssim_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(num_channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.create_window(self.ssim_window_size, num_channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.ssim_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "ssims",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ssims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ssims)",
                            "Call"
                        ],
                        [
                            "(ssims + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_161": {
                "variable": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mcs)",
                            "Call"
                        ],
                        [
                            "(mcs + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_172": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.fc_cubic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_270": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_271": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "feat_cubic",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "cubic_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(img_fuse + img, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.deeplpfnet(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_352": {
                "variable": {
                    "value": "img_cubic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img + cubic_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_377": {
                "variable": {
                    "value": "self.fc_graduated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_379": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_391": {
                "variable": {
                    "value": "tanh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_449": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_470": {
                "variable": {
                    "value": "feat_graduated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_499": {
                "variable": {
                    "value": "y_axis_dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 9])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "y_axis_dist1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_500": {
                "variable": {
                    "value": "y_axis_dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "y_axis_dist2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_501": {
                "variable": {
                    "value": "y_axis_dist3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 11])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "y_axis_dist3.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_503": {
                "variable": {
                    "value": "y_axis_dist4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 12])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "y_axis_dist1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_504": {
                "variable": {
                    "value": "y_axis_dist5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 13])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "y_axis_dist2.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_505": {
                "variable": {
                    "value": "y_axis_dist6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh01(G[0, 14])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "y_axis_dist3.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_523": {
                "variable": {
                    "value": "slope1_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slope1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G[0, 3].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "atan_524": {
                "variable": {
                    "value": "slope2_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slope2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G[0, 4].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "atan_525": {
                "variable": {
                    "value": "slope3_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slope3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G[0, 5].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_549": {
                "variable": {
                    "value": "mask_scale_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale1, mask_scale2, mask_scale3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_551": {
                "variable": {
                    "value": "mask_scale_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_1.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_560": {
                "variable": {
                    "value": "mask_scale_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale4, mask_scale5, mask_scale6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_562": {
                "variable": {
                    "value": "mask_scale_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_4.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_571": {
                "variable": {
                    "value": "mask_scale_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale7, mask_scale8, mask_scale9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_573": {
                "variable": {
                    "value": "mask_scale_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_7.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_575": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_1 * mask_scale_4 * mask_scale_7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_602": {
                "variable": {
                    "value": "self.fc_elliptical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_604": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_605": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_615": {
                "variable": {
                    "value": "tanh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_648": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_671": {
                "variable": {
                    "value": "feat_elliptical",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "mask_scale_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale1, mask_scale2, mask_scale3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_778": {
                "variable": {
                    "value": "mask_scale_1_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_1.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_793": {
                "variable": {
                    "value": "mask_scale_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale4, mask_scale5, mask_scale6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_795": {
                "variable": {
                    "value": "mask_scale_4_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_4.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_810": {
                "variable": {
                    "value": "mask_scale_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_scale7, mask_scale8, mask_scale9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_812": {
                "variable": {
                    "value": "mask_scale_7_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_7.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_815": {
                "variable": {
                    "value": "mask_scale_elliptical",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_1_rad * mask_scale_4_rad * mask_scale_7_rad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_861": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_886": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_910": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_969": {
                "variable": {
                    "value": "mask_scale_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_scale_graduated + mask_scale_elliptical",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_972": {
                "variable": {
                    "value": "img_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_cubic * mask_scale_fuse",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_974": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_fuse + img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_157": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_231": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.saved_tensors",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_842": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_959": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(num_channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.create_window(self.ssim_window_size, num_channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.ssim_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(num_channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.create_window(self.ssim_window_size, num_channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.ssim_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(num_channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.create_window(self.ssim_window_size, num_channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.ssim_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_213": {
                "input": {
                    "value": "predicted_img_lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageProcessing.rgb_to_lab(predicted_img.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_img_lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageProcessing.rgb_to_lab(target_img.squeeze(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_426": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor + grad1 * top_line + grad2 * top_line",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_432": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor + grad1 * top_line + grad2 * top_line",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_440": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + grad1 * top_line + grad2 * top_line",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_446": {
                "variable": {
                    "value": "mask_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + grad1 * top_line + grad2 * top_line",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_745": {
                "input": {
                    "value": "torch.clamp((y_axis - y_coord1) / torch.sqrt((x_axis - x_coord1) ** 2 + (y_axis - y_coord1) ** 2 + eps1), -1 + eps2, 1 - eps2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_748": {
                "input": {
                    "value": "torch.clamp((y_axis - y_coord2) / torch.sqrt((x_axis - x_coord2) ** 2 + (y_axis - y_coord2) ** 2 + eps1), -1 + eps2, 1 - eps2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_751": {
                "input": {
                    "value": "torch.clamp((y_axis - y_coord3) / torch.sqrt((x_axis - x_coord3) ** 2 + (y_axis - y_coord3) ** 2 + eps1), -1 + eps2, 1 - eps2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_756": {
                "input": {
                    "value": "a1 ** 2 * torch.sin(angle_1) ** 2 + b1 ** 2 * torch.cos(angle_1) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_758": {
                "input": {
                    "value": "a2 ** 2 * torch.sin(angle_2) ** 2 + b2 ** 2 * torch.cos(angle_2) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_760": {
                "input": {
                    "value": "a3 ** 2 * torch.sin(angle_3) ** 2 + b3 ** 2 * torch.cos(angle_3) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_302": {
                "start": {
                    "value": "img.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_304": {
                "start": {
                    "value": "img.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_465": {
                "start": {
                    "value": "img.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_467": {
                "start": {
                    "value": "img.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_528": {
                "input": {
                    "value": "slope1_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_529": {
                "input": {
                    "value": "slope1_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_530": {
                "input": {
                    "value": "slope2_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_531": {
                "input": {
                    "value": "slope2_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_532": {
                "input": {
                    "value": "slope3_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_533": {
                "input": {
                    "value": "slope3_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(slope3)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_691": {
                "start": {
                    "value": "img.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_693": {
                "start": {
                    "value": "img.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_745": {
                "input": {
                    "value": "(y_axis - y_coord1) / torch.sqrt((x_axis - x_coord1) ** 2 + (y_axis - y_coord1) ** 2 + eps1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + eps2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - eps2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_748": {
                "input": {
                    "value": "(y_axis - y_coord2) / torch.sqrt((x_axis - x_coord2) ** 2 + (y_axis - y_coord2) ** 2 + eps1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + eps2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - eps2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_751": {
                "input": {
                    "value": "(y_axis - y_coord3) / torch.sqrt((x_axis - x_coord3) ** 2 + (y_axis - y_coord3) ** 2 + eps1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + eps2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - eps2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_641": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_641": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_642": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_642": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_646": {
                "input": {
                    "value": "(x_axis - shift_x) ** 2 + (y_axis - shift_y) ** 2 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_746": {
                "input": {
                    "value": "(x_axis - x_coord1) ** 2 + (y_axis - y_coord1) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_749": {
                "input": {
                    "value": "(x_axis - x_coord2) ** 2 + (y_axis - y_coord2) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_752": {
                "input": {
                    "value": "(x_axis - x_coord3) ** 2 + (y_axis - y_coord3) ** 2 + eps1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_756": {
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord1) / torch.sqrt((x_axis - x_coord1) ** 2 + (y_axis - y_coord1) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_756": {
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord1) / torch.sqrt((x_axis - x_coord1) ** 2 + (y_axis - y_coord1) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_758": {
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord2) / torch.sqrt((x_axis - x_coord2) ** 2 + (y_axis - y_coord2) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_758": {
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord2) / torch.sqrt((x_axis - x_coord2) ** 2 + (y_axis - y_coord2) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_760": {
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord3) / torch.sqrt((x_axis - x_coord3) ** 2 + (y_axis - y_coord3) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_760": {
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp((y_axis - y_coord3) / torch.sqrt((x_axis - x_coord3) ** 2 + (y_axis - y_coord3) ** 2 + eps1), -1 + eps2, 1 - eps2)) - A3",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "unet.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_47": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.up_conv1x1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.up_conv1x1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.up_conv1x1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.up_conv1x1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_172": {
                "variable": {
                    "value": "self.refpad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_190": {
                "variable": {
                    "value": "self.refpad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(conv1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv2)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv3)",
                            "Call"
                        ],
                        [
                            "self.maxpool(conv4)",
                            "Call"
                        ],
                        [
                            "self.dconv_down5(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_1(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_2(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_3(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up2(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv1x1_4(self.upsample(x))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, conv1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (1, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv1(self.refpad(x_in)))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv2(self.refpad(x)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "matmul_59": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "img.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "img / 12.92 * img.le(0.04045).float() + ((torch.clamp(img, min=1e-06) + 0.055) / 1.055) ** 2.4 * img.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, rgb_to_xyz)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda())",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, fxfyfz_to_lab) + Variable(torch.FloatTensor([-16.0, 0.0, 0.0]), requires_grad=False).cuda()",
                            "BinOp"
                        ],
                        [
                            "img.view(shape)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "ImageProcessing.normalise_image(np.array(Image.open(img_filepath)), normaliser)",
                            "Call"
                        ],
                        [
                            "img.astype('float32') / normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgb_to_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor([[0.412453, 0.212671, 0.019334], [0.35758, 0.71516, 0.119193], [0.180423, 0.072169, 0.950227]]), requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "img.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "img / 12.92 * img.le(0.04045).float() + ((torch.clamp(img, min=1e-06) + 0.055) / 1.055) ** 2.4 * img.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, rgb_to_xyz)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda())",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, fxfyfz_to_lab) + Variable(torch.FloatTensor([-16.0, 0.0, 0.0]), requires_grad=False).cuda()",
                            "BinOp"
                        ],
                        [
                            "img.view(shape)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "ImageProcessing.normalise_image(np.array(Image.open(img_filepath)), normaliser)",
                            "Call"
                        ],
                        [
                            "img.astype('float32') / normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "img.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "img / 12.92 * img.le(0.04045).float() + ((torch.clamp(img, min=1e-06) + 0.055) / 1.055) ** 2.4 * img.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, rgb_to_xyz)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda())",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, fxfyfz_to_lab) + Variable(torch.FloatTensor([-16.0, 0.0, 0.0]), requires_grad=False).cuda()",
                            "BinOp"
                        ],
                        [
                            "img.view(shape)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "ImageProcessing.normalise_image(np.array(Image.open(img_filepath)), normaliser)",
                            "Call"
                        ],
                        [
                            "img.astype('float32') / normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "fxfyfz_to_lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor([[0.0, 500.0, 0.0], [116.0, -500.0, 200.0], [0.0, 0.0, -200.0]]), requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_66": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "img.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "img / 12.92 * img.le(0.04045).float() + ((torch.clamp(img, min=1e-06) + 0.055) / 1.055) ** 2.4 * img.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, rgb_to_xyz)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda())",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, fxfyfz_to_lab) + Variable(torch.FloatTensor([-16.0, 0.0, 0.0]), requires_grad=False).cuda()",
                            "BinOp"
                        ],
                        [
                            "img.view(shape)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "ImageProcessing.normalise_image(np.array(Image.open(img_filepath)), normaliser)",
                            "Call"
                        ],
                        [
                            "img.astype('float32') / normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_47": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "img.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "img / 12.92 * img.le(0.04045).float() + ((torch.clamp(img, min=1e-06) + 0.055) / 1.055) ** 2.4 * img.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, rgb_to_xyz)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, Variable(torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]), requires_grad=False).cuda())",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(img, fxfyfz_to_lab) + Variable(torch.FloatTensor([-16.0, 0.0, 0.0]), requires_grad=False).cuda()",
                            "BinOp"
                        ],
                        [
                            "img.view(shape)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ],
                        [
                            "ImageProcessing.normalise_image(np.array(Image.open(img_filepath)), normaliser)",
                            "Call"
                        ],
                        [
                            "img.astype('float32') / normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}