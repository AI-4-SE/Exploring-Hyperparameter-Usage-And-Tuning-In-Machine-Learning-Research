{
    "main.py": {
        "sklearn": {
            "train_test_split_122": {
                "variable": {
                    "value": "(src_x, src_test_x, src_y, src_test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "src_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "src_y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "src_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CSV2Array(os.path.join('data', args.src, args.src + '.csv'))",
                            "Call"
                        ],
                        [
                            "XML2Array(os.path.join('data', args.src, 'negative.review'), os.path.join('data', args.src, 'positive.review'))",
                            "Call"
                        ],
                        [
                            "train_test_split(src_x, src_y, test_size=0.2, stratify=src_y, random_state=args.seed)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_133": {
                "variable": {
                    "value": "(tgt_train_x, tgt_test_y, tgt_train_y, tgt_test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "tgt_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "tgt_y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "tgt_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CSV2Array(os.path.join('data', args.tgt, args.tgt + '.csv'))",
                            "Call"
                        ],
                        [
                            "XML2Array(os.path.join('data', args.tgt, 'negative.review'), os.path.join('data', args.tgt, 'positive.review'))",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.pooler(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(param.hidden_size, param.intermediate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "param.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "param.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "param.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_16": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(classifier.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "param.c_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "CELoss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_69": {
                "variable": {
                    "value": "BCELoss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_70": {
                "variable": {
                    "value": "KLDivLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgt_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_164": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "feat_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_src_tgt, feat_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "label_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_src, label_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_concat.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_125": {
                "variable": {
                    "value": "tgt_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_classifier(feat_src_tgt) / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "src_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_classifier(feat_src) / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__132": {
                "parameters": {
                    "value": "tgt_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "feat_src_tgt.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "feat_tgt.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_161": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_164": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_165": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_171": {
                "variable": {
                    "value": "mmd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 / (source.mean(dim=0) - target.mean(dim=0)).norm()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "manual_seed",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(param.model_root, args.src, args.model, str(args.seed), restore)",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, name)",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "manual_seed",
                            "variable"
                        ]
                    ]
                }
            },
            "load_86": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(param.model_root, args.src, args.model, str(args.seed), restore)",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, name)",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}