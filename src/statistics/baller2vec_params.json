{
    "paper_functions.py": {
        "sklearn": {
            "pairwise_distances_312": {
                "X": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "model.player_embedding.weight",
                            "Attribute"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "player_embeddings.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "possible_values": []
                }
            },
            "pairwise_distances_313": {
                "X": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "model.player_embedding.weight",
                            "Attribute"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "player_embeddings.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "euclidean",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "device_155": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "device_1393": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1410": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_597": {
                "variable": {
                    "value": "tensors[player_xs]",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors['player_xs']",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "COURT_LENGTH",
                    "possible_values": []
                }
            },
            "clamp_598": {
                "variable": {
                    "value": "tensors[player_ys]",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors['player_ys']",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "COURT_WIDTH",
                    "possible_values": []
                }
            },
            "clamp_599": {
                "variable": {
                    "value": "tensors[ball_xs]",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors['ball_xs']",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "COURT_LENGTH",
                    "possible_values": []
                }
            },
            "clamp_600": {
                "variable": {
                    "value": "tensors[ball_ys]",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors['ball_ys']",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "COURT_WIDTH",
                    "possible_values": []
                }
            },
            "manual_seed_715": {
                "seed": {
                    "value": "2010",
                    "possible_values": []
                }
            },
            "softmax_1295": {
                "variable": {
                    "value": "ball_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "ball_trajs",
                    "possible_values": [
                        [
                            "ball_traj_rows * train_dataset.ball_traj_n ** 2 + ball_traj_cols * train_dataset.ball_traj_n + ball_traj_deps",
                            "BinOp"
                        ],
                        [
                            "model(tensors)['ball'][-len(tensors['player_idxs']):]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_300": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_306": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "model.player_embedding.weight",
                            "Attribute"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "player_embeddings.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_543": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "softmax_577": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['player'][:len(labels)]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['player'][preds_start:preds_stop]",
                            "Subscript"
                        ],
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ],
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_695": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_824": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_963": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_982": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_1095": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_1255": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_1293": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_1406": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_1416": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_308": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "model.player_embedding.weight",
                            "Attribute"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "player_embeddings.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_573": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_853": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_1133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_728": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_733": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['player'][:len(labels)]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['player'][preds_start:preds_stop]",
                            "Subscript"
                        ],
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ],
                        [
                            "model(test_tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "multinomial_734": {
                "variable": {
                    "value": "samp_trajs",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "np.zeros(train_dataset.player_traj_n ** 2)",
                            "Call"
                        ],
                        [
                            "probs / probs.sum()",
                            "BinOp"
                        ],
                        [
                            "np.zeros(train_dataset.ball_traj_n ** 3)",
                            "Call"
                        ],
                        [
                            "probs + 1",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum()",
                            "BinOp"
                        ],
                        [
                            "(heatmap / heatmap.sum()).flatten()",
                            "Call"
                        ],
                        [
                            "torch.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "baller2vec.py": {
        "torch": {
            "Baller2Vec_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sigmoid": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "self.seq_len": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "self.use_cls": {
                    "value": "use_cls",
                    "possible_values": []
                },
                "self.n_players": {
                    "value": "n_players",
                    "possible_values": []
                },
                "self.embed_before_mlp": {
                    "value": "embed_before_mlp",
                    "possible_values": []
                },
                "Embedding_37": {
                    "variable": {
                        "value": "self.player_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_player_ids",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "embedding_dim",
                        "possible_values": []
                    }
                },
                "Parameter_40": {
                    "variable": {
                        "value": "self.ball_embedding",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(embedding_dim)",
                        "possible_values": []
                    }
                },
                "Sequential_47": {
                    "variable": {
                        "value": "player_mlp",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_48": {
                    "variable": {
                        "value": "ball_mlp",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.player_mlp": {
                    "value": "player_mlp",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ],
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "self.ball_mlp": {
                    "value": "ball_mlp",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ],
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "TransformerEncoderLayer_71": {
                    "variable": {
                        "value": "encoder_layer",
                        "possible_values": []
                    },
                    "d_model": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ],
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "nhead": {
                        "value": "nhead",
                        "possible_values": []
                    },
                    "dim_feedforward": {
                        "value": "dim_feedforward",
                        "possible_values": []
                    },
                    "dropout": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "TransformerEncoder_74": {
                    "variable": {
                        "value": "self.transformer",
                        "possible_values": []
                    },
                    "encoder_layer": {
                        "value": "encoder_layer",
                        "possible_values": [
                            [
                                "nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout)",
                                "Call"
                            ],
                            [
                                "nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout)",
                                "Call"
                            ]
                        ]
                    },
                    "num_layers": {
                        "value": "num_layers",
                        "possible_values": []
                    }
                },
                "Linear_77": {
                    "variable": {
                        "value": "self.player_classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ],
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "n_player_labels",
                        "possible_values": []
                    }
                },
                "Linear_81": {
                    "variable": {
                        "value": "self.ball_classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ],
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "n_ball_labels",
                        "possible_values": []
                    }
                }
            },
            "Baller2VecSeq2Seq_225": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sigmoid": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "self.seq_len": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "Embedding_245": {
                    "variable": {
                        "value": "self.player_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_player_ids",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "embedding_dim",
                        "possible_values": []
                    }
                },
                "Parameter_247": {
                    "variable": {
                        "value": "self.ball_embedding",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(embedding_dim)",
                        "possible_values": []
                    }
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "ModuleDict_292": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "model",
                        "possible_values": [
                            [
                                "{}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "Linear_295": {
                    "variable": {
                        "value": "self.player_classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ],
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "n_player_labels",
                        "possible_values": []
                    }
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "possible_values": [
                        [
                            "(self.n_players + 2) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "(self.n_players + 1) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "6 * self.seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "possible_values": [
                        [
                            "(self.n_players + 2) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "(self.n_players + 1) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "6 * self.seq_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "combined",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_feats, ball_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "possible_values": [
                        [
                            "(self.n_players + 2) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "(self.n_players + 1) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "6 * self.seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "possible_values": [
                        [
                            "(self.n_players + 2) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "(self.n_players + 1) * self.seq_len",
                            "BinOp"
                        ],
                        [
                            "6 * self.seq_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.cls_embedding",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(mlp_layers[-1])",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.event_classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_seq_labels",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "self.player_embedding(tensors['player_idxs'].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ],
                        [
                            "self.player_embedding(tensors['player_idxs'][:, start:stop].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "player_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_embeddings, player_xs, player_ys, player_hoop_sides]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "player_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_xs, player_ys, player_hoop_sides]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "player_feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_embeddings, pos_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "ball_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball_embeddings, ball_xs, ball_ys, ball_zs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "ball_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball_xs, ball_ys, ball_zs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "ball_feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball_embeddings, pos_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "combined",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined, cls_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "player_mlp",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "ball_mlp",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleDict_284": {
                "variable": {
                    "value": "model[enc_dec]",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'player_mlp': player_mlp, 'ball_mlp': ball_mlp, 'transformer': transformer}",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "player_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_embeddings, player_xs, player_ys, player_hoop_sides]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "ball_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball_embeddings, ball_xs, ball_ys, ball_zs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "combined",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_feats, ball_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_384": {
                "variable": {
                    "value": "combined",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "self.player_embedding(tensors['player_idxs'].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ],
                        [
                            "self.player_embedding(tensors['player_idxs'][:, start:stop].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_274": {
                "variable": {
                    "value": "encoder_layer",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "dim_feedforward",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": []
                }
            },
            "TransformerEncoder_277": {
                "variable": {
                    "value": "transformer",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout)",
                            "Call"
                        ],
                        [
                            "nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                }
            },
            "TransformerDecoderLayer_279": {
                "variable": {
                    "value": "decoder_layer",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "dim_feedforward",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": []
                }
            },
            "TransformerDecoder_282": {
                "variable": {
                    "value": "transformer",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layer",
                    "possible_values": [
                        [
                            "nn.TransformerDecoderLayer(d_model, nhead, dim_feedforward, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                }
            },
            "sigmoid_336": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "self.player_embedding(tensors['player_idxs'].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ],
                        [
                            "self.player_embedding(tensors['player_idxs'][:, start:stop].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3 if embed_before_mlp else 3",
                            "IfExp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ],
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": [
                        [
                            "out_feats - embedding_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3 if embed_before_mlp else 3",
                            "IfExp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ],
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": [
                        [
                            "out_feats - embedding_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_338": {
                "variable": {
                    "value": "player_embeddings",
                    "possible_values": []
                },
                "input": {
                    "value": "player_embeddings",
                    "possible_values": [
                        [
                            "self.player_embedding(tensors['player_idxs'].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ],
                        [
                            "self.player_embedding(tensors['player_idxs'][:, start:stop].flatten().to(device))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(player_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.tanh(player_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3 if embed_before_mlp else 3",
                            "IfExp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ],
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": [
                        [
                            "out_feats - embedding_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_265": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3 if embed_before_mlp else 3",
                            "IfExp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ],
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": [
                        [
                            "out_feats - embedding_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_267": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_268": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "baller2vec_dataset.py": {
        "torch": {
            "Baller2VecDataset_8": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.hz": {
                    "value": "hz",
                    "possible_values": []
                },
                "self.secs": {
                    "value": "secs",
                    "possible_values": []
                },
                "self.N": {
                    "value": "N",
                    "possible_values": []
                },
                "self.n_players": {
                    "value": "n_players",
                    "possible_values": []
                },
                "self.gameids": {
                    "value": "gameids",
                    "possible_values": []
                },
                "self.starts": {
                    "value": "starts",
                    "possible_values": []
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "self.n_player_ids": {
                    "value": "n_player_ids",
                    "possible_values": []
                },
                "self.filtered_player_idxs": {
                    "value": "filtered_player_idxs",
                    "possible_values": []
                },
                "self.player_traj_n": {
                    "value": "player_traj_n",
                    "possible_values": []
                },
                "self.max_player_move": {
                    "value": "max_player_move",
                    "possible_values": []
                },
                "self.ball_traj_n": {
                    "value": "ball_traj_n",
                    "possible_values": []
                },
                "self.n_time_to_next_score_change": {
                    "value": "n_time_to_next_score_change",
                    "possible_values": []
                },
                "self.n_ball_loc_x": {
                    "value": "n_ball_loc_x",
                    "possible_values": []
                },
                "self.n_ball_loc_y": {
                    "value": "n_ball_loc_y",
                    "possible_values": []
                }
            }
        }
    },
    "grnn.py": {
        "torch": {
            "GRNN_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.seq_len": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "self.n_players": {
                    "value": "n_players",
                    "possible_values": []
                },
                "Embedding_25": {
                    "variable": {
                        "value": "self.player_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_player_ids",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "embedding_dim",
                        "possible_values": []
                    }
                },
                "Parameter_28": {
                    "variable": {
                        "value": "self.ball_embedding",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(embedding_dim)",
                        "possible_values": []
                    }
                },
                "Sequential_32": {
                    "variable": {
                        "value": "player_mlp",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_33": {
                    "variable": {
                        "value": "ball_mlp",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.player_mlp": {
                    "value": "player_mlp",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "self.ball_mlp": {
                    "value": "ball_mlp",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "Parameter_52": {
                    "variable": {
                        "value": "self.h_0s",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_players + 1, d_model)",
                        "possible_values": []
                    }
                },
                "ModuleDict_69": {
                    "variable": {
                        "value": "self.gru_comps",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "gru_comps",
                        "possible_values": [
                            [
                                "{}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "ParameterDict_70": {
                    "variable": {
                        "value": "self.gru_biases",
                        "possible_values": []
                    },
                    "parameters": {
                        "value": "gru_biases",
                        "possible_values": [
                            [
                                "{}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "ModuleDict_71": {
                    "variable": {
                        "value": "self.gru_norms",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "gru_norms",
                        "possible_values": [
                            [
                                "{}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "Linear_74": {
                    "variable": {
                        "value": "self.edge_project",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2 * d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    }
                },
                "ModuleList_97": {
                    "variable": {
                        "value": "self.edge_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "edge_layers",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "ModuleList_98": {
                    "variable": {
                        "value": "self.edge_norms",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "edge_norms",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "ModuleList_99": {
                    "variable": {
                        "value": "self.node_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "node_layers",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "ModuleList_100": {
                    "variable": {
                        "value": "self.node_norms",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "node_norms",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "Linear_103": {
                    "variable": {
                        "value": "self.player_classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": [
                            [
                                "mlp_layers[-1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "n_player_labels",
                        "possible_values": []
                    }
                }
            },
            "cat_119": {
                "variable": {
                    "value": "player_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[player_embeddings, player_xs, player_ys, player_hoop_sides]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "ball_pos",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball_embeddings, ball_xs, ball_ys, ball_zs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "gru_biases[z_r_h]",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, d_model)",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "x_ts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[time_step_players, time_step_ball]",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "z_ts",
                    "possible_values": []
                },
                "input": {
                    "value": "W_z_ts + U_z_ts + b_z",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "r_ts",
                    "possible_values": []
                },
                "input": {
                    "value": "W_r_ts + U_r_ts + b_r",
                    "possible_values": []
                }
            },
            "tanh_185": {
                "variable": {
                    "value": "h_t_hats",
                    "possible_values": []
                },
                "input": {
                    "value": "W_h_ts + U_h_ts + b_h",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "gru_comps[comp]",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, dim_feedforward)",
                    "possible_values": []
                }
            },
            "LayerNorm_67": {
                "variable": {
                    "value": "gru_norms[comp]",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_209": {
                "tensors": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{'player': torch.cat(preds)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "in_feats",
                    "possible_values": [
                        [
                            "embedding_dim + 3",
                            "BinOp"
                        ],
                        [
                            "out_feats",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "nn.Linear(d_model, dim_feedforward)",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "normalized_shape": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "*args": {
                    "value": "nn.Linear(d_model, dim_feedforward)",
                    "possible_values": []
                }
            },
            "LayerNorm_95": {
                "normalized_shape": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "[v_is, v_js]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "dim_feedforward",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "possible_values": [
                        [
                            "mlp_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "train_baller2vec.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "SEED",
                    "possible_values": [
                        [
                            "2010",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_printoptions_17": {
                "linewidth": {
                    "value": "160",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "Baller2VecDataset(**dataset_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts['train']['workers']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "possible_values": [
                        [
                            "Baller2VecDataset(**dataset_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts['train']['workers']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "Baller2VecDataset(**dataset_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts['train']['workers']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_218": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "[params for params in model.event_classifier.parameters()]",
                            "ListComp"
                        ],
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ],
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts['train']['learning_rate']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_219": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_359": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['ball'][n_player_trajs:][:len(labels)]",
                            "Subscript"
                        ],
                        [
                            "model(tensors)['seq_label'][-model.seq_len:]",
                            "Subscript"
                        ],
                        [
                            "model(tensors, start_stops)[:len(labels)]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_213": {
                "f": {
                    "value": "f'{old_job_dir}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_223": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{JOB_DIR}/optimizer.pth'",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_226": {
                "f": {
                    "value": "f'{JOB_DIR}/optimizer.pth'",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_292": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "[params for params in model.event_classifier.parameters()]",
                            "ListComp"
                        ],
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ],
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts['train']['learning_rate']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_grnn.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "SEED",
                    "possible_values": [
                        [
                            "2010",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_printoptions_13": {
                "linewidth": {
                    "value": "160",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts['train']['learning_rate']",
                    "possible_values": [
                        [
                            "yaml.safe_load(open(f'{JOB_DIR}/{JOB}.yaml'))",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(tensors)['player'][:n_player_trajs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_43": {
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{JOB_DIR}/optimizer.pth'",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{JOB_DIR}/best_params.pth'",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "f'{JOB_DIR}/optimizer.pth'",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "[params for params in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.1 * opts['train']['learning_rate']",
                    "possible_values": []
                }
            }
        }
    }
}