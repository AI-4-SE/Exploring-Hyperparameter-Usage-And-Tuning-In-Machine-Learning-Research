{
    "dvq_model.py": {
        "tensorflow": {
            "Conv2D_20": {
                "variable": {
                    "value": "self.first_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_res_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "variable": {
                    "value": "self.second_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "int"
                        ],
                        [
                            "255",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "variable": {
                    "value": "self.pre_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "int"
                        ],
                        [
                            "255",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normal_84": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.D, self.K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.D, self.K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal((self.D, self.K), mean=0.0, stddev=0.1)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distances",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_99": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(-distances, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding_indices, tf.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(-distances, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding_indices, tf.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "commitment_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x - tf.stop_gradient(e_k)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "vq_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(tf.stop_gradient(x) - e_k) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings",
                            "Attribute"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_137": {
                "variable": {
                    "value": "vq_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "ouputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "ouputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2D_186": {
                "variable": {
                    "value": "self.pre_vq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "D * L",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_203": {
                "variable": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, out_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(out)",
                            "Call"
                        ],
                        [
                            "out.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2D_241": {
                "variable": {
                    "value": "self.pre_vq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, out_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1, int(out_shape[1]), int(out_shape[2]), int(out_shape[-1]) * self.L)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "relu_41": {
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_119": {
                "params": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(embeddings, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(-distances, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding_indices, tf.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_193": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_195": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.channels * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_221": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(inputs, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=inputs, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_248": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_250": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.channels * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "deconv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, out_shape)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.encoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.encoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.pre_vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, (-1, out_shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.vq(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, reshaped)",
                            "Call"
                        ],
                        [
                            "self.decoder_resnetblock(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_convblock(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ],
                        [
                            "self.last_conv(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_277": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(inputs, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=inputs, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "embeddings ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_106": {
                "input": {
                    "value": "quantized - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "filters": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_65": {
                "filters": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_199": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_213": {
                "input_tensor": {
                    "value": "(out - x_norm) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_222": {
                "labels": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out, [-1, 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, 256])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_254": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_269": {
                "input_tensor": {
                    "value": "(out - x_norm) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_278": {
                "labels": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + second_res",
                            "BinOp"
                        ],
                        [
                            "self.pre_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.first_res(inputs)",
                            "Call"
                        ],
                        [
                            "self.second_res(inputs)",
                            "Call"
                        ],
                        [
                            "vq_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "vq_inputs",
                            "variable"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(inputs, (-1,)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(out, [-1, 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, 256])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stop_gradient_108": {
                "input": {
                    "value": "e_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quantized",
                            "variable"
                        ]
                    ]
                }
            },
            "stop_gradient_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}