{
    "model/BayesianCNN.py": {
        "tensorflow": {
            "Sequential_8": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Reshape([32, 32, 3]), tfp.layers.Convolution2DReparameterization(64, kernel_size=5, padding='SAME', activation=tf.nn.relu), tf.keras.layers.MaxPooling2D(pool_size=[2, 2], strides=[2, 2], padding='SAME'), tf.keras.layers.Flatten(), tfp.layers.DenseReparameterization(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_20": {
                "variable": {
                    "value": "neg_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_23": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Reshape_9": {
                "target_shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_12": {
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/BayesianLSTM.py": {
        "tensorflow": {
            "concat_32": {
                "variable": {
                    "value": "concat_inputs_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "variable": {
                    "value": "concat_inputs_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(concat_inputs_hidden, self.w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "tf.squeeze(self.b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat_inputs_hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([inputs, hidden], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(concat_inputs_hidden, self.w), tf.squeeze(self.b))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_38": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cell * tf.sigmoid(f + self._forget_bias) + tf.sigmoid(i) * self._activation(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._activation(new_cell) * tf.sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_33": {
                "a": {
                    "value": "concat_inputs_hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([inputs, hidden], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(concat_inputs_hidden, self.w), tf.squeeze(self.b))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/sentiment.py": {
        "tensorflow": {
            "Session_54": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiRNNCell_119": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "self.lstms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.groundtruths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_38": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.final_lstm_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_i/o",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "rnn_cell",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "rnn_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_45": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "self.groundtruths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_46": {
                "variable": {
                    "value": "self.KL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('KL_layers')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "KL",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_46": {
                "key": {
                    "value": "KL_layers",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "tensorflow": {
            "reshape_13": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sample",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(sample, [-1])",
                            "Call"
                        ],
                        [
                            "mu + sigma * epsilon",
                            "BinOp"
                        ],
                        [
                            "mu + sigma",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(mean, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(std, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "variable": {
                    "value": "q_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "posterior.log_prob(sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "variable": {
                    "value": "p_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prior.log_prob(sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_25": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(posterior.log_prob(sample))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(prior.log_prob(sample))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_mean'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_rho'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_49": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "rho",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('{}_rho'.format(name), shape=shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_62": {
                "name": {
                    "value": "name + '_rho_hist'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "rho",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('{}_rho'.format(name), shape=shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_63": {
                "name": {
                    "value": "name + '_mu_hist'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('{}_mean'.format(name), shape=shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_64": {
                "name": {
                    "value": "name + '_sigma_hist'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.softplus(rho)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_67": {
                "name": {
                    "value": "KL_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_KL_univariate_prior(prior, theta, sample)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}