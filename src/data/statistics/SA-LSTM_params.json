{
    "loader/data_loader.py": {
        "torch": {
            "stack_202": {
                "variable": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.load_captions()",
                            "Call"
                        ],
                        [
                            "torch.stack(captions)",
                            "Call"
                        ],
                        [
                            "captions.float()",
                            "Call"
                        ],
                        [
                            "captions.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.CustomDataset(self.C, phase, caption_fpath, transform_frame=self.transform_frame, transform_caption=self.transform_caption)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.C.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(dataset, replacement=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.C.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_201": {
                "tensors": {
                    "value": "video_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.transform_frame(feat) for feat in video_feats]",
                            "ListComp"
                        ],
                        [
                            "self.video_feats[vid]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RandomSampler_217": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.CustomDataset(self.C, phase, caption_fpath, transform_frame=self.transform_frame, transform_caption=self.transform_caption)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "loader/transform.py": {
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(array)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "softmax_6": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/caption_generator.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "beam_output_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beam_output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(beam_output_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "normalized_beam_output_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "normalized_beam_output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(normalized_beam_output_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_62": {
                "input": {
                    "value": "cum_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "self.max_caption_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.output_size",
                            "Attribute"
                        ],
                        [
                            "self.decoder.output_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_131": {
                "tensors": {
                    "value": "topk_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "tensors": {
                    "value": "topk_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_128": {
                "tensors": {
                    "value": "topk_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/decoder.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_directions * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "input_combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, feats.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_61": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/temporal_attention.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.bottleneck_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w(torch.tanh(Wh + Uv + self.b))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "input": {
                    "value": "Wh + Uv + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_fpath",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "C.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "C.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_86": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=C.lr, weight_decay=C.weight_decay, amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "C.lr_decay_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "C.lr_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_39": {
                "f": {
                    "value": "C.pretrained_decoder_fpath",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[feat.cuda() for feat in feats]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(feats, dim=2)",
                            "Call"
                        ],
                        [
                            "onlyonce_dataset.values()",
                            "Call"
                        ],
                        [
                            "feats[batch_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_fpath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_55": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[1:].view(-1, vocab.n_vocabs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "captions[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "PAD_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab.word2idx['<PAD>']",
                            "Subscript"
                        ],
                        [
                            "vocab.word2idx['<PAD>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nll_loss_86": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[1:].view(-1, vocab.n_vocabs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "captions[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "PAD_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab.word2idx['<PAD>']",
                            "Subscript"
                        ],
                        [
                            "vocab.word2idx['<PAD>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_247": {
                "obj": {
                    "value": "{'epoch': e, 'decoder': model.decoder.state_dict(), 'config': cls_to_dict(config)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_fpath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__62": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "gradient_clip",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "feats[:batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}