{
    "checkpointer.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_checkpoint.read().strip()",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, '%s.pth' % _name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_86": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "sum_46": {
                "variable": {
                    "value": "r1_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_grads.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "(recon_x - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "r1_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_grads.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_52": {
                "input": {
                    "value": "-d_result_fake",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "1 + log_var - mu.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_33": {
                "input": {
                    "value": "-d_result_real",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_45": {
                "outputs": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_result_real.sum()",
                            "Call"
                        ],
                        [
                            "d_result_real.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_37": {
                "outputs": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_result_real.sum()",
                            "Call"
                        ],
                        [
                            "d_result_real.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lreq.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_88": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_159": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_149": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_153": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module_mind/data_loader.py": {
        "torch": {}
    },
    "module_mind/generate_images.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_m2m_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'module_mind/output/submitted/model299.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "current_device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_46": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_60": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(-1, 1, size=(batch_size, hyperparameters['z_dim']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module_mind/models.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dense_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pow_59": {
                "variable": {
                    "value": "d_out_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(real_images)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dense_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grad_48": {
                "outputs": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_t)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * real_images + (1 - t) * fake_images.view(batch_size, 512)",
                            "BinOp"
                        ],
                        [
                            "x_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(x_t, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(c_out.size()).cuda() if train_on_gpu else torch.ones(c_out.size())",
                    "type": "IfExp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dense[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "dense[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dense[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "dense[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "dense[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dense[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "dense[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dense[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "c_out.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_50": {
                "*size": {
                    "value": "c_out.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "module_mind/prepare_data.py": {
        "torch": {
            "current_device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_35": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_49": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "np.asarray(im, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "input": {
                    "value": "x[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2] // im_size",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2] // im_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "module_mind/train.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "optimizer_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyperparameters['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "hyperparameters['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "optimizer_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyperparameters['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "hyperparameters['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EncodedFFHQ(data_path=config['data_path'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hyperparameters['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config['pin_memory']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "module_mind/trainer.py": {
        "torch": {
            "save_144": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'Time': np.array(time_list), 'Critic': state_dict_c, 'Generator': state_dict_g, 'Critic loss': critic_loss_list, 'Generator loss': generator_loss_list, 'optims': [self.optim_generator.state_dict(), self.optim_critic.state_dict()]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.config['out_dir'] + '/' + self.config['name'] + '/model_' + str(epoch) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(-1, 1, size=(bs, self.hyperparameters['z_dim']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(-1, 1, size=(bs, self.hyperparameters['z_dim']))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "reshape_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "addcmul_34": {
                "input": {
                    "value": "style[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "style[:, 0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_69": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "dlatent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_82": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "style_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_188": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_195": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_331": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_334": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_403": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_421": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_424": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_488": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_504": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_509": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_512": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_514": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_549": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_578": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_588": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_591": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_594": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_596": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_617": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_646": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_656": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_659": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_662": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_664": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_692": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_700": {
                "variable": {
                    "value": "to_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_750": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "needed_resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_to_resolution[lod]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "lerp_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_797": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, 512, 4, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_828": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_860": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_971": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_975": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_977": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_979": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_1009": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_1011": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_1015": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "2 ** (2 + lod)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_29": {
                "input": {
                    "value": "torch.mean(x.pow(2.0), dim=1, keepdim=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "style_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_893": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_914": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_939": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "addcmul_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_692": {},
            "ConvTranspose2d_799": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_800": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_803": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_804": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_805": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_807": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_808": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_809": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_811": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_816": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_833": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_834": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_835": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_837": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_838": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_839": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_841": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_842": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_843": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_845": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_846": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "x.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_214": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_217": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_234": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_220": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_240": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tracker.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "x.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "x.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}