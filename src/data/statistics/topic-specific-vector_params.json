{
    "nn_classifier/data/.ipynb_checkpoints/preprocessing-checkpoint.py": {
        "sklearn": {
            "train_test_split_127": {
                "variable": {
                    "value": "(t_pos, test_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_128": {
                "variable": {
                    "value": "(train_pos, valid_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "t_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_129": {
                "variable": {
                    "value": "(t_neg, test_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_130": {
                "variable": {
                    "value": "(train_neg, valid_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "t_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nn_classifier/data/preprocessing.py": {
        "sklearn": {
            "train_test_split_136": {
                "variable": {
                    "value": "(train_pos, valid_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "t_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_139": {
                "variable": {
                    "value": "(train_neg, valid_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "t_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nn_classifier/src/train_test.py": {
        "sklearn": {
            "average_precision_score_217": {
                "y_true": {
                    "value": "total_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_label)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_probs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_256": {
                "y_true": {
                    "value": "total_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_label)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_probs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(total_probs)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "TensorDataset_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_24": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "float(config.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "float(config.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_17": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_19": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_26": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_28": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(mask, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.tensor(data, dtype=torch.float), torch.tensor(target, dtype=torch.float))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_50": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Binary_topic_Net(config, num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Classifier(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_128": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Binary_topic_Net(config, num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Classifier(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Binary_topic_Net(config, num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Classifier(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_193": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_232": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Binary_topic_Net(config, num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Classifier(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_233": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_53": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_129": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nn_classifier/src/utils.py": {
        "sklearn": {
            "f1_score_179": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np.array(y_true).shape) - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros_like(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_142": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np.array(y_true).shape) - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros_like(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_57": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np.array(y_true).shape) - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros_like(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_57": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np.array(y_true).shape) - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros_like(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_57": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np.array(y_true).shape) - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros_like(y_true)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_classifier/src/model.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(config.in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_14": {
                "variable": {
                    "value": "self.sigmoid_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_15": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(input).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.cls(vector).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_20": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(input).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.cls(vector).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_33": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(config.in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_37": {
                "variable": {
                    "value": "softm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_39": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * weights[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(vector, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vector, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_43": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * weights[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(vector, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vector, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(input).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.cls(vector).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_46": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(input).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.cls(vector).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_31": {
                "*size": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nn_classifier/src/pytorchtools.py": {
        "torch": {
            "save_51": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}