{
    "AwA1_GBU.py": {
        "sklearn": {
            "accuracy_score_33": {
                "y_true": {
                    "value": "test_label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpre[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_84": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 85]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_113": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_10": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_11": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_101": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 85])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([85, 1600])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_104": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1600])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AwA2_GBU.py": {
        "sklearn": {
            "accuracy_score_36": {
                "y_true": {
                    "value": "test_label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpre[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 85]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_112": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_102": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 85])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([85, 1600])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1600])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CUB1_GBU.py": {
        "sklearn": {
            "accuracy_score_33": {
                "y_true": {
                    "value": "test_label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpre[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 312]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_114": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_10": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_11": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_103": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_107": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1200, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 312])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([312, 1200])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1200, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1200])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "SUN_GBU.py": {
        "sklearn": {
            "accuracy_score_36": {
                "y_true": {
                    "value": "test_label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpre[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 102]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_112": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_102": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 102])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([102, 1600])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1600])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aPY_GBU.py": {
        "sklearn": {
            "accuracy_score_36": {
                "y_true": {
                    "value": "test_label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpre[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_112": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_102": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([64, 1600])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1600, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1600])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AwA_attribute.py": {
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 85]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_114": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_118": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_29": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outpre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * 6180",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f['test_labels'])",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.asarray(test_label))",
                            "Call"
                        ],
                        [
                            "test_label.astype('float32')",
                            "Call"
                        ],
                        [
                            "test_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_103": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_107": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([300, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(outpre, test_label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 85])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([85, 300])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([300, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([300])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AwA_fusion.py": {
        "tensorflow": {
            "placeholder_96": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 85]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "word_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "left_w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(word_features, W_left_w1) + b_left_w1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "center_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(multimodal, W_center_1) + b_center_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(center_1 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_140": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_29": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outpre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * 6180",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f['test_labels'])",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.asarray(test_label))",
                            "Call"
                        ],
                        [
                            "test_label.astype('float32')",
                            "Call"
                        ],
                        [
                            "test_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_123": {
                "x": {
                    "value": "center_1 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_126": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([900])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_127": {
                "t": {
                    "value": "b_left_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([900])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_128": {
                "t": {
                    "value": "b_center_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(outpre, test_label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "word_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1000])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1000, 900])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 85])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([85, 900])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "a": {
                    "value": "multimodal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_w1 + 3 * left_a1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_center_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([900, 1024])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AwA_wordvector.py": {
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "word_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "left_w1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(word_features, W_left_w1) + b_left_w1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "loss_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_w1 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_112": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_29": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outpre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * 6180",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f['test_labels'])",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.asarray(test_label))",
                            "Call"
                        ],
                        [
                            "test_label.astype('float32')",
                            "Call"
                        ],
                        [
                            "test_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_98": {
                "x": {
                    "value": "left_w1 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_101": {
                "t": {
                    "value": "b_left_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(outpre, test_label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "word_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1000])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1000, 1024])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CUB_attribute.py": {
        "tensorflow": {
            "placeholder_82": {
                "variable": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 312]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(att_features, W_left_a1) + b_left_a1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "left_a2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(left_a1, W_left_a2) + b_left_a2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(left_a2 - visual_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_115": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_13": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_31": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outpre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * 2933",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f['test_labels_cub'])",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.asarray(test_label))",
                            "Call"
                        ],
                        [
                            "test_label.astype('float32')",
                            "Call"
                        ],
                        [
                            "test_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_100": {
                "x": {
                    "value": "left_a2 - visual_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_104": {
                "t": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([700, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_32": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(outpre, test_label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "att_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 312])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([312, 700])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(att_features, W_left_a1) + b_left_a1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_left_a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([700, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_103": {
                "t": {
                    "value": "b_left_a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([700])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kNN_cosine.py": {
        "tensorflow": {}
    }
}