{
    "pytorch_impl/train_pytorch_SANNE.py": {
        "sklearn": {
            "LogisticRegression_118": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_86": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "num_batches_per_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((data_size - 1) / args.batch_size) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "features_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cPickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_x, input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__97": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.array(context_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_impl/train_pytorch_SANNE_inductive.py": {
        "sklearn": {
            "LogisticRegression_153": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_113": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "num_batches_per_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((data_size - 1) / args.batch_size) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "features_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cPickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_x, input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "test_node_walks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(dict_test_walk_idxs[test_node])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "np.array(context_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tf_impl/scoring_inductive.py": {
        "sklearn": {
            "LogisticRegression_62": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tf_impl/scoring_transductive.py": {
        "sklearn": {
            "LogisticRegression_59": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tf_impl/model_SANNE_l2.py": {
        "tensorflow": {
            "placeholder_11": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length * num_neighbors, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_22": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_23": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length, 1, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_43": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "self.outputEncoderInd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length * num_neighbors, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sampled_softmax_loss(weights=self.embedding_matrix, biases=self.softmax_biases, inputs=self.outputEncoder, labels=self.input_y, num_sampled=num_sampled, num_classes=vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_63": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_64": {
                "msg": {
                    "value": "Seting up the main structure",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "input_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feature_1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initialization",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feature_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_60": {
                "weights": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_impl/model_SANNE_squash.py": {
        "tensorflow": {
            "reduce_sum_76": {
                "variable": {
                    "value": "vec_squared_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length * num_neighbors, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_21": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.inputTransfG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length, 1, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length, feature_dim_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "self.outputEncoderInd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * sequence_length * num_neighbors, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sampled_softmax_loss(weights=self.embedding_matrix, biases=self.softmax_biases, inputs=self.outputEncoder, labels=self.input_y, num_sampled=num_sampled, num_classes=vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_66": {
                "msg": {
                    "value": "Seting up the main structure",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_76": {
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "x": {
                    "value": "vec_squared_norm + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_15": {
                "name": {
                    "value": "input_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feature_1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initialization",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feature_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_62": {
                "weights": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.outputEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_59": {
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_impl/train_SANNE.py": {
        "tensorflow": {
            "set_random_seed_13": {
                "seed": {
                    "value": "123456789",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_101": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "args.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "args.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=args.allow_soft_placement, log_device_placement=args.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_135": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_155": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_impl/train_SANNE_ind.py": {
        "tensorflow": {
            "set_random_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_135": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "args.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "args.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_137": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=args.allow_soft_placement, log_device_placement=args.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_169": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_199": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_impl/generate_random_walks.py": {
        "torch": {
            "device_3": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_2": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_5": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_impl/log_uniform/test.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_32": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8192",
                            "int"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_12": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x * log_N).long() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "793471",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([log_uniform(idx, range_max) for idx in range(range_max)])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_11": {
                "input": {
                    "value": "x * log_N",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_impl/pytorch_model_SANNE.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_8": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_11": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_33": {
                "variable": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "self.feature_dim_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "self.ff_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TransformerEncoder_34": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(d_model=self.feature_dim_size, nhead=1, dim_feedforward=self.ff_hidden_size, dropout=0.5)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "self.num_self_att_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "input_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_feature(input_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(input_transf, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.input_feature(input_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(input_transf, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_44": {
                "variable": {
                    "value": "output_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer_encoder(input_transf)",
                            "Call"
                        ],
                        [
                            "F.normalize(output_transf, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "output_transf.repeat(1, 1, self.num_neighbors)",
                            "Call"
                        ],
                        [
                            "output_transf.view(-1, self.feature_dim_size)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder(input_transf)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "input_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_feature(input_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(input_transf, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.input_feature(input_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(input_transf, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_dim_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_impl/sampled_softmax.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(ntokens, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_50": {
                "variable": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "variable": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_56": {
                "variable": {
                    "value": "true_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mul(inputs, true_weights), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "sample_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inputs, torch.t(sample_weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.mul(inputs, true_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(sample_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "true_logits / torch.sum(sample_logits, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_56": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.weight, 0, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_57": {
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.weight, 0, sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "sample_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.matmul(inputs, torch.t(sample_weights)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}