{
    "adamw.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_48": {
                "variable": {
                    "value": "pow_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.view(p.size(0), -1)",
                            "Call"
                        ],
                        [
                            "sqr_p * sqr_p + group['eps']",
                            "BinOp"
                        ],
                        [
                            "sqr_p / sqr_p.max(dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "p_norm / 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_49": {
                "variable": {
                    "value": "sum_of_pow_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_p.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pow_p.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_50": {
                "input": {
                    "value": "sum_of_pow_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(sqr_p.unsqueeze(1), pow_p.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2 / p_norm - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "p2.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_55": {
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.view(p.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(p2.abs(), dim=1, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attack.py": {
        "torch": {
            "zeros_like_21": {
                "variable": {
                    "value": "init_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.clamp(init_noise, -self.eps / 2, self.eps / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ],
                        [
                            "torch.add(x.detach(), torch.sign(x.grad.detach()), alpha=self.step_size)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, inputs - self.eps), inputs + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x, self.down)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_28": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sign(x.grad.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x, inputs - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x, self.down)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_22": {
                "input": {
                    "value": "init_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x).normal_(0, self.eps / 4)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.eps / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.clamp(init_noise, -self.eps / 2, self.eps / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ],
                        [
                            "torch.add(x.detach(), torch.sign(x.grad.detach()), alpha=self.step_size)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, inputs - self.eps), inputs + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_30": {
                "input": {
                    "value": "x.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.clamp(init_noise, -self.eps / 2, self.eps / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ],
                        [
                            "torch.add(x.detach(), torch.sign(x.grad.detach()), alpha=self.step_size)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, inputs - self.eps), inputs + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.clamp(init_noise, -self.eps / 2, self.eps / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ],
                        [
                            "torch.add(x.detach(), torch.sign(x.grad.detach()), alpha=self.step_size)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, inputs - self.eps), inputs + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.down), self.up)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "Dataset_69": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "root": {
                    "value": "datadir",
                    "type": "variable",
                    "possible_values": []
                },
                "train": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "download": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "transform": {
                    "value": "train_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_transforms[dataset] if augmentation else test_transforms[dataset]",
                            "IfExp"
                        ],
                        [
                            "transforms.Compose(train_transform + default_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dataset_70": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "root": {
                    "value": "datadir",
                    "type": "variable",
                    "possible_values": []
                },
                "train": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "download": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "transform": {
                    "value": "test_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose(test_transforms[dataset] + default_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=datadir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, shuffle=True) if parallel else None",
                            "IfExp"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=datadir, train=False, download=True, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset, shuffle=False) if parallel else None",
                            "IfExp"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_75": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=datadir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_78": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=datadir, train=False, download=True, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "model(perturb)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "targets.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_179": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_269": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_291": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "locals()[model_name](input_dim=input_dim[args.dataset], **params)",
                            "Call"
                        ],
                        [
                            "locals()[model_name](input_dim=input_dim[args.dataset], num_classes=num_classes, **params)",
                            "Call"
                        ],
                        [
                            "Model(model, predictor, eps=0)",
                            "Call"
                        ],
                        [
                            "model.cuda(gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_316": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SummaryWriter_344": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "result_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_result_dir(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_401": {
                "variable": {
                    "value": "n_procs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_51": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_384": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_256": {
                "input": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "args[-1].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_153": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/bound_module.py": {
        "torch": {
            "addmm_26": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "w_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "beta": {
                    "value": "b_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_43": {
                "variable": {
                    "value": "r_mul_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_mul_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "torch.mm(r_mul_2, self.weight.abs().T)",
                            "Call"
                        ],
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "w.abs().bmm(r_mul_2.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight.abs().T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_44": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x_mul_2, self.weight, self.bias, self.w_scale / 2, self.b_scale)",
                            "Call"
                        ],
                        [
                            "w.bmm(x_mul_2.unsqueeze(-1)) * (self.w_scale / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, b.unsqueeze(-1), alpha=self.b_scale)",
                            "Call"
                        ],
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r_mul_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "torch.mm(r_mul_2, self.weight.abs().T)",
                            "Call"
                        ],
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "w.abs().bmm(r_mul_2.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-self.w_scale / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_45": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x_mul_2, self.weight, self.bias, self.w_scale / 2, self.b_scale)",
                            "Call"
                        ],
                        [
                            "w.bmm(x_mul_2.unsqueeze(-1)) * (self.w_scale / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, b.unsqueeze(-1), alpha=self.b_scale)",
                            "Call"
                        ],
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r_mul_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "torch.mm(r_mul_2, self.weight.abs().T)",
                            "Call"
                        ],
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "w.abs().bmm(r_mul_2.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "self.w_scale / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_67": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x_mul_2, self.weight, self.bias, self.w_scale / 2, self.b_scale)",
                            "Call"
                        ],
                        [
                            "w.bmm(x_mul_2.unsqueeze(-1)) * (self.w_scale / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, b.unsqueeze(-1), alpha=self.b_scale)",
                            "Call"
                        ],
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r_mul_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "torch.mm(r_mul_2, self.weight.abs().T)",
                            "Call"
                        ],
                        [
                            "upper - lower",
                            "BinOp"
                        ],
                        [
                            "w.abs().bmm(r_mul_2.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "self.w_scale / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x_mul_2, self.weight, self.bias, self.w_scale / 2, self.b_scale)",
                            "Call"
                        ],
                        [
                            "w.bmm(x_mul_2.unsqueeze(-1)) * (self.w_scale / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, b.unsqueeze(-1), alpha=self.b_scale)",
                            "Call"
                        ],
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "b.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.b_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_12": {
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(x, r_mul_2, alpha=self.w_scale / 2)",
                            "Call"
                        ],
                        [
                            "(y_upper - mean.unsqueeze(-1)).view_as(upper)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_21": {
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(x, r_mul_2, alpha=self.w_scale / 2)",
                            "Call"
                        ],
                        [
                            "(y_upper - mean.unsqueeze(-1)).view_as(upper)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_101": {
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(x, r_mul_2, alpha=-self.w_scale / 2)",
                            "Call"
                        ],
                        [
                            "(y_lower - mean.unsqueeze(-1)).view_as(lower)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/conv.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model/mlp.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model/model.py": {
        "torch": {}
    },
    "model/norm_dist.py": {
        "torch": {
            "empty_10": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "x.requires_grad or weight.requires_grad",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "abs_70": {
                "variable": {
                    "value": "abs_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lower.view(input_lower.size(0), group, 1, -1, input_lower.size(2)) - w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_71": {
                "variable": {
                    "value": "abs_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_upper.view(input_upper.size(0), group, 1, -1, input_upper.size(2)) - w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_73": {
                "variable": {
                    "value": "output_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "abs_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_117": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels // group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(out_channels, in_channels // group, kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "unfold_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y - mean.unsqueeze(-1)).view_as(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, self.kernel_size, self.dilation, self.padding, self.stride)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_144": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(lower, self.kernel_size, self.dilation, self.padding, self.stride)",
                            "Call"
                        ],
                        [
                            "lower.view_as(y)",
                            "Call"
                        ],
                        [
                            "self.normalize(lower)",
                            "Call"
                        ],
                        [
                            "lower + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "lower.view_as(x) if lower is not None else None",
                            "IfExp"
                        ],
                        [
                            "lower.view_as(x) if lower is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_145": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(upper, self.kernel_size, self.dilation, self.padding, self.stride)",
                            "Call"
                        ],
                        [
                            "upper.view_as(y)",
                            "Call"
                        ],
                        [
                            "self.normalize(upper)",
                            "Call"
                        ],
                        [
                            "upper + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "upper.view_as(x) if upper is not None else None",
                            "IfExp"
                        ],
                        [
                            "upper.view_as(x) if upper is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_14": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_55": {
                "variable": {
                    "value": "normalize",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistF.apply(input, weight, group, p, tag)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), group, 1, -1, input.size(2)) - weight.view(group, -1, weight.size(-1), 1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(y / normalize, dim=3, p=p, keepdim=True) * normalize",
                            "BinOp"
                        ],
                        [
                            "y.view(y.size(0), -1, y.size(-1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "norm_dist(x.view(x.size(0), x.size(1), -1), weight, self.group, p=self.p, tag=self.tag)",
                            "Call"
                        ],
                        [
                            "y.view(x.size(0), -1, (h + 2 * self.padding - self.kernel_size) // self.stride + 1, (w + 2 * self.padding - self.kernel_size) // self.stride + 1)",
                            "Call"
                        ],
                        [
                            "self.normalize(y)",
                            "Call"
                        ],
                        [
                            "y + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y - mean.unsqueeze(-1)).view_as(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, self.kernel_size, self.dilation, self.padding, self.stride)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "grad_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(self.weight.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "grad_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_42": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y - mean.unsqueeze(-1)).view_as(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, self.kernel_size, self.dilation, self.padding, self.stride)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "grad_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(self.weight.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "grad_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_56": {
                "input": {
                    "value": "y / normalize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_72": {
                "input": {
                    "value": "abs_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "abs_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_72": {
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "seed_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "seed_value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}