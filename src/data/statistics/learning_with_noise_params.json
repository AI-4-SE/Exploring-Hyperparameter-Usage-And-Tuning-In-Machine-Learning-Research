{
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/autosummary.py": {
        "tensorflow": {
            "cast_49": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_64": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_finite(v[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.stack(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(3, dtype=_dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_variable_initialized(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.assign_add(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.assign(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(v.shape.as_list())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_56": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(v), _dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_finite_64": {
                "x": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_68": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(_create_var(name, value))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_189": {
                "variable": {
                    "value": "_merge_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_61": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_add_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "'summary_' + name_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_136": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vars_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_188": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_102": {
                "input": {
                    "value": "value if passthru is None else passthru",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "update_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "_create_var(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[moments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "moments[2] - tf.square(moments[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_139": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "reset_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.assign(var, tf.zeros(3, dtype=_dtype)) for var in vars_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_143": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moments[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_145": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_lo",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean - std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_hi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean + std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "moments[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_156": {
                "variable": {
                    "value": "plugin",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/network.py": {
        "tensorflow": {
            "get_default_graph_458": {
                "variable": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_141": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "out_expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_func(*self.input_templates, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "self._build_func(*final_inputs, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "[out_expr] if tfutil.is_tf_expression(out_expr) else list(out_expr)",
                            "IfExp"
                        ],
                        [
                            "[tf.concat(outputs, axis=0) for outputs in zip(*out_split)]",
                            "ListComp"
                        ]
                    ]
                },
                "argv": {
                    "value": "dict(zip(in_expr, mb_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_351": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_540": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_540": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_540": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool_584": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_587": {
                "type_value": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "saturate_cast_589": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_graph_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_152": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_217": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x * out_mul for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[x + out_add for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.avg_pool(x, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW') for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.round(x) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.saturate_cast(x, out_dtype) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "tf.identity(expr, name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(valid_inputs[0])[0]] + shape[1:], name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(valid_inputs[0])[0]] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_400": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_548": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[op for op in cur_ops if op.type.startswith('Variable')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "round_588": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_181": {
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_401": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_427": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_407": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "valid_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_403": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_26": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_27": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_28": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "kc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "gkc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "tf_expr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "get_default_graph_56": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_100": {
                "device_name": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_100": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_143": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_235": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_262": {
                "*inputs": {
                    "value": "*all_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.reshape(x, [x.shape.num_elements()]) for x in device.grad_clean.values()]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(combo, axis=0)",
                            "Call"
                        ],
                        [
                            "collective_ops.all_reduce(combo, merge_op='Add', final_op='Id', group_size=len(self._devices), group_key=_collective_ops_group_key, instance_key=_collective_ops_instance_key)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_343": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_349": {
                "variable": {
                    "value": "b1pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_350": {
                "variable": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_370": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_164": {
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_168": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / len(device.grad_raw[var]) / len(self._devices)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(scale, dtype=tf.float32, name='scale')",
                            "Call"
                        ],
                        [
                            "scale / tf.cast(self.minibatch_multiplier, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "self.undo_loss_scaling(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_193": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_203": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_ok",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_310": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "grad_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combo[cur_ofs:cur_ofs + grad_old.shape.num_elements()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "grad_old.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_340": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_348": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_354": {
                "ref": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=1, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b2pow_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b2pow_var * self.beta2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_360": {
                "variable": {
                    "value": "m_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_361": {
                "variable": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "self.id + '_mem'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_137": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_215": {
                "variable": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_235": {
                "values": {
                    "value": "[acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_237": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : device.optimizer.apply_gradients([(tf.cast(grad, var.dtype), var) for (var, grad) in device.grad_acc.items()])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape.num_elements()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_355": {
                "x": {
                    "value": "1 - b2pow_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_366": {
                "ref": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=tf.zeros_like(var), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_366": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_new * m_new / (tf.sqrt(v_new) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_173": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_181": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_187": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_214": {
                "variable": {
                    "value": "device.grad_acc_vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_219": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "count_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_220": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_222": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "count_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, tf.zeros([]))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "count_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, count_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "assign_add_241": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_242": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_243": {
                "*inputs": {
                    "value": "tf.cond(all_ok, ls_inc_op, ls_dec_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_244": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.group(tf.cond(all_ok, ls_inc_op, ls_dec_op))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_364": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_365": {
                "x": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_229": {
                "control_inputs": {
                    "value": "[acc_cur]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_243": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_add(device.loss_scaling_var, self.loss_scaling_inc)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "ls_dec_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_sub(device.loss_scaling_var, self.loss_scaling_dec)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "convert_to_tensor_248": {
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_249": {
                "condition": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_360": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_361": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_230": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "acc_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "acc_var + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_231": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_232": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "acc_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, tf.zeros(var.shape))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "acc_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, acc_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_236": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_235": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib/tflib/tfutil.py": {
        "tensorflow": {
            "ConfigProto_145": {
                "variable": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_155": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_31": {
                "main": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "tf.VariableScope(name=scope, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_172": {
                "variable": {
                    "value": "target_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_247": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "saturate_cast_252": {
                "value": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "Log2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Exp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "x * np.float32(np.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "Lerp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "LerpClip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VariableScope_81": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_122": {
                "seed": {
                    "value": "tf_random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg['rnd.tf_random_seed']",
                            "Subscript"
                        ],
                        [
                            "np.random.randint(1 << 31)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_177": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_default_graph_208": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_71": {
                "t": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_212": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.placeholder(var.dtype, var.shape, 'new_value')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "setter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_188": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_212": {
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/autosummary.py": {
        "tensorflow": {
            "cast_49": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_64": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_finite(v[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.stack(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(3, dtype=_dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_variable_initialized(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.assign_add(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.assign(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(v.shape.as_list())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_56": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(v), _dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_finite_64": {
                "x": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_68": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(_create_var(name, value))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_189": {
                "variable": {
                    "value": "_merge_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_61": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_add_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "'summary_' + name_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_136": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vars_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_188": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_102": {
                "input": {
                    "value": "value if passthru is None else passthru",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "update_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "_create_var(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[moments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "moments[2] - tf.square(moments[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_139": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "reset_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.assign(var, tf.zeros(3, dtype=_dtype)) for var in vars_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_143": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moments[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_145": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_lo",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean - std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_hi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean + std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "moments[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_156": {
                "variable": {
                    "value": "plugin",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/network.py": {
        "tensorflow": {
            "get_default_graph_458": {
                "variable": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_141": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "out_expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_func(*self.input_templates, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "self._build_func(*final_inputs, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "[out_expr] if tfutil.is_tf_expression(out_expr) else list(out_expr)",
                            "IfExp"
                        ],
                        [
                            "[tf.concat(outputs, axis=0) for outputs in zip(*out_split)]",
                            "ListComp"
                        ]
                    ]
                },
                "argv": {
                    "value": "dict(zip(in_expr, mb_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_351": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_540": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_540": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_540": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool_584": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_587": {
                "type_value": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "saturate_cast_589": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_graph_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_152": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_217": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x * out_mul for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[x + out_add for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.avg_pool(x, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW') for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.round(x) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.saturate_cast(x, out_dtype) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "tf.identity(expr, name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(valid_inputs[0])[0]] + shape[1:], name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(valid_inputs[0])[0]] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_400": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_548": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[op for op in cur_ops if op.type.startswith('Variable')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "round_588": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_181": {
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_401": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_427": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_407": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "valid_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_403": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_26": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_27": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_28": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "kc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "gkc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "tf_expr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/optimizer.py": {
        "tensorflow": {
            "get_default_graph_56": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_100": {
                "device_name": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_100": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_143": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_235": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_262": {
                "*inputs": {
                    "value": "*all_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.reshape(x, [x.shape.num_elements()]) for x in device.grad_clean.values()]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(combo, axis=0)",
                            "Call"
                        ],
                        [
                            "collective_ops.all_reduce(combo, merge_op='Add', final_op='Id', group_size=len(self._devices), group_key=_collective_ops_group_key, instance_key=_collective_ops_instance_key)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_343": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_349": {
                "variable": {
                    "value": "b1pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_350": {
                "variable": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_370": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_164": {
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_168": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / len(device.grad_raw[var]) / len(self._devices)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(scale, dtype=tf.float32, name='scale')",
                            "Call"
                        ],
                        [
                            "scale / tf.cast(self.minibatch_multiplier, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "self.undo_loss_scaling(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_193": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_203": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_ok",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_310": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "grad_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combo[cur_ofs:cur_ofs + grad_old.shape.num_elements()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "grad_old.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_340": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_348": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_354": {
                "ref": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=1, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b2pow_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b2pow_var * self.beta2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_360": {
                "variable": {
                    "value": "m_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_361": {
                "variable": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "self.id + '_mem'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_137": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_215": {
                "variable": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_235": {
                "values": {
                    "value": "[acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_237": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : device.optimizer.apply_gradients([(tf.cast(grad, var.dtype), var) for (var, grad) in device.grad_acc.items()])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape.num_elements()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_355": {
                "x": {
                    "value": "1 - b2pow_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_366": {
                "ref": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=tf.zeros_like(var), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_366": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_new * m_new / (tf.sqrt(v_new) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_173": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_181": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_187": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_214": {
                "variable": {
                    "value": "device.grad_acc_vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_219": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "count_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_220": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_222": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "count_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, tf.zeros([]))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "count_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, count_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "assign_add_241": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_242": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_243": {
                "*inputs": {
                    "value": "tf.cond(all_ok, ls_inc_op, ls_dec_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_244": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.group(tf.cond(all_ok, ls_inc_op, ls_dec_op))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_364": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_365": {
                "x": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_229": {
                "control_inputs": {
                    "value": "[acc_cur]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_243": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_add(device.loss_scaling_var, self.loss_scaling_inc)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "ls_dec_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_sub(device.loss_scaling_var, self.loss_scaling_dec)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "convert_to_tensor_248": {
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_249": {
                "condition": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_360": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_361": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_230": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "acc_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "acc_var + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_231": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_232": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "acc_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, tf.zeros(var.shape))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "acc_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, acc_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_236": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_235": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_from_tf/tflib/tfutil.py": {
        "tensorflow": {
            "ConfigProto_145": {
                "variable": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_155": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_31": {
                "main": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "tf.VariableScope(name=scope, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_172": {
                "variable": {
                    "value": "target_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_247": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "saturate_cast_252": {
                "value": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "Log2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Exp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "x * np.float32(np.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "Lerp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "LerpClip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VariableScope_81": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_122": {
                "seed": {
                    "value": "tf_random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg['rnd.tf_random_seed']",
                            "Subscript"
                        ],
                        [
                            "np.random.randint(1 << 31)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_177": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_default_graph_208": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_71": {
                "t": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_212": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.placeholder(var.dtype, var.shape, 'new_value')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "setter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_188": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_212": {
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/autosummary.py": {
        "tensorflow": {
            "cast_49": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_64": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_finite(v[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.stack(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(3, dtype=_dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_variable_initialized(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.assign_add(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.assign(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(v.shape.as_list())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_56": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(v), _dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_finite_64": {
                "x": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_68": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(_create_var(name, value))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_189": {
                "variable": {
                    "value": "_merge_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_61": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_add_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_68": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "'summary_' + name_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_136": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vars_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_188": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_102": {
                "input": {
                    "value": "value if passthru is None else passthru",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "update_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "_create_var(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[moments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "moments[2] - tf.square(moments[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_139": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "reset_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.assign(var, tf.zeros(3, dtype=_dtype)) for var in vars_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_143": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moments[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_145": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_lo",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean - std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_hi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean + std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "moments[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_156": {
                "variable": {
                    "value": "plugin",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/network.py": {
        "tensorflow": {
            "get_default_graph_458": {
                "variable": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_141": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "out_expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_func(*self.input_templates, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "self._build_func(*final_inputs, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "[out_expr] if tfutil.is_tf_expression(out_expr) else list(out_expr)",
                            "IfExp"
                        ],
                        [
                            "[tf.concat(outputs, axis=0) for outputs in zip(*out_split)]",
                            "ListComp"
                        ]
                    ]
                },
                "argv": {
                    "value": "dict(zip(in_expr, mb_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_351": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_540": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_540": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_540": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool_584": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_587": {
                "type_value": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "saturate_cast_589": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_graph_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_152": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_217": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x * out_mul for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[x + out_add for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.avg_pool(x, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW') for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.round(x) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.saturate_cast(x, out_dtype) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "tf.identity(expr, name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(valid_inputs[0])[0]] + shape[1:], name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(valid_inputs[0])[0]] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_400": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_548": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[op for op in cur_ops if op.type.startswith('Variable')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "round_588": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_181": {
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_401": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_427": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_407": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "valid_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_403": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_26": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_27": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_28": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "kc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "gkc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "tf_expr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/optimizer.py": {
        "tensorflow": {
            "get_default_graph_56": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_100": {
                "device_name": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_100": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_143": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_235": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_262": {
                "*inputs": {
                    "value": "*all_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.reshape(x, [x.shape.num_elements()]) for x in device.grad_clean.values()]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(combo, axis=0)",
                            "Call"
                        ],
                        [
                            "collective_ops.all_reduce(combo, merge_op='Add', final_op='Id', group_size=len(self._devices), group_key=_collective_ops_group_key, instance_key=_collective_ops_instance_key)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_343": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_349": {
                "variable": {
                    "value": "b1pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_350": {
                "variable": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_370": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_164": {
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_168": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / len(device.grad_raw[var]) / len(self._devices)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(scale, dtype=tf.float32, name='scale')",
                            "Call"
                        ],
                        [
                            "scale / tf.cast(self.minibatch_multiplier, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "self.undo_loss_scaling(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_193": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_203": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_ok",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_310": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "grad_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combo[cur_ofs:cur_ofs + grad_old.shape.num_elements()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "grad_old.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_340": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_348": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_354": {
                "ref": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=1, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b2pow_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b2pow_var * self.beta2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_360": {
                "variable": {
                    "value": "m_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_361": {
                "variable": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "self.id + '_mem'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_137": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_215": {
                "variable": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_235": {
                "values": {
                    "value": "[acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_237": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : device.optimizer.apply_gradients([(tf.cast(grad, var.dtype), var) for (var, grad) in device.grad_acc.items()])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape.num_elements()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_355": {
                "x": {
                    "value": "1 - b2pow_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_366": {
                "ref": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=tf.zeros_like(var), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_366": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_new * m_new / (tf.sqrt(v_new) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_173": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_181": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_187": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_214": {
                "variable": {
                    "value": "device.grad_acc_vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_219": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "count_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_220": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_222": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "count_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, tf.zeros([]))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "count_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, count_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "assign_add_241": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_242": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_243": {
                "*inputs": {
                    "value": "tf.cond(all_ok, ls_inc_op, ls_dec_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_244": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.group(tf.cond(all_ok, ls_inc_op, ls_dec_op))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_364": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_365": {
                "x": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_229": {
                "control_inputs": {
                    "value": "[acc_cur]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_243": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_add(device.loss_scaling_var, self.loss_scaling_inc)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "ls_dec_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_sub(device.loss_scaling_var, self.loss_scaling_dec)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "convert_to_tensor_248": {
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_249": {
                "condition": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_360": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_361": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_230": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "acc_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "acc_var + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_231": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_232": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "acc_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, tf.zeros(var.shape))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "acc_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, acc_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_236": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_235": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/dnnlib_old/tflib/tfutil.py": {
        "tensorflow": {
            "ConfigProto_145": {
                "variable": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_155": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_31": {
                "main": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "tf.VariableScope(name=scope, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_172": {
                "variable": {
                    "value": "target_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_247": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "saturate_cast_252": {
                "value": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "Log2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Exp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "x * np.float32(np.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "Lerp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "LerpClip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VariableScope_81": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_122": {
                "seed": {
                    "value": "tf_random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg['rnd.tf_random_seed']",
                            "Subscript"
                        ],
                        [
                            "np.random.randint(1 << 31)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_177": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_default_graph_208": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_71": {
                "t": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_212": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.placeholder(var.dtype, var.shape, 'new_value')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "setter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_188": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_212": {
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/modified_builders/sun397_ours.py": {
        "tensorflow": {
            "decode_image_98": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fobj.read()",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_323": {
                "name": {
                    "value": "os.fspath(filepath)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/port_model/port_model.py": {
        "tensorflow": {
            "executing_eagerly_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img.transpose((1, 2, 0))[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_217": {
                "variable": {
                    "value": "tf_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tonumpy(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_73": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeAndNormalizationLayer(normalize_transform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "torch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResizeLayer(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location='cuda:0')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "torch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*torch_model[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_239": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_240": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "torch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "torch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(torch_model.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location='cuda:0')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/port_model/port_utils.py": {
        "tensorflow": {
            "load_variable_6": {
                "ckpt_dir_or_file": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "list_variables_11": {
                "ckpt_dir_or_file": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/port_model/test_supervised_ported_model.py": {
        "tensorflow": {
            "executing_eagerly_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_54": {
                "variable": {
                    "value": "tf_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img.transpose((1, 2, 0))[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GraphDef_28": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_27": {
                "name": {
                    "value": "pb_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_33": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/adapt_and_eval.py": {
        "tensorflow": {
            "is_gpu_available_55": {
                "variable": {
                    "value": "gpu_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "cuda_only": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "min_cuda_compute_capability": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/data_loader.py": {
        "tensorflow": {
            "resize_65": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize(image, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "image * (input_range[1] - input_range[0]) + input_range[0]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize(image, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "image * (input_range[1] - input_range[0]) + input_range[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/data_loader_test.py": {
        "tensorflow": {}
    },
    "scripts/generate_vtab_datasets/task_adaptation/loop.py": {
        "tensorflow": {
            "latest_checkpoint_278": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "estimator._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_61": {
                "variable": {
                    "value": "cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "tpu_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RunConfig_62": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "work_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "cluster",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(tpu=tpu_name)",
                            "Call"
                        ]
                    ]
                },
                "keep_checkpoint_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=TPU_ITERATION_PER_LOOP)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_70": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "work_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TPUEstimator_79": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model.model_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "work_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{k: v for d in [optimization_params, data_params, {'hub_module': hub_module, 'hub_module_signature': hub_module_signature, 'num_classes': num_classes}] for (k, v) in d.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(model_dir=work_dir, cluster=cluster, keep_checkpoint_max=None, save_checkpoints_steps=save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=TPU_ITERATION_PER_LOOP))",
                            "Call"
                        ],
                        [
                            "tf.estimator.RunConfig(model_dir=work_dir, keep_checkpoint_max=None, save_checkpoints_steps=save_checkpoints_steps, log_step_count_steps=2)",
                            "Call"
                        ]
                    ]
                },
                "use_tpu": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "train_batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.pop('batch_size')",
                            "Call"
                        ]
                    ]
                },
                "eval_batch_size": {
                    "value": "batch_size_eval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.pop('batch_size_eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_280": {
                "variable": {
                    "value": "checkpoint_reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "tf.train.latest_checkpoint(estimator._model_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_125": {
                "name": {
                    "value": "ops.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "estimator_spec.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_114": {
                "msg": {
                    "value": "'Warm-starting with WarmStartSettings: %s' % (self._warm_start_settings,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "warm_start_116": {
                "ckpt_to_initialize_from": {
                    "value": "*self._warm_start_settings",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "scalar_124": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "estimator_spec.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NanTensorHook_127": {
                "loss_tensor": {
                    "value": "estimator_spec.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_140": {
                "name": {
                    "value": "tf.compat.v1.GraphKeys.SAVERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.compat.v1.train.Saver(sharded=True, max_to_keep=self._config.keep_checkpoint_max, keep_checkpoint_every_n_hours=self._config.keep_checkpoint_every_n_hours, defer_build=True, save_relative_paths=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_224": {
                "master": {
                    "value": "self._config.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "self._config.is_chief",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "estimator_spec.scaffold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hooks": {
                    "value": "worker_hooks",
                    "type": "Variable",
                    "possible_values": []
                },
                "chief_only_hooks": {
                    "value": "tuple(chief_hooks) + tuple(estimator_spec.training_chief_hooks)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "save_summaries_steps": {
                    "value": "save_summary_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config.save_summary_steps",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "config": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_wait_secs": {
                    "value": "self._config.session_creation_timeout_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "log_step_count_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config.log_step_count_steps",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "warn_253": {
                "msg": {
                    "value": "Training with estimator made no steps. Perhaps input is empty or misspecified.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_281": {
                "checkpoint_dir": {
                    "value": "estimator._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUConfig_67": {
                "iterations_per_loop": {
                    "value": "TPU_ITERATION_PER_LOOP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "latest_checkpoint_113": {
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_130": {
                "tensors": {
                    "value": "{'loss': estimator_spec.loss, 'step': global_step_tensor}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "self._config.log_step_count_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_139": {
                "key": {
                    "value": "tf.compat.v1.GraphKeys.SAVERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_142": {
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self._config.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "self._config.keep_checkpoint_every_n_hours",
                    "type": "Attribute",
                    "possible_values": []
                },
                "defer_build": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CheckpointSaverHook_167": {
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_secs": {
                    "value": "self._config.save_checkpoints_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "self._config.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "estimator_spec.scaffold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ListDirectory_312": {
                "dirname": {
                    "value": "work_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_122": {
                "key": {
                    "value": "ops.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummarySaverHook_212": {
                "save_steps": {
                    "value": "self._config.save_summary_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dir": {
                    "value": "self._config.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "estimator_spec.scaffold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepCounterHook_220": {
                "every_n_steps": {
                    "value": "self._config.log_step_count_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dir": {
                    "value": "self._config.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/loop_test.py": {
        "tensorflow": {}
    },
    "scripts/generate_vtab_datasets/task_adaptation/model.py": {
        "tensorflow": {
            "exists_45": {
                "variable": {
                    "value": "is_legacy_hub_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "os.path.join(module_path, 'tfhub_module.pb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_82": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pre_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_layers[finetune_layer]",
                            "Subscript"
                        ],
                        [
                            "module(features['image'])['output_0']",
                            "Subscript"
                        ],
                        [
                            "module(features['image'], training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(pre_logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['num_classes']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_87": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pre_logits, units=num_classes, kernel_initializer=tf.zeros_initializer(), name='linear_head')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=features['label'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "pre_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_layers[finetune_layer]",
                            "Subscript"
                        ],
                        [
                            "module(features['image'])['output_0']",
                            "Subscript"
                        ],
                        [
                            "module(features['image'], training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(pre_logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_92": {
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_99": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=features['label'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(accuracy_metric, [logits, features['label']])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "EstimatorSpec_102": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=features['label'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metrics[0](*eval_metrics[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_ref_69": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pre_logits, units=num_classes, kernel_initializer=tf.zeros_initializer(), name='linear_head')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/model_test.py": {
        "tensorflow": {
            "constant_52": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random([32, 224, 224, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randint(0, 1000, [32])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/test_utils.py": {
        "tensorflow": {
            "placeholder_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[32, 224, 224, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_35": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "initialize_all_variables_76": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "function_61": {
                "input_signature": {
                    "value": "[tf.TensorSpec(name='input', shape=[32, 224, 224, 3], dtype=tf.float32), tf.TensorSpec(name='training', shape=None, dtype=tf.bool)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageModel()",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[32, 224, 224, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorSpec_62": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_63": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/trainer.py": {
        "tensorflow": {
            "get_or_create_global_step_48": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "piecewise_constant_50": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "boundaries": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[initial_learning_rate * lr_decay_factor ** i for i in range(len(decay_steps) + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_57": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(tf.cast(global_step, tf.float32), warmup_steps), lambda : warmup_lr, lambda : lr)",
                            "Call"
                        ],
                        [
                            "tf.train.piecewise_constant(global_step, decay_steps, [initial_learning_rate * lr_decay_factor ** i for i in range(len(decay_steps) + 1)])",
                            "Call"
                        ],
                        [
                            "apply_warmup_lr(global_step, lr, initial_learning_rate, warmup_steps)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_add_72": {
                "variable": {
                    "value": "global_step_inc_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_31": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(tf.cast(global_step, tf.float32), warmup_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_lr",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : lr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.MomentumOptimizer(learning_rate=lr, momentum=momentum)",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_71": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_75": {
                "*inputs": {
                    "value": "[train_op, update_ops, global_step_inc_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_29": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_31": {
                "x": {
                    "value": "tf.cast(global_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/task_adaptation/trainer_test.py": {
        "tensorflow": {
            "Variable_32": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_vtab_datasets/tests/test_same_parameters.py": {
        "tensorflow": {
            "latest_checkpoint_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_53": {
                "variable": {
                    "value": "latest_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_path.format('caltech101')",
                            "Call"
                        ],
                        [
                            "'temp/moco_v2_pretrained_full'",
                            "Constant"
                        ]
                    ]
                }
            },
            "latest_checkpoint_54": {
                "variable": {
                    "value": "latest_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_path.format('cifar(num_classes=100)')",
                            "Call"
                        ],
                        [
                            "'temp/moco_v2_pretrained_linear_only'",
                            "Constant"
                        ]
                    ]
                }
            },
            "list_variables_37": {
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "align_uniform/__init__.py": {
        "torch": {
            "pdist_9": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_9": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_9": {
                "input": {
                    "value": "-t",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "align_uniform/encoder.py": {
        "torch": {
            "ModuleList_78": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "nn.Conv2d(in_channel, 96, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "nn.Conv2d(96, 192, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.Conv2d(192, 384, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Conv2d(384, 384, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "nn.Conv2d(384, 192, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "nn.Linear(4096, 4096, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "nn.Linear(4096, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "192 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "align_uniform/linear_eval_imagenet100.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(path_imagenet, 'train'), transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(path_imagenet, 'val'), transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eval_numel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(sample.unsqueeze(0).to(opt.gpu), layer_index=opt.layer_index).numel()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_160": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(classifier.parameters(), lr=opt.lr, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "opt.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "opt.lr_decay_epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_134": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "{'encoder': encoder.state_dict(), 'classifier': classifier.state_dict(), 'layer_index': opt.layer_index}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(outdir, 'encoder_classifier.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "encoder_checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('encoders/small_scale', opt.dataset, 'encoder.pth')",
                            "Call"
                        ],
                        [
                            "opt.encoder",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_183": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(feats)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels.to(opt.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "align_uniform/main.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(train_path, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "SmallAlexNet(feat_dim=opt.feat_dim).to(opt.gpus[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_123": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(encoder.parameters(), lr=opt.lr, momentum=opt.momentum, weight_decay=opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(encoder.parameters(), lr=opt.lr, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "opt.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "opt.lr_decay_epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "opt.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_118": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "encoder.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, 'encoder.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_51": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[im_x.to(opt.gpus[0]), im_y.to(opt.gpus[0])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "align_uniform/util.py": {
        "torch": {}
    },
    "generate_datasets/feature_visualizations/generate_dataset.py": {
        "torch": {
            "device_192": {
                "variable": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_133": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/feature_visualizations/vis/grad_ascent/lucent/objectives.py": {
        "torch": {
            "device_303": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "weight_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([depth, depth, out_c, out_c])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_410": {
                "variable": {
                    "value": "grams",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_t.view(batch, channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(flattened, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_411": {
                "variable": {
                    "value": "grams",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(flattened, torch.transpose(flattened, 1, 2))",
                            "Call"
                        ],
                        [
                            "F.normalize(grams, p=2, dim=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_311": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight).float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.channels), max_channel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.channels), max_channel, activation_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_312": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "(t_input - t_input_blurred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_410": {
                "input": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_t.view(batch, channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.channels), max_channel, activation_shape[2], activation_shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CosineSimilarity_261": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_296": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/feature_visualizations/vis/grad_ascent/lucent/render.py": {
        "torch": {
            "Adam_73": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_98": {
                "size": {
                    "value": "new_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fixed_image_size",
                            "Name"
                        ],
                        [
                            "224",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/feature_visualizations/vis/grad_ascent/lucent/transform.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Upsample_57": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "scale_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[_roundup(scale * d) for d in shp]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_45": {
                "input": {
                    "value": "image_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[w] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'reflect'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "constant_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_60": {
                "input": {
                    "value": "upsample(image_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[pad_y, pad_x] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "[normal(t) for t in image_t]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[dx, dy]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/generate_dataset.py": {
        "torch": {
            "LeakyReLU_84": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nimg",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "14",
                            "Constant"
                        ],
                        [
                            "G.num_ws",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/calc_metrics.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_54": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, G.z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_55": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, G.c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_42": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/generate.py": {
        "torch": {
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, G.c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(projected_w)['w']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(ws, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.RandomState(seed).randn(1, G.z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/legacy.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/metrics/metric_main.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/metrics/metric_utils.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/metrics/perceptual_path_length.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/metrics/precision_recall.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/projector.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "w_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w_avg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.mean(w_samples, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "w_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_steps] + list(w_opt.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[w_opt] + list(noise_bufs.values())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "vgg16",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "target_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(0).to(device).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "F.interpolate(target_images, size=(256, 256), mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_like_76": {
                "variable": {
                    "value": "buf[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise_bufs.values()",
                            "Call"
                        ],
                        [
                            "noise_bufs.values()",
                            "Call"
                        ],
                        [
                            "buf * buf.square().mean().rsqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "z_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(123).randn(w_avg_samples, G.z_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_98": {
                "variable": {
                    "value": "synth_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "synth_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G.synthesis(ws, noise_mode='const')",
                            "Call"
                        ],
                        [
                            "(synth_images + 1) * (255 / 2)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(synth_images, size=(256, 256), mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_like_91": {
                "input": {
                    "value": "w_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(w_avg, dtype=torch.float32, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v[None, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(noise, kernel_size=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "target_uint8.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_109": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v[None, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(noise, kernel_size=2)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_110": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v[None, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(noise, kernel_size=2)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/style_mixing.py": {
        "torch": {
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "all_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack([np.random.RandomState(seed).randn(G.z_dim) for seed in all_seeds])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/custom_ops.py": {
        "torch": {
            "load_107": {
                "name": {
                    "value": "module_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "build_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.cpp_extension._get_build_directory(module_name, verbose=verbose_build)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose_build",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "verbosity == 'full'",
                            "Compare"
                        ]
                    ]
                },
                "sources": {
                    "value": "digest_sources",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[os.path.join(digest_build_dir, os.path.basename(x)) for x in sources]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_110": {
                "name": {
                    "value": "module_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "verbose_build",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "verbosity == 'full'",
                            "Compare"
                        ]
                    ]
                },
                "sources": {
                    "value": "sources",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/misc.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/bias_act.py": {
        "torch": {
            "empty_39": {
                "variable": {
                    "value": "_null_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_26": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_27": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_30": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_31": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_32": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/conv2d_gradfix.py": {
        "torch": {
            "conv2d_38": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_43": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_114": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tuple_of_ints(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/conv2d_resample.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/fma.py": {
        "torch": {
            "addcmul_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/grid_sample_gradfix.py": {
        "torch": {
            "grid_sample_30": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_49": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/ops/upfirdn2d.py": {
        "torch": {
            "as_tensor_98": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "torch.as_tensor(f, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "f[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f.ger(f)",
                            "Call"
                        ],
                        [
                            "f / f.sum()",
                            "BinOp"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f[np.newaxis, np.newaxis].repeat([num_channels, 1] + [1] * f.ndim)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_187": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, upx - 1, 0, 0, 0, upy - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_74": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_235": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/torch_utils/training_stats.py": {
        "torch": {
            "as_tensor_82": {
                "variable": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(elems).sum(), elems.sum(), elems.square().sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(deltas)",
                            "Call"
                        ],
                        [
                            "deltas.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "_counters[name][device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.ones_like(elems).sum(), elems.sum(), elems.square().sum()])",
                            "Call"
                        ],
                        [
                            "moments.to(_counter_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moments.device",
                            "Attribute"
                        ],
                        [
                            "_sync_device if _sync_device is not None else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "self._moments[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_245": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "_cumulative[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(value)",
                            "Call"
                        ],
                        [
                            "elems.detach().flatten().to(_reduce_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "self._cumulative[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "counter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_counters[name].values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/train.py": {
        "torch": {
            "device_382": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/augment.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/dataset.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/loss.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/network_randomized.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/network_randomized_norgb.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/network_randomized_v2.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/network_randomized_v3.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/network_shuffling.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/networks.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/networks2.py": {
        "torch": {}
    },
    "generate_datasets/stylegan/stylegan2-ada-pytorch/training/training_loop.py": {
        "torch": {}
    },
    "moco/detection/convert-pretrain-to-detectron2.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "moco/main_lincls.py": {
        "torch": {
            "device_count_131": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_246": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(filter(lambda p: p.requires_grad, model.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_337": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_489": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_329": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_478": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + '/' + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_228": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_233": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_221": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_235": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_240": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_243": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_275": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_279": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "moco/main_moco.py": {
        "torch": {
            "device_count_192": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_288": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_290": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_468": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindirs[0], transform)",
                            "Call"
                        ],
                        [
                            "TwiglOnlineDataset(fragment_files, transform, parameter_diversity=parameter_diversity, sample_mixer=sample_mixer, resolution=int(224 * args.generation_resolution_multiplier), n_samples=n_samples, virtual_dataset_size=virtual_dataset_size, gpus=[rendering_gpu], max_queue_size=100000, transform_before=transform_before_mixing)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "multiprocessing_context": {
                    "value": "torch.multiprocessing.get_context('fork')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_593": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_175": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "[k[0][None] for k in batch[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_209": {
                "tensors": {
                    "value": "[k[1][None] for k in batch[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_269": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moco_training.moco.builder.MoCo(models.__dict__[args.arch], args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_274": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moco_training.moco.builder.MoCo(models.__dict__[args.arch], args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_262": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_276": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_314": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_318": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_417": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindirs[0], transform)",
                            "Call"
                        ],
                        [
                            "TwiglOnlineDataset(fragment_files, transform, parameter_diversity=parameter_diversity, sample_mixer=sample_mixer, resolution=int(224 * args.generation_resolution_multiplier), n_samples=n_samples, virtual_dataset_size=virtual_dataset_size, gpus=[rendering_gpu], max_queue_size=100000, transform_before=transform_before_mixing)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "moco/moco/builder.py": {
        "torch": {
            "cat_184": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_43": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_90": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_96": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_134": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_154": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_156": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.queue.clone().detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_93": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_145": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ],
                        [
                            "self._batch_unshuffle_ddp(k, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_180": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}