{
    "molecule_ge_coordinated_embeddings/datasets.py": {
        "sklearn": {
            "train_test_split_73": {
                "variable": {
                    "value": "(perts_train, perts_non_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "l1000_pert_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "train_split_frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "train_test_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "370",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_75": {
                "variable": {
                    "value": "(perts_val, perts_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "perts_non_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "train_test_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "370",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_156": {
                "variable": {
                    "value": "pert_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pert_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1000_perts.iloc[idx, :].values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(pert_sig, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "pert_sig_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pert_sig_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1000_perts_raw.iloc[idx, :].values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(pert_sig_raw, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([sigs_match], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "ctrl_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ctrl_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1000_controls.iloc[idx_ctrl, :].values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(ctrl_sig, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "ge_sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ctrl_sig, pert_sig)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "ctrl_sig_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ctrl_sig_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1000_controls_raw.iloc[idx_ctrl, :].values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(ctrl_sig_raw, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "ge_sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ctrl_sig, pert_sig, torch.log2((pert_sig_raw + epsilon) / (ctrl_sig_raw + epsilon)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "ge_sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ctrl_sig, pert_sig, pert_sig - ctrl_sig, torch.log2((pert_sig_raw + epsilon) / (ctrl_sig_raw + epsilon)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_178": {
                "input": {
                    "value": "(pert_sig_raw + epsilon) / (ctrl_sig_raw + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_183": {
                "input": {
                    "value": "(pert_sig_raw + epsilon) / (ctrl_sig_raw + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "molecule_ge_coordinated_embeddings/losses.py": {
        "torch": {
            "clamp_20": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_ap - self.beta + self._margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta - d_an + self._margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "symeig_117": {
                "variable": {
                    "value": "(D1, V1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "SigmaHat11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (m - 1) * torch.mm(ge_bar, ge_bar.t()) + self.r1 * torch.eye(o1).cuda()",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "symeig_118": {
                "variable": {
                    "value": "(D2, V2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "SigmaHat22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (m - 1) * torch.mm(chem_bar, chem_bar.t()) + self.r2 * torch.eye(o2).cuda()",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_128": {
                "input": {
                    "value": "V1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V1[:, posInd1]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(D1 ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_129": {
                "input": {
                    "value": "V2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V2[:, posInd2]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(D2 ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_131": {
                "input": {
                    "value": "SigmaHat11RootInv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(V1, torch.diag(D1 ** (-0.5))), V1.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "SigmaHat12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (m - 1) * torch.mm(ge_bar, chem_bar.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_135": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.trace(torch.mm(Tval.t(), Tval))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_138": {
                "variable": {
                    "value": "(U, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(Tval.t(), Tval)",
                    "type": "Call",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(U[0:self.k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "(pos_loss > 0.0) + (neg_loss > 0.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_112": {
                "input": {
                    "value": "ge_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ge - 1.0 / m * torch.mm(ge, torch.ones([m, m]).cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "chem_bar.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_121": {
                "input": {
                    "value": "D1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D1[posInd1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_124": {
                "input": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2[posInd2]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_109": {
                "input": {
                    "value": "ge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ge.t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones([m, m]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_110": {
                "input": {
                    "value": "chem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chem.t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones([m, m]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_113": {
                "input": {
                    "value": "ge_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ge - 1.0 / m * torch.mm(ge, torch.ones([m, m]).cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ge_bar.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_113": {
                "n": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_114": {
                "input": {
                    "value": "chem_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chem - 1.0 / m * torch.mm(chem, torch.ones([m, m]).cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "chem_bar.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_114": {
                "n": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_128": {
                "input": {
                    "value": "D1 ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_129": {
                "input": {
                    "value": "D2 ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trace_135": {
                "input": {
                    "value": "torch.mm(Tval.t(), Tval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_138": {
                "input": {
                    "value": "Tval.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Tval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(SigmaHat11RootInv, SigmaHat12), SigmaHat22RootInv)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_141": {
                "input": {
                    "value": "U[0:self.k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "d_an > d_ap",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "[m, m]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "[m, m]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_135": {
                "input": {
                    "value": "Tval.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Tval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(SigmaHat11RootInv, SigmaHat12), SigmaHat22RootInv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_139": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[torch.gt(U, self.eps).nonzero()[0]]",
                            "Subscript"
                        ],
                        [
                            "U.sort()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "molecule_ge_coordinated_embeddings/models.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "chemprop_info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chemprop_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "chemprop_info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chemprop_model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "linear_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "molecule_ge_coordinated_embeddings/train.py": {
        "torch": {
            "set_device_41": {
                "device": {
                    "value": "config['device_num']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config['trainer']['grad_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "molecule_ge_coordinated_embeddings/utils.py": {
        "torch": {
            "load_119": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_104": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, 'last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}